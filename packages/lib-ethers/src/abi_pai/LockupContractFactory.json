{
  "address": "0x074936eFFc0CC47fB1A22c8D4b4e68Ce2018B7b0",
  "contractName": "LocupContractFactory",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_lockupContractAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_unlockTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_deployer",
          "type": "address"
        }
      ],
      "name": "LockupContractDeployedThroughFactory",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_myoTokenAddress",
          "type": "address"
        }
      ],
      "name": "MYOTokenAddressSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SECONDS_IN_ONE_YEAR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_unlockTime",
          "type": "uint256"
        }
      ],
      "name": "deployLockupContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_contractAddress",
          "type": "address"
        }
      ],
      "name": "isRegisteredLockup",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lockupContractToDeployer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "myoTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_myoTokenAddress",
          "type": "address"
        }
      ],
      "name": "setMYOTokenAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3c870225bb0562b56df93f1bb699ce85354316d594869599a18c06739f20f4bb",
  "receipt": {
    "to": null,
    "from": "0xd28e3542856F157f979111435DaFCC37f419d0c2",
    "contractAddress": "0x074936eFFc0CC47fB1A22c8D4b4e68Ce2018B7b0",
    "transactionIndex": 10,
    "gasUsed": "752806",
    "logsBloom": "0x
    "blockHash": "0x141bcc4f34938f97eed3ab76ea2a25d16a27ddce6cae41036544e0ac52e4e867",
    "transactionHash": "0x3c870225bb0562b56df93f1bb699ce85354316d594869599a18c06739f20f4bb",
    "logs": [
      {
        "transactionIndex": 10,
        "blockNumber": 26047933,
        "transactionHash": "0x3c870225bb0562b56df93f1bb699ce85354316d594869599a18c06739f20f4bb",
        "address": "0x074936eFFc0CC47fB1A22c8D4b4e68Ce2018B7b0",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d28e3542856f157f979111435dafcc37f419d0c2"
        ],
        "data": "0x",
        "logIndex": 21,
        "blockHash": "0x141bcc4f34938f97eed3ab76ea2a25d16a27ddce6cae41036544e0ac52e4e867"
      },
      {
        "transactionIndex": 10,
        "blockNumber": 26047933,
        "transactionHash": "0x3c870225bb0562b56df93f1bb699ce85354316d594869599a18c06739f20f4bb",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000d28e3542856f157f979111435dafcc37f419d0c2",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x000000000000000000000000000000000000000000000000001565627167777600000000000000000000000000000000000000000000000009522becb026af6700000000000000000000000000000000000000000000126f9e3c2c4fd0394dc1000000000000000000000000000000000000000000000000093cc68a3ebf37f100000000000000000000000000000000000000000000126f9e5191b241a0c537",
        "logIndex": 22,
        "blockHash": "0x141bcc4f34938f97eed3ab76ea2a25d16a27ddce6cae41036544e0ac52e4e867"
      }
    ],
    "blockNumber": 26047933,
    "cumulativeGasUsed": "2477648",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "8aa079dc372efa4fb72dddab2b66ad11",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_lockupContractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_unlockTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_deployer\",\"type\":\"address\"}],\"name\":\"LockupContractDeployedThroughFactory\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_myoTokenAddress\",\"type\":\"address\"}],\"name\":\"MYOTokenAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SECONDS_IN_ONE_YEAR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_unlockTime\",\"type\":\"uint256\"}],\"name\":\"deployLockupContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"isRegisteredLockup\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockupContractToDeployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"myoTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_myoTokenAddress\",\"type\":\"address\"}],\"name\":\"setMYOTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MYO/LockupContractFactory.sol\":\"LockupContractFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/MYO/LockupContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"../interfaces/IMYOToken.sol\\\";\\n\\n/*\\n* The lockup contract architecture utilizes a single LockupContract, with an unlockTime. The unlockTime is passed as an argument \\n* to the LockupContract's constructor. The contract's balance can be withdrawn by the beneficiary when block.timestamp > unlockTime. \\n* At construction, the contract checks that unlockTime is at least one year later than the Liquity system's deployment time. \\n\\n* Within the first year from deployment, the deployer of the MYOToken may transfer MYO only to valid \\n* LockupContracts, and no other addresses (this is enforced in MYOToken.sol's transfer() function).\\n* \\n* The above two restrictions ensure that until one year after system deployment, MYO tokens originating from MYO.Finance cannot \\n* enter circulating supply and cannot be staked to earn system revenue.\\n*/\\n\\ncontract LockupContract {\\n\\tusing SafeMath for uint256;\\n\\n\\t// --- Data ---\\n\\tstring public constant NAME = \\\"LockupContract\\\";\\n\\n\\tuint256 public constant SECONDS_IN_ONE_YEAR = 31536000;\\n\\n\\taddress public immutable beneficiary;\\n\\n\\tIMYOToken public myoToken;\\n\\n\\t// Unlock time is the Unix point in time at which the beneficiary can withdraw.\\n\\tuint256 public unlockTime;\\n\\n\\t// --- Events ---\\n\\n\\tevent LockupContractCreated(address _beneficiary, uint256 _unlockTime);\\n\\tevent LockupContractEmptied(uint256 _MYOwithdrawal);\\n\\n\\t// --- Functions ---\\n\\n\\tconstructor(\\n\\t\\taddress _myoTokenAddress,\\n\\t\\taddress _beneficiary,\\n\\t\\tuint256 _unlockTime\\n\\t) {\\n\\t\\tmyoToken = IMYOToken(_myoTokenAddress);\\n\\n\\t\\t/*\\n\\t\\t * Set the unlock time to a chosen instant in the future, as long as it is at least 1 year after\\n\\t\\t * the system was deployed\\n\\t\\t */\\n\\n\\t\\t// TODO: Re-enable for mainnet\\n\\t\\t// _requireUnlockTimeIsAtLeastOneYearAfterSystemDeployment(_unlockTime);\\n\\t\\tunlockTime = _unlockTime;\\n\\n\\t\\tbeneficiary = _beneficiary;\\n\\t\\temit LockupContractCreated(_beneficiary, _unlockTime);\\n\\t}\\n\\n\\tfunction withdrawMYO() external {\\n\\t\\t_requireCallerIsBeneficiary();\\n\\t\\t_requireLockupDurationHasPassed();\\n\\n\\t\\tIMYOToken myoTokenCached = myoToken;\\n\\t\\tuint256 MYOBalance = myoTokenCached.balanceOf(address(this));\\n\\t\\tmyoTokenCached.transfer(beneficiary, MYOBalance);\\n\\t\\temit LockupContractEmptied(MYOBalance);\\n\\t}\\n\\n\\t// --- 'require' functions ---\\n\\n\\tfunction _requireCallerIsBeneficiary() internal view {\\n\\t\\trequire(msg.sender == beneficiary, \\\"LockupContract: caller is not the beneficiary\\\");\\n\\t}\\n\\n\\tfunction _requireLockupDurationHasPassed() internal view {\\n\\t\\trequire(\\n\\t\\t\\tblock.timestamp >= unlockTime,\\n\\t\\t\\t\\\"LockupContract: The lockup duration must have passed\\\"\\n\\t\\t);\\n\\t}\\n\\n\\tfunction _requireUnlockTimeIsAtLeastOneYearAfterSystemDeployment(uint256 _unlockTime)\\n\\t\\tinternal\\n\\t\\tview\\n\\t{\\n\\t\\tuint256 systemDeploymentTime = myoToken.getDeploymentStartTime();\\n\\t\\trequire(\\n\\t\\t\\t_unlockTime >= systemDeploymentTime.add(SECONDS_IN_ONE_YEAR),\\n\\t\\t\\t\\\"LockupContract: unlock time must be at least one year after system deployment\\\"\\n\\t\\t);\\n\\t}\\n}\\n\",\"keccak256\":\"0xed3fb1c2f5afdc24dd5c9cb4bfdcec66c51a9791cf4cd95836eaaf870f1a3691\",\"license\":\"MIT\"},\"contracts/MYO/LockupContractFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"../dependencies/CheckContract.sol\\\";\\nimport \\\"../interfaces/ILockupContractFactory.sol\\\";\\nimport \\\"./LockupContract.sol\\\";\\n\\n/*\\n * The LockupContractFactory deploys LockupContracts - its main purpose is to keep a registry of valid deployed\\n * LockupContracts.\\n *\\n * This registry is checked by MYOToken when the Liquity deployer attempts to transfer MYO tokens. During the first year\\n * since system deployment, the Liquity deployer is only allowed to transfer MYO to valid LockupContracts that have been\\n * deployed by and recorded in the LockupContractFactory. This ensures the deployer's MYO can't be traded or staked in the\\n * first year, and can only be sent to a verified LockupContract which unlocks at least one year after system deployment.\\n *\\n * LockupContracts can of course be deployed directly, but only those deployed through and recorded in the LockupContractFactory\\n * will be considered \\\"valid\\\" by MYOToken. This is a convenient way to verify that the target address is a genuine\\n * LockupContract.\\n */\\n\\ncontract LockupContractFactory is ILockupContractFactory, Ownable, CheckContract {\\n\\tusing SafeMath for uint256;\\n\\n\\t// --- Data ---\\n\\tstring public constant NAME = \\\"LockupContractFactory\\\";\\n\\n\\tuint256 public constant SECONDS_IN_ONE_YEAR = 31536000;\\n\\n\\taddress public myoTokenAddress;\\n\\n\\tmapping(address => address) public lockupContractToDeployer;\\n\\n\\t// --- Functions ---\\n\\n\\tfunction setMYOTokenAddress(address _myoTokenAddress) external override onlyOwner {\\n\\t\\tcheckContract(_myoTokenAddress);\\n\\n\\t\\tmyoTokenAddress = _myoTokenAddress;\\n\\t\\temit MYOTokenAddressSet(_myoTokenAddress);\\n\\n\\t\\trenounceOwnership();\\n\\t}\\n\\n\\tfunction deployLockupContract(address _beneficiary, uint256 _unlockTime) external override {\\n\\t\\taddress myoTokenAddressCached = myoTokenAddress;\\n\\t\\t_requireMYOAddressIsSet(myoTokenAddressCached);\\n\\t\\tLockupContract lockupContract = new LockupContract(myoTokenAddressCached, _beneficiary, _unlockTime);\\n\\n\\t\\tlockupContractToDeployer[address(lockupContract)] = msg.sender;\\n\\t\\temit LockupContractDeployedThroughFactory(address(lockupContract), _beneficiary, _unlockTime, msg.sender);\\n\\t}\\n\\n\\tfunction isRegisteredLockup(address _contractAddress) public view override returns (bool) {\\n\\t\\treturn lockupContractToDeployer[_contractAddress] != address(0);\\n\\t}\\n\\n\\t// --- 'require'  functions ---\\n\\tfunction _requireMYOAddressIsSet(address _myoTokenAddress) internal pure {\\n\\t\\trequire(_myoTokenAddress != address(0), \\\"LCF: MYO Address is not set\\\");\\n\\t}\\n}\\n\",\"keccak256\":\"0xf83d492b8c43e1bb9bbbeae945669163f9947ff0de0e9294bc801ac3c0c3af12\",\"license\":\"MIT\"},\"contracts/dependencies/CheckContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\ncontract CheckContract {\\n\\t/**\\n\\t * Check that the account is an already deployed non-destroyed contract.\\n\\t * See: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol#L12\\n\\t */\\n\\tfunction checkContract(address _account) internal view {\\n\\t\\trequire(_account != address(0), \\\"Account cannot be zero address\\\");\\n\\n\\t\\tuint256 size;\\n\\t\\t// solhint-disable-next-line no-inline-assembly\\n\\t\\tassembly {\\n\\t\\t\\tsize := extcodesize(_account)\\n\\t\\t}\\n\\t\\trequire(size > 0, \\\"Account code size cannot be zero\\\");\\n\\t}\\n}\\n\",\"keccak256\":\"0xb5cb7705e2af49e9ad0be340e8fd106a5bf928fd834ae7e4d22d8c6db17e7844\",\"license\":\"MIT\"},\"contracts/interfaces/ILockupContractFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface ILockupContractFactory {\\n\\t// --- Events ---\\n\\n\\tevent MYOTokenAddressSet(address _myoTokenAddress);\\n\\tevent LockupContractDeployedThroughFactory(\\n\\t\\taddress _lockupContractAddress,\\n\\t\\taddress _beneficiary,\\n\\t\\tuint256 _unlockTime,\\n\\t\\taddress _deployer\\n\\t);\\n\\n\\t// --- Functions ---\\n\\n\\tfunction setMYOTokenAddress(address _myoTokenAddress) external;\\n\\n\\tfunction deployLockupContract(address _beneficiary, uint256 _unlockTime) external;\\n\\n\\tfunction isRegisteredLockup(address _addr) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xaa55e7aea2992149acc1f484dc413500ab83e5acfade098de931442d34542d0e\",\"license\":\"MIT\"},\"contracts/interfaces/IMYOToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IMYOToken is IERC20, IERC20Permit, IERC20Metadata {\\n\\t// --- Events ---\\n\\n\\tevent CommunityIssuanceAddressSet(address _communityIssuanceAddress);\\n\\tevent MYOStakingAddressSet(address _myoStakingAddress);\\n\\tevent LockupContractFactoryAddressSet(address _lockupContractFactoryAddress);\\n\\n\\t// --- Functions ---\\n\\n\\tfunction sendToMYOStaking(address _sender, uint256 _amount) external;\\n\\n\\tfunction getDeploymentStartTime() external view returns (uint256);\\n\\n\\tfunction getLpRewardsEntitlement() external view returns (uint256);\\n\\n\\tfunction increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\n\\n\\tfunction decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\n\\n\\tfunction permitTypeHash() external view returns (bytes32);\\n\\n\\tfunction version() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6f53194956e4c49c701a27fab9e30b67df4fb7ae10b8b1110ffc51f983cc0ac2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610c398061007e6000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c806398e5f3c41161006657806398e5f3c414610114578063a3f4df7e1461012d578063bb7603f11461016e578063d83c72db14610191578063f2fde38b146101ba5761009e565b806334c44b4d146100a35780635cec69d4146100b8578063715018a6146100cb5780637c208439146100d35780638da5cb5b14610103575b600080fd5b6100b66100b13660046105ca565b6101cd565b005b6100b66100c63660046105a9565b6102ad565b6100b6610345565b6001546100e6906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6000546001600160a01b03166100e6565b61011f6301e1338081565b6040519081526020016100fa565b610161604051806040016040528060158152602001744c6f636b7570436f6e7472616374466163746f727960581b81525081565b6040516100fa91906105f3565b61018161017c3660046105a9565b61037b565b60405190151581526020016100fa565b6100e661019f3660046105a9565b6002602052600090815260409020546001600160a01b031681565b6100b66101c83660046105a9565b61039e565b6001546001600160a01b03166101e281610436565b60008184846040516101f390610585565b6001600160a01b0393841681529290911660208301526040820152606001604051809103906000f08015801561022d573d6000803e3d6000fd5b506001600160a01b0381811660008181526002602090815260409182902080546001600160a01b03191633908117909155825193845293891690830152810186905260608101919091529091507ff534ff9ac4abb71a4aa2f8715f3a8f41c05155fbf8af61daecc51365e3a5c0089060800160405180910390a150505050565b6000546001600160a01b031633146102e05760405162461bcd60e51b81526004016102d790610646565b60405180910390fd5b6102e98161048c565b600180546001600160a01b0319166001600160a01b0383169081179091556040519081527f33f77e2a6c541a8f668ac27735e35a31d6b55c1a19f3ce738c2958b618c92ce09060200160405180910390a1610342610345565b50565b6000546001600160a01b0316331461036f5760405162461bcd60e51b81526004016102d790610646565b6103796000610535565b565b6001600160a01b038181166000908152600260205260409020541615155b919050565b6000546001600160a01b031633146103c85760405162461bcd60e51b81526004016102d790610646565b6001600160a01b03811661042d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102d7565b61034281610535565b6001600160a01b0381166103425760405162461bcd60e51b815260206004820152601b60248201527f4c43463a204d594f2041646472657373206973206e6f7420736574000000000060448201526064016102d7565b6001600160a01b0381166104e25760405162461bcd60e51b815260206004820152601e60248201527f4163636f756e742063616e6e6f74206265207a65726f2061646472657373000060448201526064016102d7565b803b806105315760405162461bcd60e51b815260206004820181905260248201527f4163636f756e7420636f64652073697a652063616e6e6f74206265207a65726f60448201526064016102d7565b5050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6105888061067c83390190565b80356001600160a01b038116811461039957600080fd5b6000602082840312156105ba578081fd5b6105c382610592565b9392505050565b600080604083850312156105dc578081fd5b6105e583610592565b946020939093013593505050565b6000602080835283518082850152825b8181101561061f57858101830151858201604001528201610603565b818111156106305783604083870101525b50601f01601f1916929092016040019392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260408201526060019056fe60a060405234801561001057600080fd5b5060405161058838038061058883398101604081905261002f916100c5565b600080546001600160a01b0319166001600160a01b03858116919091179091556001829055606083901b6001600160601b031916608052604080519184168252602082018390527f5faee922186516bf77266643c1fda130acefc439d571400e8697106c6aed9b54910160405180910390a1505050610100565b80516001600160a01b03811681146100c057600080fd5b919050565b6000806000606084860312156100d9578283fd5b6100e2846100a9565b92506100f0602085016100a9565b9150604084015190509250925092565b60805160601c61045d61012b600039600081816088015281816101ca015261029c015261045d6000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063251c1aa31461006757806338af3eed146100835780635fe2fc31146100c257806398e5f3c4146100cc578063a3f4df7e146100d7578063fff298df14610111575b600080fd5b61007060015481565b6040519081526020015b60405180910390f35b6100aa7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161007a565b6100ca610124565b005b6100706301e1338081565b6101046040518060400160405280600e81526020016d131bd8dadd5c10dbdb9d1c9858dd60921b81525081565b60405161007a91906103d4565b6000546100aa906001600160a01b031681565b61012c610291565b610134610326565b600080546040516370a0823160e01b81523060048201526001600160a01b03909116919082906370a082319060240160206040518083038186803b15801561017b57600080fd5b505afa15801561018f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101b391906103bc565b60405163a9059cbb60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018390529192509083169063a9059cbb90604401602060405180830381600087803b15801561022157600080fd5b505af1158015610235573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102599190610395565b506040518181527f7d17cbc0f78ccfed33842dd29dab2872e8347bf3981293ab2cfe35ca16371a2f9060200160405180910390a15050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146103245760405162461bcd60e51b815260206004820152602d60248201527f4c6f636b7570436f6e74726163743a2063616c6c6572206973206e6f7420746860448201526c652062656e656669636961727960981b60648201526084015b60405180910390fd5b565b6001544210156103245760405162461bcd60e51b815260206004820152603460248201527f4c6f636b7570436f6e74726163743a20546865206c6f636b75702064757261746044820152731a5bdb881b5d5cdd081a185d99481c185cdcd95960621b606482015260840161031b565b6000602082840312156103a6578081fd5b815180151581146103b5578182fd5b9392505050565b6000602082840312156103cd578081fd5b5051919050565b6000602080835283518082850152825b81811015610400578581018301518582016040015282016103e4565b818111156104115783604083870101525b50601f01601f191692909201604001939250505056fea2646970667358221220b7c554fe2494493c605568e7036b4acbc44b53b7b3c40d3eae3cc77283a838bc64736f6c63430008030033a2646970667358221220166ea94ce5413ce82a98e1087bb70c287214478bf070b15ba648769f54883e8264736f6c63430008030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c806398e5f3c41161006657806398e5f3c414610114578063a3f4df7e1461012d578063bb7603f11461016e578063d83c72db14610191578063f2fde38b146101ba5761009e565b806334c44b4d146100a35780635cec69d4146100b8578063715018a6146100cb5780637c208439146100d35780638da5cb5b14610103575b600080fd5b6100b66100b13660046105ca565b6101cd565b005b6100b66100c63660046105a9565b6102ad565b6100b6610345565b6001546100e6906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6000546001600160a01b03166100e6565b61011f6301e1338081565b6040519081526020016100fa565b610161604051806040016040528060158152602001744c6f636b7570436f6e7472616374466163746f727960581b81525081565b6040516100fa91906105f3565b61018161017c3660046105a9565b61037b565b60405190151581526020016100fa565b6100e661019f3660046105a9565b6002602052600090815260409020546001600160a01b031681565b6100b66101c83660046105a9565b61039e565b6001546001600160a01b03166101e281610436565b60008184846040516101f390610585565b6001600160a01b0393841681529290911660208301526040820152606001604051809103906000f08015801561022d573d6000803e3d6000fd5b506001600160a01b0381811660008181526002602090815260409182902080546001600160a01b03191633908117909155825193845293891690830152810186905260608101919091529091507ff534ff9ac4abb71a4aa2f8715f3a8f41c05155fbf8af61daecc51365e3a5c0089060800160405180910390a150505050565b6000546001600160a01b031633146102e05760405162461bcd60e51b81526004016102d790610646565b60405180910390fd5b6102e98161048c565b600180546001600160a01b0319166001600160a01b0383169081179091556040519081527f33f77e2a6c541a8f668ac27735e35a31d6b55c1a19f3ce738c2958b618c92ce09060200160405180910390a1610342610345565b50565b6000546001600160a01b0316331461036f5760405162461bcd60e51b81526004016102d790610646565b6103796000610535565b565b6001600160a01b038181166000908152600260205260409020541615155b919050565b6000546001600160a01b031633146103c85760405162461bcd60e51b81526004016102d790610646565b6001600160a01b03811661042d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102d7565b61034281610535565b6001600160a01b0381166103425760405162461bcd60e51b815260206004820152601b60248201527f4c43463a204d594f2041646472657373206973206e6f7420736574000000000060448201526064016102d7565b6001600160a01b0381166104e25760405162461bcd60e51b815260206004820152601e60248201527f4163636f756e742063616e6e6f74206265207a65726f2061646472657373000060448201526064016102d7565b803b806105315760405162461bcd60e51b815260206004820181905260248201527f4163636f756e7420636f64652073697a652063616e6e6f74206265207a65726f60448201526064016102d7565b5050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6105888061067c83390190565b80356001600160a01b038116811461039957600080fd5b6000602082840312156105ba578081fd5b6105c382610592565b9392505050565b600080604083850312156105dc578081fd5b6105e583610592565b946020939093013593505050565b6000602080835283518082850152825b8181101561061f57858101830151858201604001528201610603565b818111156106305783604083870101525b50601f01601f1916929092016040019392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260408201526060019056fe60a060405234801561001057600080fd5b5060405161058838038061058883398101604081905261002f916100c5565b600080546001600160a01b0319166001600160a01b03858116919091179091556001829055606083901b6001600160601b031916608052604080519184168252602082018390527f5faee922186516bf77266643c1fda130acefc439d571400e8697106c6aed9b54910160405180910390a1505050610100565b80516001600160a01b03811681146100c057600080fd5b919050565b6000806000606084860312156100d9578283fd5b6100e2846100a9565b92506100f0602085016100a9565b9150604084015190509250925092565b60805160601c61045d61012b600039600081816088015281816101ca015261029c015261045d6000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063251c1aa31461006757806338af3eed146100835780635fe2fc31146100c257806398e5f3c4146100cc578063a3f4df7e146100d7578063fff298df14610111575b600080fd5b61007060015481565b6040519081526020015b60405180910390f35b6100aa7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161007a565b6100ca610124565b005b6100706301e1338081565b6101046040518060400160405280600e81526020016d131bd8dadd5c10dbdb9d1c9858dd60921b81525081565b60405161007a91906103d4565b6000546100aa906001600160a01b031681565b61012c610291565b610134610326565b600080546040516370a0823160e01b81523060048201526001600160a01b03909116919082906370a082319060240160206040518083038186803b15801561017b57600080fd5b505afa15801561018f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101b391906103bc565b60405163a9059cbb60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018390529192509083169063a9059cbb90604401602060405180830381600087803b15801561022157600080fd5b505af1158015610235573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102599190610395565b506040518181527f7d17cbc0f78ccfed33842dd29dab2872e8347bf3981293ab2cfe35ca16371a2f9060200160405180910390a15050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146103245760405162461bcd60e51b815260206004820152602d60248201527f4c6f636b7570436f6e74726163743a2063616c6c6572206973206e6f7420746860448201526c652062656e656669636961727960981b60648201526084015b60405180910390fd5b565b6001544210156103245760405162461bcd60e51b815260206004820152603460248201527f4c6f636b7570436f6e74726163743a20546865206c6f636b75702064757261746044820152731a5bdb881b5d5cdd081a185d99481c185cdcd95960621b606482015260840161031b565b6000602082840312156103a6578081fd5b815180151581146103b5578182fd5b9392505050565b6000602082840312156103cd578081fd5b5051919050565b6000602080835283518082850152825b81811015610400578581018301518582016040015282016103e4565b818111156104115783604083870101525b50601f01601f191692909201604001939250505056fea2646970667358221220b7c554fe2494493c605568e7036b4acbc44b53b7b3c40d3eae3cc77283a838bc64736f6c63430008030033a2646970667358221220166ea94ce5413ce82a98e1087bb70c287214478bf070b15ba648769f54883e8264736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 53,
        "contract": "contracts/MYO/LockupContractFactory.sol:LockupContractFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2700,
        "contract": "contracts/MYO/LockupContractFactory.sol:LockupContractFactory",
        "label": "myoTokenAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2704,
        "contract": "contracts/MYO/LockupContractFactory.sol:LockupContractFactory",
        "label": "lockupContractToDeployer",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      }
    }
  }
}
