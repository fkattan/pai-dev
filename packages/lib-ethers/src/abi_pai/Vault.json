{
  "address": "0x894A3A191C5ae1498b873a5260A800fBe1D37610",
  "contractName": "Vault",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_core",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_baseRate",
          "type": "uint256"
        }
      ],
      "name": "BaseRateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_L_Coll",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_L_Debt",
          "type": "uint256"
        }
      ],
      "name": "LTermsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_lastFeeOpTime",
          "type": "uint256"
        }
      ],
      "name": "LastFeeOpTimeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_liquidatedDebt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_liquidatedColl",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_gasCompensation",
          "type": "uint256"
        }
      ],
      "name": "Liquidation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_attemptedPAIAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_actualPAIAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_collSent",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_collFee",
          "type": "uint256"
        }
      ],
      "name": "Redemption",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_totalStakesSnapshot",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_totalCollateralSnapshot",
          "type": "uint256"
        }
      ],
      "name": "SystemSnapshotsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newTotalStakes",
          "type": "uint256"
        }
      ],
      "name": "TotalStakesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newIndex",
          "type": "uint256"
        }
      ],
      "name": "TroveIndexUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_debt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_coll",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "operation",
          "type": "uint8"
        }
      ],
      "name": "TroveLiquidated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_L_Coll",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_L_Debt",
          "type": "uint256"
        }
      ],
      "name": "TroveSnapshotsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_debt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_coll",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_borrowingFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_stake",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum IBase.TroveOperation",
          "name": "_operation",
          "type": "uint8"
        }
      ],
      "name": "TroveUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BETA",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BOOTSTRAP_PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BORROWING_FEE_FLOOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CCR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DAI_GAS_COMPENSATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DECIMAL_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "HALF_PERCENT_DIVISOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "L_Coll",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "L_Debt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_BORROWING_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_UINT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MCR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINUTE_DECAY_FACTOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_NET_DEBT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REDEMPTION_FEE_FLOOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SECONDS_IN_ONE_MINUTE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "TroveOwners",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "Troves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "debt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "coll",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stake",
          "type": "uint256"
        },
        {
          "internalType": "enum IBase.TroveStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "uint128",
          "name": "arrayIndex",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "activePool",
      "outputs": [
        {
          "internalType": "contract IActivePool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "addTroveOwnerToArray",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "applyPendingRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_troveArray",
          "type": "address[]"
        }
      ],
      "name": "batchLiquidateTroves",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowerOperations",
      "outputs": [
        {
          "internalType": "contract IBorrowerOperations",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "closeTrove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collSurplusPool",
      "outputs": [
        {
          "internalType": "contract ICollSurplusPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "core",
      "outputs": [
        {
          "internalType": "contract ICore",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decayBaseRateFromBorrowing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_collDecrease",
          "type": "uint256"
        }
      ],
      "name": "decreaseTroveColl",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_debtDecrease",
          "type": "uint256"
        }
      ],
      "name": "decreaseTroveDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultPool",
      "outputs": [
        {
          "internalType": "contract IDefaultPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gemToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_debt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "getBorrowingFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_debt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "getBorrowingFeeWithDecay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBorrowingRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBorrowingRateWithDecay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "getCurrentICR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "getEntireDebtAndColl",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "debt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "coll",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pendingDebtReward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pendingCollReward",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntireSystemColl",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "entireSystemColl",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntireSystemDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "entireSystemDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "getNominalICR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "getPendingCollReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "getPendingDebtReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_collDrawn",
          "type": "uint256"
        }
      ],
      "name": "getRedemptionFeeWithDecay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRedemptionRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRedemptionRateWithDecay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "getTCR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "getTroveColl",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "getTroveDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getTroveFromTroveOwnersArray",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTroveOwnersCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "getTroveStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "getTroveStatus",
      "outputs": [
        {
          "internalType": "enum IBase.TroveStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "hasPendingRewards",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_collIncrease",
          "type": "uint256"
        }
      ],
      "name": "increaseTroveColl",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_debtIncrease",
          "type": "uint256"
        }
      ],
      "name": "increaseTroveDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastCollError_Redistribution",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastDebtError_Redistribution",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastFeeOperationTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "liquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_n",
          "type": "uint256"
        }
      ],
      "name": "liquidateTroves",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "myoStaking",
      "outputs": [
        {
          "internalType": "contract IMYOStaking",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "myoToken",
      "outputs": [
        {
          "internalType": "contract IMYOToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paiToken",
      "outputs": [
        {
          "internalType": "contract IPAIToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "contract IPriceFeed",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_paiAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_firstRedemptionHint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_upperPartialRedemptionHint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lowerPartialRedemptionHint",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_partialRedemptionHintNICR",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxIterations",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxFeePercentage",
          "type": "uint256"
        }
      ],
      "name": "redeemCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "removeStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewardSnapshots",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "coll",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "debt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_num",
          "type": "uint256"
        }
      ],
      "name": "setTroveStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sortedTroves",
      "outputs": [
        {
          "internalType": "contract ISortedTroves",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalCollateralSnapshot",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStakes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStakesSnapshot",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "updateStakeAndTotalStakes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "updateTroveRewardSnapshots",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "contract IVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x16087477175570aa33dea0f4e9241a39e88757639cc2505af029e09cfff46565",
  "receipt": {
    "to": null,
    "from": "0xd28e3542856F157f979111435DaFCC37f419d0c2",
    "contractAddress": "0x894A3A191C5ae1498b873a5260A800fBe1D37610",
    "transactionIndex": 4,
    "gasUsed": "4292835",
    "logsBloom": "0x
    "blockHash": "0x9a31d671b194aeb1939b101eb7f92ccfbf1dbff00bb892c077add0aa2a521eae",
    "transactionHash": "0x16087477175570aa33dea0f4e9241a39e88757639cc2505af029e09cfff46565",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 26047913,
        "transactionHash": "0x16087477175570aa33dea0f4e9241a39e88757639cc2505af029e09cfff46565",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000d28e3542856f157f979111435dafcc37f419d0c2",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x000000000000000000000000000000000000000000000000007a027c483e69cb0000000000000000000000000000000000000000000000000afbc180b0c36f6700000000000000000000000000000000000000000000126f8f3a9fc5e424c87b0000000000000000000000000000000000000000000000000a81bf046885059c00000000000000000000000000000000000000000000126f8fb4a2422c633246",
        "logIndex": 8,
        "blockHash": "0x9a31d671b194aeb1939b101eb7f92ccfbf1dbff00bb892c077add0aa2a521eae"
      }
    ],
    "blockNumber": 26047913,
    "cumulativeGasUsed": "4929503",
    "status": 1,
    "byzantium": true
  },
  "args": ["0x37F6DFa518E3708727E7eD3CbF5cA3641412890e"],
  "numDeployments": 2,
  "solcInputHash": "8aa079dc372efa4fb72dddab2b66ad11",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_core\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_baseRate\",\"type\":\"uint256\"}],\"name\":\"BaseRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_L_Coll\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_L_Debt\",\"type\":\"uint256\"}],\"name\":\"LTermsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_lastFeeOpTime\",\"type\":\"uint256\"}],\"name\":\"LastFeeOpTimeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_liquidatedDebt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_liquidatedColl\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_gasCompensation\",\"type\":\"uint256\"}],\"name\":\"Liquidation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_attemptedPAIAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_actualPAIAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_collSent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_collFee\",\"type\":\"uint256\"}],\"name\":\"Redemption\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalStakesSnapshot\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalCollateralSnapshot\",\"type\":\"uint256\"}],\"name\":\"SystemSnapshotsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newTotalStakes\",\"type\":\"uint256\"}],\"name\":\"TotalStakesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newIndex\",\"type\":\"uint256\"}],\"name\":\"TroveIndexUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_debt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_coll\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"operation\",\"type\":\"uint8\"}],\"name\":\"TroveLiquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_L_Coll\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_L_Debt\",\"type\":\"uint256\"}],\"name\":\"TroveSnapshotsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_debt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_coll\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_borrowingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_stake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum IBase.TroveOperation\",\"name\":\"_operation\",\"type\":\"uint8\"}],\"name\":\"TroveUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BETA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BOOTSTRAP_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BORROWING_FEE_FLOOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CCR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAI_GAS_COMPENSATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DECIMAL_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HALF_PERCENT_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"L_Coll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"L_Debt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BORROWING_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_UINT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MCR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINUTE_DECAY_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_NET_DEBT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REDEMPTION_FEE_FLOOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SECONDS_IN_ONE_MINUTE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"TroveOwners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Troves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"coll\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"enum IBase.TroveStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"arrayIndex\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activePool\",\"outputs\":[{\"internalType\":\"contract IActivePool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"addTroveOwnerToArray\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"applyPendingRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_troveArray\",\"type\":\"address[]\"}],\"name\":\"batchLiquidateTroves\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowerOperations\",\"outputs\":[{\"internalType\":\"contract IBorrowerOperations\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"closeTrove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collSurplusPool\",\"outputs\":[{\"internalType\":\"contract ICollSurplusPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"core\",\"outputs\":[{\"internalType\":\"contract ICore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decayBaseRateFromBorrowing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_collDecrease\",\"type\":\"uint256\"}],\"name\":\"decreaseTroveColl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_debtDecrease\",\"type\":\"uint256\"}],\"name\":\"decreaseTroveDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultPool\",\"outputs\":[{\"internalType\":\"contract IDefaultPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gemToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"getBorrowingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"getBorrowingFeeWithDecay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBorrowingRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBorrowingRateWithDecay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"getCurrentICR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getEntireDebtAndColl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"coll\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingDebtReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingCollReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntireSystemColl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"entireSystemColl\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntireSystemDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"entireSystemDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getNominalICR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getPendingCollReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getPendingDebtReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_collDrawn\",\"type\":\"uint256\"}],\"name\":\"getRedemptionFeeWithDecay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRedemptionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRedemptionRateWithDecay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"getTCR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getTroveColl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getTroveDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getTroveFromTroveOwnersArray\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTroveOwnersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getTroveStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getTroveStatus\",\"outputs\":[{\"internalType\":\"enum IBase.TroveStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"hasPendingRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_collIncrease\",\"type\":\"uint256\"}],\"name\":\"increaseTroveColl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_debtIncrease\",\"type\":\"uint256\"}],\"name\":\"increaseTroveDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastCollError_Redistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastDebtError_Redistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastFeeOperationTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_n\",\"type\":\"uint256\"}],\"name\":\"liquidateTroves\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"myoStaking\",\"outputs\":[{\"internalType\":\"contract IMYOStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"myoToken\",\"outputs\":[{\"internalType\":\"contract IMYOToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paiToken\",\"outputs\":[{\"internalType\":\"contract IPAIToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract IPriceFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_paiAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_firstRedemptionHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_upperPartialRedemptionHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lowerPartialRedemptionHint\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_partialRedemptionHintNICR\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxIterations\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxFeePercentage\",\"type\":\"uint256\"}],\"name\":\"redeemCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"removeStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardSnapshots\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"coll\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_num\",\"type\":\"uint256\"}],\"name\":\"setTroveStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sortedTroves\",\"outputs\":[{\"internalType\":\"contract ISortedTroves\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCollateralSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakesSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"updateStakeAndTotalStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"updateTroveRewardSnapshots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/Vault.sol\":\"Vault\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/core/CoreRef.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"../dependencies/CheckContract.sol\\\";\\nimport \\\"../dependencies/Constants.sol\\\";\\nimport \\\"../dependencies/BaseMath.sol\\\";\\n\\nimport \\\"../interfaces/ICore.sol\\\";\\n\\nimport \\\"../interfaces/IMYOStaking.sol\\\";\\nimport \\\"../interfaces/IMYOToken.sol\\\";\\nimport \\\"../interfaces/IPAIToken.sol\\\";\\n\\nimport \\\"../interfaces/IPriceFeed.sol\\\";\\nimport \\\"../interfaces/IDefaultPool.sol\\\";\\nimport \\\"../interfaces/IActivePool.sol\\\";\\nimport \\\"../interfaces/IBorrowerOperations.sol\\\";\\n\\ncontract CoreRef is CheckContract, Constants, IBase {\\n\\tusing SafeMath for uint256;\\n\\n\\tICore public immutable core;\\n\\n\\tconstructor(address _core) {\\n\\t\\tcheckContract(_core);\\n\\t\\tcore = ICore(_core);\\n\\t}\\n\\n\\t// function setAddresses(\\n\\t//     address _core\\n\\t// )\\n\\t//     external\\n\\t//     onlyOwner\\n\\t// {\\n\\t//     checkContract(_core);\\n\\t//     core = ICore(_core);\\n\\t//     renounceOwnership();\\n\\t// }\\n\\n\\tmodifier onlyVault() {\\n\\t\\trequire(msg.sender == address(core.vault()), \\\"CoreRef: Caller must be Vault\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier onlyBO() {\\n\\t\\trequire(\\n\\t\\t\\tmsg.sender == address(core.borrowerOperations()),\\n\\t\\t\\t\\\"CoreRef: Caller must be BorrowerOperations\\\"\\n\\t\\t);\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier onlyActivePool() {\\n\\t\\trequire(msg.sender == address(core.activePool()), \\\"CoreRef: Caller must be ActivePool\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t// Getters\\n\\n\\tfunction gemToken() public view returns (IERC20) {\\n\\t\\treturn core.gemToken();\\n\\t}\\n\\n\\tfunction paiToken() public view returns (IPAIToken) {\\n\\t\\treturn core.paiToken();\\n\\t}\\n\\n\\tfunction myoToken() public view returns (IMYOToken) {\\n\\t\\treturn core.myoToken();\\n\\t}\\n\\n\\tfunction sortedTroves() public view returns (ISortedTroves) {\\n\\t\\treturn core.sortedTroves();\\n\\t}\\n\\n\\tfunction vault() public view returns (IVault) {\\n\\t\\treturn core.vault();\\n\\t}\\n\\n\\tfunction myoStaking() public view returns (IMYOStaking) {\\n\\t\\treturn core.myoStaking();\\n\\t}\\n\\n\\tfunction priceFeed() public view returns (IPriceFeed) {\\n\\t\\treturn core.priceFeed();\\n\\t}\\n\\n\\tfunction activePool() public view returns (IActivePool) {\\n\\t\\treturn core.activePool();\\n\\t}\\n\\n\\tfunction defaultPool() public view returns (IDefaultPool) {\\n\\t\\treturn core.defaultPool();\\n\\t}\\n\\n\\tfunction collSurplusPool() public view returns (ICollSurplusPool) {\\n\\t\\treturn core.collSurplusPool();\\n\\t}\\n\\n\\tfunction borrowerOperations() public view returns (IBorrowerOperations) {\\n\\t\\treturn core.borrowerOperations();\\n\\t}\\n\\n\\t// Helper Functions\\n\\n\\tfunction getEntireSystemColl() public view returns (uint256 entireSystemColl) {\\n\\t\\tuint256 activeColl = activePool().getColl();\\n\\t\\tuint256 liquidatedColl = defaultPool().getColl();\\n\\n\\t\\treturn activeColl.add(liquidatedColl);\\n\\t}\\n\\n\\tfunction getEntireSystemDebt() public view returns (uint256 entireSystemDebt) {\\n\\t\\tuint256 activeDebt = activePool().getDebt();\\n\\t\\tuint256 closedDebt = defaultPool().getDebt();\\n\\n\\t\\treturn activeDebt.add(closedDebt);\\n\\t}\\n\\n\\tfunction _getTCR(uint256 _price) internal view returns (uint256 TCR) {\\n\\t\\tuint256 entireSystemColl = getEntireSystemColl();\\n\\t\\tuint256 entireSystemDebt = getEntireSystemDebt();\\n\\n\\t\\tTCR = BaseMath._computeCR(entireSystemColl, entireSystemDebt, _price);\\n\\n\\t\\treturn TCR;\\n\\t}\\n\\n\\tfunction _checkRecoveryMode(uint256 _price) internal view returns (bool) {\\n\\t\\tuint256 TCR = _getTCR(_price);\\n\\n\\t\\treturn TCR < CCR;\\n\\t}\\n\\n\\tfunction _getNetCollateral(uint256 _collateral) internal pure returns (uint256) {\\n\\t\\treturn\\n\\t\\t\\t_collateral.sub(\\n\\t\\t\\t\\tDAI_GAS_COMPENSATION,\\n\\t\\t\\t\\t\\\"Core: Insuficient Net Collateral to cover GAS Comp\\\"\\n\\t\\t\\t);\\n\\t}\\n\\n\\tfunction _getGrossColl(uint256 _debt) internal pure returns (uint256) {\\n\\t\\treturn _debt.add(DAI_GAS_COMPENSATION);\\n\\t}\\n\\n\\tfunction _requireUserAcceptsFee(\\n\\t\\tuint256 _gemFee,\\n\\t\\tuint256 _gemAmount,\\n\\t\\tuint256 _maxFeePercentage\\n\\t) internal pure {\\n\\t\\tuint256 feePercentage = _gemFee.mul(DECIMAL_PRECISION).div(_gemAmount);\\n\\t\\trequire(feePercentage <= _maxFeePercentage, \\\"Fee exceeded provided maximum\\\");\\n\\t}\\n}\\n\",\"keccak256\":\"0xaa9810fc762e1323c91469ddb7f130b266b34929e298a53834fcc9a2977b473b\",\"license\":\"MIT\"},\"contracts/core/Vault.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"../interfaces/IVault.sol\\\";\\nimport \\\"../interfaces/ISortedTroves.sol\\\";\\nimport \\\"../dependencies/BaseMath.sol\\\";\\n\\nimport \\\"./CoreRef.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract Vault is IVault, CoreRef {\\n\\tusing SafeMath for uint256;\\n\\t// Data Structures\\n\\n\\t// Store the necessary data for a trove\\n\\tstruct Trove {\\n\\t\\tuint256 debt;\\n\\t\\tuint256 coll;\\n\\t\\tuint256 stake;\\n\\t\\tTroveStatus status;\\n\\t\\tuint128 arrayIndex;\\n\\t}\\n\\n\\t// State\\n\\tmapping(address => Trove) public Troves;\\n\\n\\t// Map addresses with active troves to their RewardSnapshot\\n\\tmapping(address => RewardSnapshot) public rewardSnapshots;\\n\\n\\t// Object containing the Coll and Debt snapshots for a given active trove\\n\\tstruct RewardSnapshot {\\n\\t\\tuint256 coll;\\n\\t\\tuint256 debt;\\n\\t}\\n\\n\\t// Error trackers for the trove redistribution calculation\\n\\tuint256 public lastCollError_Redistribution;\\n\\tuint256 public lastDebtError_Redistribution;\\n\\n\\t/*\\n\\t * L_Coll and L_Debt track the sums of accumulated liquidation rewards per unit staked. During its lifetime, each stake earns:\\n\\t *\\n\\t * An Coll gain of ( stake * [L_Coll - L_Coll(0)] )\\n\\t * A Debt increase  of ( stake * [L_Debt - L_Debt(0)] )\\n\\t *\\n\\t * Where L_Coll(0) and L_Debt(0) are snapshots of L_Coll and L_Debt for the active Trove taken at the instant the stake was made\\n\\t */\\n\\tuint256 public L_Coll;\\n\\tuint256 public L_Debt;\\n\\n\\tuint256 public totalStakes;\\n\\n\\t// Snapshot of the value of totalStakes, taken immediately after the latest liquidation\\n\\tuint256 public totalStakesSnapshot;\\n\\n\\t// Snapshot of the total collateral across GemJoin and DefaultPool, immediately after the latest liquidation.\\n\\tuint256 public totalCollateralSnapshot;\\n\\n\\t// Array of all active trove addresses - used to to compute an approximate hint off-chain, for the sorted list insertion\\n\\taddress[] public TroveOwners;\\n\\n\\tuint256 public constant REDEMPTION_FEE_FLOOR = (DECIMAL_PRECISION / 1000) * 5; // 0.5%\\n\\n\\t/*\\n\\t * BETA: 18 digit decimal. Parameter by which to divide the redeemed fraction,\\n\\t * in order to calc the new base rate from a redemption. Corresponds to\\n\\t * (1 / ALPHA) in the white paper.\\n\\t */\\n\\tuint256 public constant BETA = 2;\\n\\n\\tuint256 public override baseRate;\\n\\n\\t// The timestamp of the latest fee operation (redemption or new PAI issuance)\\n\\tuint256 public lastFeeOperationTime;\\n\\n\\tuint256 public constant MINUTE_DECAY_FACTOR = 999037758833783000;\\n\\tuint256 public constant MAX_BORROWING_FEE = (DECIMAL_PRECISION / 100) * 5; // 5%\\n\\n\\t// solhint-disable-next-line no-empty-blocks\\n\\tconstructor(address _core) CoreRef(_core) {}\\n\\n\\t// --- Redemption fee functions ---\\n\\n\\t/*\\n\\t * This function has two impacts on the baseRate state variable:\\n\\t * 1) decays the baseRate based on time passed since last redemption or PAI borrowing operation.\\n\\t * then,\\n\\t * 2) increases the baseRate based on the amount redeemed, as a proportion of total supply\\n\\t */\\n\\tfunction _updateBaseRateFromRedemption(\\n\\t\\tuint256 _collDrawn,\\n\\t\\tuint256 _price,\\n\\t\\tuint256 _totalPAISupply\\n\\t) internal returns (uint256) {\\n\\t\\tuint256 decayedBaseRate = _calcDecayedBaseRate();\\n\\n\\t\\t/* Convert the drawn GEM back to PAI at face value rate (1 PAI:1 ARS), in order to get\\n\\t\\t * the fraction of total supply that was redeemed at face value. */\\n\\t\\tuint256 redeemedPAIFraction = _collDrawn.mul(_price).div(_totalPAISupply);\\n\\n\\t\\tuint256 newBaseRate = decayedBaseRate.add(redeemedPAIFraction.div(BETA));\\n\\t\\tnewBaseRate = BaseMath._min(newBaseRate, DECIMAL_PRECISION); // cap baseRate at a maximum of 100%\\n\\t\\tassert(newBaseRate > 0); // Base rate is always non-zero after redemption\\n\\n\\t\\t// Update the baseRate state variable\\n\\t\\tbaseRate = newBaseRate;\\n\\t\\temit BaseRateUpdated(newBaseRate);\\n\\n\\t\\t_updateLastFeeOpTime();\\n\\n\\t\\treturn newBaseRate;\\n\\t}\\n\\n\\tfunction getRedemptionRate() public view override returns (uint256) {\\n\\t\\treturn _calcRedemptionRate(baseRate);\\n\\t}\\n\\n\\tfunction getRedemptionRateWithDecay() public view override returns (uint256) {\\n\\t\\treturn _calcRedemptionRate(_calcDecayedBaseRate());\\n\\t}\\n\\n\\tfunction _calcRedemptionRate(uint256 _baseRate) internal pure returns (uint256) {\\n\\t\\treturn\\n\\t\\t\\tBaseMath._min(\\n\\t\\t\\t\\tREDEMPTION_FEE_FLOOR.add(_baseRate),\\n\\t\\t\\t\\tDECIMAL_PRECISION // cap at a maximum of 100%\\n\\t\\t\\t);\\n\\t}\\n\\n\\tfunction _getRedemptionFee(uint256 _collDrawn) internal view returns (uint256) {\\n\\t\\treturn _calcRedemptionFee(getRedemptionRate(), _collDrawn);\\n\\t}\\n\\n\\tfunction getRedemptionFeeWithDecay(uint256 _collDrawn)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\toverride\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\treturn _calcRedemptionFee(getRedemptionRateWithDecay(), _collDrawn);\\n\\t}\\n\\n\\tfunction _calcRedemptionFee(uint256 _redemptionRate, uint256 _collDrawn)\\n\\t\\tinternal\\n\\t\\tpure\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\tuint256 redemptionFee = _redemptionRate.mul(_collDrawn).div(DECIMAL_PRECISION);\\n\\n\\t\\trequire(redemptionFee < _collDrawn, \\\"Vault: Fee would eat up all returned collateral\\\");\\n\\t\\treturn redemptionFee;\\n\\t}\\n\\n\\t// Borrowing Fee\\n\\t// ------------------------------------------\\n\\n\\tfunction getBorrowingFee(uint256 _debt, uint256 _price) public view override returns (uint256) {\\n\\t\\treturn _calcBorrowingFee(getBorrowingRate(), _debt, _price);\\n\\t}\\n\\n\\tfunction getBorrowingFeeWithDecay(uint256 _debt, uint256 _price)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\toverride\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\treturn _calcBorrowingFee(getBorrowingRateWithDecay(), _debt, _price);\\n\\t}\\n\\n\\tfunction getBorrowingRate() public view override returns (uint256) {\\n\\t\\treturn _calcBorrowingRate(baseRate);\\n\\t}\\n\\n\\tfunction getBorrowingRateWithDecay() public view override returns (uint256) {\\n\\t\\treturn _calcBorrowingRate(_calcDecayedBaseRate());\\n\\t}\\n\\n\\tfunction getTroveOwnersCount() external view override returns (uint256) {\\n\\t\\treturn TroveOwners.length;\\n\\t}\\n\\n\\tfunction getTroveFromTroveOwnersArray(uint256 _index) external view override returns (address) {\\n\\t\\treturn TroveOwners[_index];\\n\\t}\\n\\n\\t// Return the nominal collateral ratio (ICR) of a given Trove, without the price. Takes a trove's pending coll and debt rewards from redistributions into account.\\n\\tfunction getNominalICR(address _borrower) public view override returns (uint256) {\\n\\t\\t(uint256 currentColl, uint256 currentDebt) = _getCurrentTroveAmounts(_borrower);\\n\\n\\t\\tuint256 NICR = BaseMath._computeNominalCR(currentColl, currentDebt);\\n\\t\\treturn NICR;\\n\\t}\\n\\n\\t// Return the current collateral ratio (ICR) of a given Trove. Takes a trove's pending coll and debt rewards from redistributions into account.\\n\\tfunction getCurrentICR(address _borrower, uint256 _price)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\toverride\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\t(uint256 currentColl, uint256 currentDebt) = _getCurrentTroveAmounts(_borrower);\\n\\n\\t\\tuint256 ICR = BaseMath._computeCR(currentColl, currentDebt, _price);\\n\\t\\treturn ICR;\\n\\t}\\n\\n\\tfunction getTCR(uint256 _price) external view override returns (uint256) {\\n\\t\\treturn _getTCR(_price);\\n\\t}\\n\\n\\t// Liquidations\\n\\t// ------------\\n\\n\\t// Single liquidation function. Closes the trove if its ICR is lower than the minimum collateral ratio.\\n\\tfunction liquidate(address _borrower) external override {\\n\\t\\t_requireActiveTrove(_borrower);\\n\\n\\t\\taddress[] memory borrowers = new address[](1);\\n\\t\\tborrowers[0] = _borrower;\\n\\t\\tbatchLiquidateTroves(borrowers);\\n\\t}\\n\\n\\t/*\\n\\t * Liquidate a sequence of troves. Closes a maximum number of n under-collateralized Troves,\\n\\t * starting from the one with the lowest collateral ratio in the system, and moving upwards\\n\\t */\\n\\tfunction liquidateTroves(uint256 _n) external override {\\n\\t\\tLocalVariables_OuterLiquidationFunction memory vars;\\n\\n\\t\\tLiquidationTotals memory totals;\\n\\n\\t\\tvars.price = priceFeed().fetchPrice();\\n\\t\\tvars.recoveryModeAtStart = _checkRecoveryMode(vars.price);\\n\\n\\t\\t// Perform the appropriate liquidation sequence - tally the values, and obtain their totals\\n\\t\\tif (vars.recoveryModeAtStart) {\\n\\t\\t\\ttotals = _getTotalsFromLiquidateTrovesSequence_RecoveryMode(vars.price, _n);\\n\\t\\t} else {\\n\\t\\t\\t// if !vars.recoveryModeAtStart\\n\\t\\t\\ttotals = _getTotalsFromLiquidateTrovesSequence_NormalMode(vars.price, _n);\\n\\t\\t}\\n\\n\\t\\trequire(totals.totalDebtInSequence > 0, \\\"Vault: nothing to liquidate\\\");\\n\\n\\t\\t// Move liquidated Collateral and Debt to the appropriate pools\\n\\t\\t_redistributeDebtAndColl(totals.totalDebtToRedistribute, totals.totalCollToRedistribute);\\n\\t\\tif (totals.totalCollSurplus > 0) {\\n\\t\\t\\tactivePool().sendColl(address(collSurplusPool()), totals.totalCollSurplus);\\n\\t\\t}\\n\\n\\t\\t// Update system snapshots\\n\\t\\t_updateSystemSnapshots_excludeCollRemainder(totals.totalGasCompensation);\\n\\n\\t\\tvars.liquidatedDebt = totals.totalDebtInSequence;\\n\\t\\tvars.liquidatedColl = totals.totalCollInSequence.sub(totals.totalGasCompensation).sub(\\n\\t\\t\\ttotals.totalCollSurplus\\n\\t\\t);\\n\\t\\temit Liquidation(vars.liquidatedDebt, vars.liquidatedColl, totals.totalGasCompensation);\\n\\n\\t\\t// Send gas compensation to caller\\n\\t\\t_sendGasCompensation(msg.sender, totals.totalGasCompensation);\\n\\t}\\n\\n\\t// solhint-disable-next-line contract-name-camelcase\\n\\tstruct LocalVariables_OuterLiquidationFunction {\\n\\t\\tuint256 price;\\n\\t\\tbool recoveryModeAtStart;\\n\\t\\tuint256 liquidatedDebt;\\n\\t\\tuint256 liquidatedColl;\\n\\t}\\n\\n\\tstruct LiquidationTotals {\\n\\t\\tuint256 totalCollInSequence;\\n\\t\\tuint256 totalDebtInSequence;\\n\\t\\tuint256 totalGasCompensation;\\n\\t\\tuint256 totalDebtToOffset;\\n\\t\\tuint256 totalDebtToRedistribute;\\n\\t\\tuint256 totalCollToRedistribute;\\n\\t\\tuint256 totalCollSurplus;\\n\\t}\\n\\n\\t/*\\n\\t * Attempt to liquidate a custom list of troves provided by the caller.\\n\\t */\\n\\tfunction batchLiquidateTroves(address[] memory _troveArray) public override {\\n\\t\\trequire(_troveArray.length != 0, \\\"Vault: Calldata address array must not be empty\\\");\\n\\n\\t\\tLocalVariables_OuterLiquidationFunction memory vars;\\n\\t\\tLiquidationTotals memory totals;\\n\\n\\t\\tvars.price = priceFeed().fetchPrice();\\n\\t\\t// vars.LUSDInStabPool = stabilityPoolCached.getTotalLUSDDeposits();\\n\\t\\tvars.recoveryModeAtStart = _checkRecoveryMode(vars.price);\\n\\n\\t\\t// Perform the appropriate liquidation sequence - tally values and obtain their totals.\\n\\t\\tif (vars.recoveryModeAtStart) {\\n\\t\\t\\ttotals = _getTotalFromBatchLiquidate_RecoveryMode(vars.price, _troveArray);\\n\\t\\t} else {\\n\\t\\t\\t//  if !vars.recoveryModeAtStart\\n\\t\\t\\ttotals = _getTotalsFromBatchLiquidate_NormalMode(vars.price, _troveArray);\\n\\t\\t}\\n\\n\\t\\trequire(totals.totalDebtInSequence > 0, \\\"Vault: nothing to liquidate\\\");\\n\\n\\t\\t// Move liquidated GEM and PAI to the appropriate pools\\n\\t\\t// stabilityPoolCached.offset(totals.totalDebtToOffset, totals.totalCollToSendToSP);\\n\\t\\t_redistributeDebtAndColl(totals.totalDebtToRedistribute, totals.totalCollToRedistribute);\\n\\t\\tif (totals.totalCollSurplus > 0) {\\n\\t\\t\\tactivePool().sendColl(address(collSurplusPool()), totals.totalCollSurplus);\\n\\t\\t}\\n\\n\\t\\t// Update system snapshots\\n\\t\\t_updateSystemSnapshots_excludeCollRemainder(totals.totalGasCompensation);\\n\\n\\t\\tvars.liquidatedDebt = totals.totalDebtInSequence;\\n\\t\\tvars.liquidatedColl = totals.totalCollInSequence.sub(totals.totalGasCompensation).sub(\\n\\t\\t\\ttotals.totalCollSurplus\\n\\t\\t);\\n\\t\\temit Liquidation(vars.liquidatedDebt, vars.liquidatedColl, totals.totalGasCompensation);\\n\\n\\t\\t// Send gas compensation to caller\\n\\t\\t_sendGasCompensation(msg.sender, totals.totalGasCompensation);\\n\\t}\\n\\n\\t// Liquidation Internal Functions\\n\\n\\tfunction _sendGasCompensation(address _liquidator, uint256 _coll) internal {\\n\\t\\tif (_coll > 0) {\\n\\t\\t\\tactivePool().sendColl(_liquidator, _coll);\\n\\t\\t}\\n\\t}\\n\\n\\t/*\\n\\t * Updates snapshots of system total stakes and total collateral, excluding a given collateral remainder from the calculation.\\n\\t * Used in a liquidation sequence.\\n\\t *\\n\\t * The calculation excludes a portion of collateral that is in the ActivePool:\\n\\t *\\n\\t * the total gas compensation from the liquidation sequence\\n\\t *\\n\\t * The Collateral as compensation must be excluded as it is always sent out at the very end of the liquidation sequence.\\n\\t */\\n\\tfunction _updateSystemSnapshots_excludeCollRemainder(uint256 _collRemainder) internal {\\n\\t\\ttotalStakesSnapshot = totalStakes;\\n\\n\\t\\tuint256 activeColl = activePool().getColl();\\n\\t\\tuint256 liquidatedColl = defaultPool().getColl();\\n\\t\\ttotalCollateralSnapshot = activeColl.sub(_collRemainder).add(liquidatedColl);\\n\\n\\t\\temit SystemSnapshotsUpdated(totalStakesSnapshot, totalCollateralSnapshot);\\n\\t}\\n\\n\\tfunction _redistributeDebtAndColl(uint256 _debt, uint256 _coll) internal {\\n\\t\\tif (_debt == 0) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t/*\\n\\t\\t * Add distributed coll and debt rewards-per-unit-staked to the running totals. Division uses a \\\"feedback\\\"\\n\\t\\t * error correction, to keep the cumulative error low in the running totals L_Coll and L_Debt:\\n\\t\\t *\\n\\t\\t * 1) Form numerators which compensate for the floor division errors that occurred the last time this\\n\\t\\t * function was called.\\n\\t\\t * 2) Calculate \\\"per-unit-staked\\\" ratios.\\n\\t\\t * 3) Multiply each ratio back by its denominator, to reveal the current floor division error.\\n\\t\\t * 4) Store these errors for use in the next correction when this function is called.\\n\\t\\t * 5) Note: static analysis tools complain about this \\\"division before multiplication\\\", however, it is intended.\\n\\t\\t */\\n\\t\\tuint256 collNumerator = _coll.mul(DECIMAL_PRECISION).add(lastCollError_Redistribution);\\n\\t\\tuint256 debtNumerator = _debt.mul(DECIMAL_PRECISION).add(lastDebtError_Redistribution);\\n\\n\\t\\t// Get the per-unit-staked terms\\n\\t\\tuint256 collRewardPerUnitStaked = collNumerator.div(totalStakes);\\n\\t\\tuint256 debtRewardPerUnitStaked = debtNumerator.div(totalStakes);\\n\\n\\t\\tlastCollError_Redistribution = collNumerator.sub(collRewardPerUnitStaked.mul(totalStakes));\\n\\t\\tlastDebtError_Redistribution = debtNumerator.sub(debtRewardPerUnitStaked.mul(totalStakes));\\n\\n\\t\\t// Add per-unit-staked terms to the running totals\\n\\t\\tL_Coll = L_Coll.add(collRewardPerUnitStaked);\\n\\t\\tL_Debt = L_Debt.add(debtRewardPerUnitStaked);\\n\\n\\t\\temit LTermsUpdated(L_Coll, L_Debt);\\n\\n\\t\\t// Transfer coll and debt from ActivePool to DefaultPool\\n\\t\\tactivePool().decreaseDebt(_debt);\\n\\t\\tdefaultPool().increaseDebt(_debt);\\n\\t\\tactivePool().sendColl(address(defaultPool()), _coll);\\n\\t}\\n\\n\\tstruct LiquidationValues {\\n\\t\\tuint256 entireTroveDebt;\\n\\t\\tuint256 entireTroveColl;\\n\\t\\tuint256 gasCompensation;\\n\\t\\tuint256 debtToOffset;\\n\\t\\tuint256 debtToRedistribute;\\n\\t\\tuint256 collToRedistribute;\\n\\t\\tuint256 collSurplus;\\n\\t}\\n\\n\\t// solhint-disable-next-line contract-name-camelcase\\n\\tstruct LocalVariables_InnerSingleLiquidateFunction {\\n\\t\\tuint256 collToLiquidate;\\n\\t\\tuint256 pendingDebtReward;\\n\\t\\tuint256 pendingCollReward;\\n\\t}\\n\\n\\t// solhint-disable-next-line contract-name-camelcase\\n\\tstruct LocalVariables_LiquidationSequence {\\n\\t\\tuint256 i;\\n\\t\\tuint256 ICR;\\n\\t\\taddress user;\\n\\t\\tbool backToNormalMode;\\n\\t\\tuint256 entireSystemDebt;\\n\\t\\tuint256 entireSystemColl;\\n\\t}\\n\\n\\t// Liquidate one trove, in Normal Mode.\\n\\tfunction _liquidateNormalMode(address _borrower)\\n\\t\\tinternal\\n\\t\\treturns (LiquidationValues memory singleLiquidation)\\n\\t{\\n\\t\\tLocalVariables_InnerSingleLiquidateFunction memory vars;\\n\\n\\t\\t(\\n\\t\\t\\tsingleLiquidation.entireTroveDebt,\\n\\t\\t\\tsingleLiquidation.entireTroveColl,\\n\\t\\t\\tvars.pendingDebtReward,\\n\\t\\t\\tvars.pendingCollReward\\n\\t\\t) = getEntireDebtAndColl(_borrower);\\n\\n\\t\\t_movePendingTroveRewardsToActivePool(vars.pendingDebtReward, vars.pendingCollReward);\\n\\t\\t_removeStake(_borrower);\\n\\n\\t\\tsingleLiquidation.gasCompensation = _getGasCompensation(singleLiquidation.entireTroveColl);\\n\\t\\tuint256 collToLiquidate = singleLiquidation.entireTroveColl.sub(\\n\\t\\t\\tsingleLiquidation.gasCompensation\\n\\t\\t);\\n\\n\\t\\t// NOTE: We are not using stability pool; so this calculation is not needed\\n\\t\\t// (\\n\\t\\t// \\tsingleLiquidation.debtToOffset,\\n\\t\\t// \\tsingleLiquidation.debtToRedistribute,\\n\\t\\t// \\tsingleLiquidation.collToRedistribute\\n\\t\\t// ) = _getOffsetAndRedistributionVals(singleLiquidation.entireTroveDebt, collToLiquidate);\\n\\n\\t\\t// Entire trove coll and debt is being redistributed.\\n\\t\\t// Note: Assuming ICR < MCR so there is no CollSurplus to claim back. (Is this true?)\\n\\t\\tsingleLiquidation.debtToRedistribute = singleLiquidation.entireTroveDebt;\\n\\t\\tsingleLiquidation.collToRedistribute = collToLiquidate;\\n\\n\\t\\t_closeTrove(_borrower, TroveStatus.closedByLiquidation);\\n\\n\\t\\temit TroveLiquidated(\\n\\t\\t\\t_borrower,\\n\\t\\t\\tsingleLiquidation.entireTroveDebt,\\n\\t\\t\\tsingleLiquidation.entireTroveColl,\\n\\t\\t\\tuint8(TroveOperation.liquidateInNormalMode)\\n\\t\\t);\\n\\n\\t\\temit TroveUpdated(_borrower, 0, 0, 0, 0, TroveOperation.liquidateInNormalMode);\\n\\t\\treturn singleLiquidation;\\n\\t}\\n\\n\\t// Liquidate one trove, in Recovery Mode.\\n\\tfunction _liquidateRecoveryMode(address _borrower, uint256 _ICR)\\n\\t\\tinternal\\n\\t\\treturns (LiquidationValues memory singleLiquidation)\\n\\t{\\n\\t\\tLocalVariables_InnerSingleLiquidateFunction memory vars;\\n\\n\\t\\tif (TroveOwners.length <= 1) {\\n\\t\\t\\treturn singleLiquidation;\\n\\t\\t} // don't liquidate if last trove\\n\\n\\t\\t(\\n\\t\\t\\tsingleLiquidation.entireTroveDebt,\\n\\t\\t\\tsingleLiquidation.entireTroveColl,\\n\\t\\t\\tvars.pendingDebtReward,\\n\\t\\t\\tvars.pendingCollReward\\n\\t\\t) = getEntireDebtAndColl(_borrower);\\n\\n\\t\\tsingleLiquidation.gasCompensation = _getGasCompensation(singleLiquidation.entireTroveColl);\\n\\t\\tvars.collToLiquidate = singleLiquidation.entireTroveColl.sub(\\n\\t\\t\\tsingleLiquidation.gasCompensation\\n\\t\\t);\\n\\n\\t\\t// NOTE: For MVP we are just redistributing across all active Troves, because the 'Stability Pool'\\n\\t\\t// mechanism does not really work in a context of few liquidations.\\n\\n\\t\\tif (_ICR <= MCR) {\\n\\t\\t\\t_movePendingTroveRewardsToActivePool(vars.pendingDebtReward, vars.pendingCollReward);\\n\\t\\t\\t_removeStake(_borrower);\\n\\n\\t\\t\\tsingleLiquidation.debtToRedistribute = singleLiquidation.entireTroveDebt;\\n\\t\\t\\tsingleLiquidation.collToRedistribute = vars.collToLiquidate;\\n\\n\\t\\t\\t_closeTrove(_borrower, TroveStatus.closedByLiquidation);\\n\\n\\t\\t\\temit TroveLiquidated(\\n\\t\\t\\t\\t_borrower,\\n\\t\\t\\t\\tsingleLiquidation.entireTroveDebt,\\n\\t\\t\\t\\tsingleLiquidation.entireTroveColl,\\n\\t\\t\\t\\tuint8(TroveOperation.liquidateInRecoveryMode)\\n\\t\\t\\t);\\n\\t\\t\\temit TroveUpdated(_borrower, 0, 0, 0, 0, TroveOperation.liquidateInRecoveryMode);\\n\\t\\t} else {\\n\\t\\t\\t// if (_ICR >= MCR && ( _ICR >= _TCR || singleLiquidation.entireTroveDebt > _LUSDInStabPool))\\n\\t\\t\\tLiquidationValues memory zeroVals;\\n\\t\\t\\treturn zeroVals;\\n\\t\\t}\\n\\n\\t\\treturn singleLiquidation;\\n\\t}\\n\\n\\t// Return the amount of GEM to be drawn from a trove's collateral and sent as gas compensation.\\n\\t// it includes 0.5% of Collateral + DAI_GAS_COMPENSATION\\n\\tfunction _getGasCompensation(uint256 _entireColl) internal pure returns (uint256) {\\n\\t\\tuint256 gasCompensation = _entireColl / HALF_PERCENT_DIVISOR;\\n\\t\\tgasCompensation = gasCompensation.add(DAI_GAS_COMPENSATION);\\n\\n\\t\\treturn gasCompensation;\\n\\t}\\n\\n\\t// Move a Trove's pending debt and collateral rewards from distributions, from the Default Pool to the Active Pool\\n\\tfunction _movePendingTroveRewardsToActivePool(uint256 _PAI, uint256 _GEM) internal {\\n\\t\\tdefaultPool().decreaseDebt(_PAI);\\n\\t\\tactivePool().increaseDebt(_PAI);\\n\\t\\tdefaultPool().sendCollToActivePool(_GEM);\\n\\t}\\n\\n\\t/*\\n\\t *  Get its offset coll/debt and Coll gas comp, and close the trove.\\n\\t */\\n\\t// function _getCappedOffsetVals(\\n\\t// \\tuint256 _entireTroveDebt,\\n\\t// \\tuint256 _entireTroveColl,\\n\\t// \\tuint256 _price\\n\\t// ) internal pure returns (LiquidationValues memory singleLiquidation) {\\n\\t// \\tsingleLiquidation.entireTroveDebt = _entireTroveDebt;\\n\\t// \\tsingleLiquidation.entireTroveColl = _entireTroveColl;\\n\\n\\t// \\t// This is the collateral to be liquidated, the rest is returned to the trove owner\\n\\t// \\tuint256 cappedCollPortion = _entireTroveDebt.mul(MCR).div(_price);\\n\\t// \\tsingleLiquidation.gasCompensation = _getCollGasCompensation(cappedCollPortion); // includes Coll Comp + DAI_GAS_COMP\\n\\n\\t// \\t// Note: No stability pool\\n\\t// \\t// singleLiquidation.debtToOffset = _entireTroveDebt;\\n\\t// \\t// singleLiquidation.collToSendToSP = cappedCollPortion.sub(singleLiquidation.collGasCompensation);\\n\\t// \\tsingleLiquidation.collSurplus = _entireTroveColl.sub(cappedCollPortion); // excess collateral is available to be claimed in collateral surplus pool\\n\\t// \\tsingleLiquidation.debtToRedistribute = _entireTroveDebt;\\n\\t// \\tsingleLiquidation.collToRedistribute = cappedCollPortion;\\n\\t// }\\n\\n\\t/* This function is used when the liquidateTroves sequence starts during Recovery Mode. However, it\\n\\t * handle the case where the system *leaves* Recovery Mode, part way through the liquidation sequence\\n\\t */\\n\\tfunction _getTotalsFromLiquidateTrovesSequence_RecoveryMode(uint256 _price, uint256 _n)\\n\\t\\tinternal\\n\\t\\treturns (LiquidationTotals memory totals)\\n\\t{\\n\\t\\tLocalVariables_LiquidationSequence memory vars;\\n\\t\\tLiquidationValues memory singleLiquidation;\\n\\n\\t\\tvars.backToNormalMode = false;\\n\\t\\tvars.entireSystemDebt = getEntireSystemDebt();\\n\\t\\tvars.entireSystemColl = getEntireSystemColl();\\n\\n\\t\\tvars.user = sortedTroves().getLast();\\n\\t\\taddress firstUser = sortedTroves().getFirst();\\n\\t\\tfor (vars.i = 0; vars.i < _n && vars.user != firstUser; vars.i++) {\\n\\t\\t\\t// we need to cache it, because current user is likely going to be deleted\\n\\t\\t\\taddress nextUser = sortedTroves().getPrev(vars.user);\\n\\n\\t\\t\\tvars.ICR = getCurrentICR(vars.user, _price);\\n\\n\\t\\t\\tif (!vars.backToNormalMode) {\\n\\t\\t\\t\\t// Break the loop if ICR is greater than MCR\\n\\t\\t\\t\\tif (vars.ICR >= MCR) {\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// uint256 TCR = BaseMath._computeCR(vars.entireSystemColl, vars.entireSystemDebt, _price);\\n\\n\\t\\t\\t\\tsingleLiquidation = _liquidateRecoveryMode(vars.user, vars.ICR);\\n\\n\\t\\t\\t\\t// Update aggregate trackers\\n\\t\\t\\t\\t// vars.remainingLUSDInStabPool = vars.remainingLUSDInStabPool.sub(singleLiquidation.debtToOffset);\\n\\t\\t\\t\\tvars.entireSystemDebt = vars.entireSystemDebt.sub(singleLiquidation.debtToOffset);\\n\\t\\t\\t\\tvars.entireSystemColl = vars\\n\\t\\t\\t\\t\\t.entireSystemColl\\n\\t\\t\\t\\t\\t.sub(singleLiquidation.gasCompensation)\\n\\t\\t\\t\\t\\t.sub(singleLiquidation.collSurplus);\\n\\n\\t\\t\\t\\t// Add liquidation values to their respective running totals\\n\\t\\t\\t\\ttotals = _addLiquidationValuesToTotals(totals, singleLiquidation);\\n\\n\\t\\t\\t\\tvars.backToNormalMode = !_checkPotentialRecoveryMode(\\n\\t\\t\\t\\t\\tvars.entireSystemColl,\\n\\t\\t\\t\\t\\tvars.entireSystemDebt,\\n\\t\\t\\t\\t\\t_price\\n\\t\\t\\t\\t);\\n\\t\\t\\t} else if (vars.backToNormalMode && vars.ICR < MCR) {\\n\\t\\t\\t\\tsingleLiquidation = _liquidateNormalMode(vars.user);\\n\\n\\t\\t\\t\\t// vars.remainingLUSDInStabPool = vars.remainingLUSDInStabPool.sub(singleLiquidation.debtToOffset);\\n\\n\\t\\t\\t\\t// Add liquidation values to their respective running totals\\n\\t\\t\\t\\ttotals = _addLiquidationValuesToTotals(totals, singleLiquidation);\\n\\t\\t\\t} else break; // break if the loop reaches a Trove with ICR >= MCR\\n\\n\\t\\t\\tvars.user = nextUser;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _getTotalsFromLiquidateTrovesSequence_NormalMode(uint256 _price, uint256 _n)\\n\\t\\tinternal\\n\\t\\treturns (LiquidationTotals memory totals)\\n\\t{\\n\\t\\tLocalVariables_LiquidationSequence memory vars;\\n\\t\\tLiquidationValues memory singleLiquidation;\\n\\n\\t\\tfor (vars.i = 0; vars.i < _n; vars.i++) {\\n\\t\\t\\tvars.user = sortedTroves().getLast();\\n\\t\\t\\tvars.ICR = getCurrentICR(vars.user, _price);\\n\\n\\t\\t\\tif (vars.ICR < MCR) {\\n\\t\\t\\t\\tsingleLiquidation = _liquidateNormalMode(vars.user);\\n\\n\\t\\t\\t\\t// vars.remainingLUSDInStabPool = vars.remainingLUSDInStabPool.sub(singleLiquidation.debtToOffset);\\n\\n\\t\\t\\t\\t// Add liquidation values to their respective running totals\\n\\t\\t\\t\\ttotals = _addLiquidationValuesToTotals(totals, singleLiquidation);\\n\\t\\t\\t} else break; // break if the loop reaches a Trove with ICR >= MCR\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _getTotalsFromBatchLiquidate_NormalMode(uint256 _price, address[] memory _troveArray)\\n\\t\\tinternal\\n\\t\\treturns (LiquidationTotals memory totals)\\n\\t{\\n\\t\\tLocalVariables_LiquidationSequence memory vars;\\n\\t\\tLiquidationValues memory singleLiquidation;\\n\\n\\t\\tfor (vars.i = 0; vars.i < _troveArray.length; vars.i++) {\\n\\t\\t\\tvars.user = _troveArray[vars.i];\\n\\t\\t\\tvars.ICR = getCurrentICR(vars.user, _price);\\n\\n\\t\\t\\tif (vars.ICR < MCR) {\\n\\t\\t\\t\\tsingleLiquidation = _liquidateNormalMode(vars.user);\\n\\n\\t\\t\\t\\t// Add liquidation values to their respective running totals\\n\\t\\t\\t\\ttotals = _addLiquidationValuesToTotals(totals, singleLiquidation);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/*\\n\\t * This function is used when the batch liquidation sequence starts during Recovery Mode. However, it\\n\\t * handle the case where the system *leaves* Recovery Mode, part way through the liquidation sequence\\n\\t */\\n\\tfunction _getTotalFromBatchLiquidate_RecoveryMode(uint256 _price, address[] memory _troveArray)\\n\\t\\tinternal\\n\\t\\treturns (LiquidationTotals memory totals)\\n\\t{\\n\\t\\tLocalVariables_LiquidationSequence memory vars;\\n\\t\\tLiquidationValues memory singleLiquidation;\\n\\n\\t\\tvars.backToNormalMode = false;\\n\\t\\tvars.entireSystemDebt = getEntireSystemDebt();\\n\\t\\tvars.entireSystemColl = getEntireSystemColl();\\n\\n\\t\\tfor (vars.i = 0; vars.i < _troveArray.length; vars.i++) {\\n\\t\\t\\tvars.user = _troveArray[vars.i];\\n\\t\\t\\t// Skip non-active troves\\n\\t\\t\\tif (Troves[vars.user].status != TroveStatus.active) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\t\\t\\tvars.ICR = getCurrentICR(vars.user, _price);\\n\\n\\t\\t\\tif (!vars.backToNormalMode) {\\n\\t\\t\\t\\t// Skip this trove if ICR is greater than MCR\\n\\t\\t\\t\\t// NOTE: We are in recovery mode; should I keep this provission ?\\n\\t\\t\\t\\tif (vars.ICR >= MCR) {\\n\\t\\t\\t\\t\\tcontinue;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tsingleLiquidation = _liquidateRecoveryMode(vars.user, vars.ICR);\\n\\n\\t\\t\\t\\t// Update aggregate trackers\\n\\t\\t\\t\\tvars.entireSystemDebt = vars.entireSystemDebt.sub(singleLiquidation.debtToOffset);\\n\\t\\t\\t\\tvars.entireSystemColl = vars\\n\\t\\t\\t\\t\\t.entireSystemColl\\n\\t\\t\\t\\t\\t.sub(singleLiquidation.gasCompensation)\\n\\t\\t\\t\\t\\t.sub(singleLiquidation.collSurplus);\\n\\n\\t\\t\\t\\t// Add liquidation values to their respective running totals\\n\\t\\t\\t\\ttotals = _addLiquidationValuesToTotals(totals, singleLiquidation);\\n\\n\\t\\t\\t\\tvars.backToNormalMode = !_checkPotentialRecoveryMode(\\n\\t\\t\\t\\t\\tvars.entireSystemColl,\\n\\t\\t\\t\\t\\tvars.entireSystemDebt,\\n\\t\\t\\t\\t\\t_price\\n\\t\\t\\t\\t);\\n\\t\\t\\t} else if (vars.backToNormalMode && vars.ICR < MCR) {\\n\\t\\t\\t\\tsingleLiquidation = _liquidateNormalMode(vars.user);\\n\\n\\t\\t\\t\\t// Add liquidation values to their respective running totals\\n\\t\\t\\t\\ttotals = _addLiquidationValuesToTotals(totals, singleLiquidation);\\n\\t\\t\\t} else continue; // In Normal Mode skip troves with ICR >= MCR\\n\\t\\t}\\n\\t}\\n\\n\\t// Check whether or not the system *would be* in Recovery Mode, given an ETH:USD price, and the entire system coll and debt.\\n\\tfunction _checkPotentialRecoveryMode(\\n\\t\\tuint256 _entireSystemColl,\\n\\t\\tuint256 _entireSystemDebt,\\n\\t\\tuint256 _price\\n\\t) internal pure returns (bool) {\\n\\t\\tuint256 TCR = BaseMath._computeCR(_entireSystemColl, _entireSystemDebt, _price);\\n\\t\\treturn TCR < CCR;\\n\\t}\\n\\n\\t// --- Liquidation helper functions ---\\n\\n\\tfunction _addLiquidationValuesToTotals(\\n\\t\\tLiquidationTotals memory oldTotals,\\n\\t\\tLiquidationValues memory singleLiquidation\\n\\t) internal pure returns (LiquidationTotals memory newTotals) {\\n\\t\\t// Tally all the values with their respective running totals\\n\\t\\tnewTotals.totalGasCompensation = oldTotals.totalGasCompensation.add(\\n\\t\\t\\tsingleLiquidation.gasCompensation\\n\\t\\t);\\n\\t\\tnewTotals.totalDebtInSequence = oldTotals.totalDebtInSequence.add(\\n\\t\\t\\tsingleLiquidation.entireTroveDebt\\n\\t\\t);\\n\\t\\tnewTotals.totalCollInSequence = oldTotals.totalCollInSequence.add(\\n\\t\\t\\tsingleLiquidation.entireTroveColl\\n\\t\\t);\\n\\t\\tnewTotals.totalDebtToRedistribute = oldTotals.totalDebtToRedistribute.add(\\n\\t\\t\\tsingleLiquidation.debtToRedistribute\\n\\t\\t);\\n\\t\\tnewTotals.totalCollToRedistribute = oldTotals.totalCollToRedistribute.add(\\n\\t\\t\\tsingleLiquidation.collToRedistribute\\n\\t\\t);\\n\\t\\tnewTotals.totalCollSurplus = oldTotals.totalCollSurplus.add(singleLiquidation.collSurplus);\\n\\n\\t\\treturn newTotals;\\n\\t}\\n\\n\\tfunction removeStake(address _borrower) external override {\\n\\t\\t_requireCallerIsBorrowerOperations();\\n\\t\\treturn _removeStake(_borrower);\\n\\t}\\n\\n\\t// Remove borrower's stake from the totalStakes sum, and set their stake to 0\\n\\tfunction _removeStake(address _borrower) internal {\\n\\t\\tuint256 stake = Troves[_borrower].stake;\\n\\t\\ttotalStakes = totalStakes.sub(stake);\\n\\t\\tTroves[_borrower].stake = 0;\\n\\t}\\n\\n\\tfunction updateStakeAndTotalStakes(address _borrower) external override returns (uint256) {\\n\\t\\treturn _updateStakeAndTotalStakes(_borrower);\\n\\t}\\n\\n\\t// Update borrower's stake based on their latest collateral value\\n\\tfunction _updateStakeAndTotalStakes(address _borrower) internal returns (uint256) {\\n\\t\\tuint256 newStake = _computeNewStake(Troves[_borrower].coll);\\n\\t\\tuint256 oldStake = Troves[_borrower].stake;\\n\\t\\tTroves[_borrower].stake = newStake;\\n\\n\\t\\ttotalStakes = totalStakes.sub(oldStake).add(newStake);\\n\\t\\temit TotalStakesUpdated(totalStakes);\\n\\n\\t\\treturn newStake;\\n\\t}\\n\\n\\t// Calculate a new stake based on the snapshots of the totalStakes and totalCollateral taken at the last liquidation\\n\\tfunction _computeNewStake(uint256 _coll) internal view returns (uint256) {\\n\\t\\tuint256 stake;\\n\\t\\tif (totalCollateralSnapshot == 0) {\\n\\t\\t\\tstake = _coll;\\n\\t\\t} else {\\n\\t\\t\\t/*\\n\\t\\t\\t * The following assert() holds true because:\\n\\t\\t\\t * - The system always contains >= 1 trove\\n\\t\\t\\t * - When we close or liquidate a trove, we redistribute the pending rewards, so if all troves were closed/liquidated,\\n\\t\\t\\t * rewards would\\u2019ve been emptied and totalCollateralSnapshot would be zero too.\\n\\t\\t\\t */\\n\\t\\t\\tassert(totalStakesSnapshot > 0);\\n\\t\\t\\tstake = _coll.mul(totalStakesSnapshot).div(totalCollateralSnapshot);\\n\\t\\t}\\n\\t\\treturn stake;\\n\\t}\\n\\n\\tfunction closeTrove(address _borrower) external override {\\n\\t\\t_requireCallerIsBorrowerOperations();\\n\\t\\treturn _closeTrove(_borrower, TroveStatus.closedByOwner);\\n\\t}\\n\\n\\tfunction _closeTrove(address _borrower, TroveStatus closedStatus) internal {\\n\\t\\tassert(closedStatus != TroveStatus.nonExistent && closedStatus != TroveStatus.active);\\n\\n\\t\\tuint256 TroveOwnersArrayLength = TroveOwners.length;\\n\\t\\t_requireMoreThanOneTroveInSystem(TroveOwnersArrayLength);\\n\\n\\t\\tTroves[_borrower].status = closedStatus;\\n\\t\\tTroves[_borrower].coll = 0;\\n\\t\\tTroves[_borrower].debt = 0;\\n\\n\\t\\trewardSnapshots[_borrower].coll = 0;\\n\\t\\trewardSnapshots[_borrower].debt = 0;\\n\\n\\t\\t_removeTroveOwner(_borrower, TroveOwnersArrayLength);\\n\\t\\tsortedTroves().remove(_borrower);\\n\\t}\\n\\n\\t// Update borrower's snapshots of L_Coll and L_Debt to reflect the current values\\n\\tfunction updateTroveRewardSnapshots(address _borrower) public override {\\n\\t\\trewardSnapshots[_borrower].coll = L_Coll;\\n\\t\\trewardSnapshots[_borrower].debt = L_Debt;\\n\\t\\temit TroveSnapshotsUpdated(L_Coll, L_Debt);\\n\\t}\\n\\n\\t// Push the owner's address to the Trove owners list, and record the corresponding array index on the Trove struct\\n\\tfunction addTroveOwnerToArray(address _borrower) external override returns (uint256 index) {\\n\\t\\t_requireCallerIsBorrowerOperations();\\n\\t\\treturn _addTroveOwnerToArray(_borrower);\\n\\t}\\n\\n\\tfunction _addTroveOwnerToArray(address _borrower) internal returns (uint128 index) {\\n\\t\\t/* Max array size is 2**128 - 1, i.e. ~3e30 troves. No risk of overflow, since troves have minimum PAI\\n        debt of liquidation reserve plus MIN_NET_DEBT. 3e30 PAI dwarfs the value of all wealth in the world ( which is < 1e15 USD). */\\n\\n\\t\\t// Push the Troveowner to the array\\n\\t\\tTroveOwners.push(_borrower);\\n\\n\\t\\t// Record the index of the new Troveowner on their Trove struct\\n\\t\\tindex = uint128(TroveOwners.length.sub(1));\\n\\t\\tTroves[_borrower].arrayIndex = index;\\n\\n\\t\\treturn index;\\n\\t}\\n\\n\\tfunction applyPendingRewards(address _borrower) external override {\\n\\t\\t_applyPendingRewards(_borrower);\\n\\t}\\n\\n\\t// Add the borrowers's coll and debt rewards earned from redistributions, to their Trove\\n\\tfunction _applyPendingRewards(address _borrower) internal {\\n\\t\\tif (hasPendingRewards(_borrower)) {\\n\\t\\t\\t_requireActiveTrove(_borrower);\\n\\n\\t\\t\\t// Compute pending rewards\\n\\t\\t\\tuint256 pendingCollReward = getPendingCollReward(_borrower);\\n\\t\\t\\tuint256 pendingDebtReward = getPendingDebtReward(_borrower);\\n\\n\\t\\t\\t// Apply pending rewards to trove's state\\n\\t\\t\\tTroves[_borrower].coll = Troves[_borrower].coll.add(pendingCollReward);\\n\\t\\t\\tTroves[_borrower].debt = Troves[_borrower].debt.add(pendingDebtReward);\\n\\n\\t\\t\\tupdateTroveRewardSnapshots(_borrower);\\n\\n\\t\\t\\t// Transfer from DefaultPool to Joins\\n\\t\\t\\t// Note: I'm not sure this is needed; since the Join contracts are\\n\\t\\t\\t// acting as the Pools do in Liquity; the collateral is already in GemJoin and\\n\\t\\t\\t// the Debt is already accounted for in PAIJoin.\\n\\t\\t\\t// In the Vault we just need to fix the trove's accounting to redistribute\\n\\t\\t\\t// collateral and debt.\\n\\t\\t\\t// _movePendingTroveRewardsToJoin(pendingDebtReward, pendingCollReward);\\n\\n\\t\\t\\temit TroveUpdated(\\n\\t\\t\\t\\t_borrower,\\n\\t\\t\\t\\tTroves[_borrower].debt,\\n\\t\\t\\t\\tTroves[_borrower].coll,\\n\\t\\t\\t\\tTroves[_borrower].stake,\\n\\t\\t\\t\\t0,\\n\\t\\t\\t\\tTroveOperation.applyPendingRewards\\n\\t\\t\\t);\\n\\t\\t}\\n\\t}\\n\\n\\t// Get the borrower's pending accumulated Coll reward, earned by their stake\\n\\tfunction getPendingCollReward(address _borrower) public view override returns (uint256) {\\n\\t\\tuint256 snapshotColl = rewardSnapshots[_borrower].coll;\\n\\t\\tuint256 rewardPerUnitStaked = L_Coll.sub(snapshotColl);\\n\\n\\t\\tif (rewardPerUnitStaked == 0 || Troves[_borrower].status != TroveStatus.active) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\tuint256 stake = Troves[_borrower].stake;\\n\\n\\t\\tuint256 pendingCollReward = stake.mul(rewardPerUnitStaked).div(DECIMAL_PRECISION);\\n\\n\\t\\treturn pendingCollReward;\\n\\t}\\n\\n\\t// Get the borrower's pending accumulated Debt reward, earned by their stake\\n\\tfunction getPendingDebtReward(address _borrower) public view override returns (uint256) {\\n\\t\\tuint256 snapshotDebt = rewardSnapshots[_borrower].debt;\\n\\t\\tuint256 rewardPerUnitStaked = L_Debt.sub(snapshotDebt);\\n\\n\\t\\tif (rewardPerUnitStaked == 0 || Troves[_borrower].status != TroveStatus.active) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\tuint256 stake = Troves[_borrower].stake;\\n\\t\\tuint256 pendingDebtReward = stake.mul(rewardPerUnitStaked).div(DECIMAL_PRECISION);\\n\\n\\t\\treturn pendingDebtReward;\\n\\t}\\n\\n\\tfunction hasPendingRewards(address _borrower) public view override returns (bool) {\\n\\t\\t/*\\n\\t\\t * A Trove has pending rewards if its snapshot is less than the current rewards per-unit-staked sum:\\n\\t\\t * this indicates that rewards have occured since the snapshot was made, and the user therefore has\\n\\t\\t * pending rewards\\n\\t\\t */\\n\\t\\tif (Troves[_borrower].status != TroveStatus.active) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\treturn (rewardSnapshots[_borrower].coll < L_Coll);\\n\\t}\\n\\n\\t// Updates the baseRate state variable based on time elapsed since the last redemption or PAI borrowing operation.\\n\\tfunction decayBaseRateFromBorrowing() external override {\\n\\t\\t_requireCallerIsBorrowerOperations();\\n\\n\\t\\tuint256 decayedBaseRate = _calcDecayedBaseRate();\\n\\t\\tassert(decayedBaseRate <= DECIMAL_PRECISION); // The baseRate can decay to 0\\n\\n\\t\\tbaseRate = decayedBaseRate;\\n\\t\\temit BaseRateUpdated(decayedBaseRate);\\n\\n\\t\\t_updateLastFeeOpTime();\\n\\t}\\n\\n\\t// Update the last fee operation time only if time passed >= decay interval. This prevents base rate griefing.\\n\\tfunction _updateLastFeeOpTime() internal {\\n\\t\\tuint256 timePassed = block.timestamp.sub(lastFeeOperationTime); // solhint-disable-line not-rely-on-time\\n\\n\\t\\tif (timePassed >= SECONDS_IN_ONE_MINUTE) {\\n\\t\\t\\tlastFeeOperationTime = block.timestamp; // solhint-disable-line not-rely-on-time\\n\\t\\t\\temit LastFeeOpTimeUpdated(block.timestamp); // solhint-disable-line not-rely-on-time\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _calcDecayedBaseRate() internal view returns (uint256) {\\n\\t\\tuint256 minutesPassed = _minutesPassedSinceLastFeeOp();\\n\\t\\tuint256 decayFactor = BaseMath._decPow(MINUTE_DECAY_FACTOR, minutesPassed);\\n\\n\\t\\treturn baseRate.mul(decayFactor).div(DECIMAL_PRECISION);\\n\\t}\\n\\n\\tfunction _calcBorrowingRate(uint256 _baseRate) internal pure returns (uint256) {\\n\\t\\treturn BaseMath._min(BORROWING_FEE_FLOOR.add(_baseRate), MAX_BORROWING_FEE);\\n\\t}\\n\\n\\t// return borrowing fee in GEMs\\n\\tfunction _calcBorrowingFee(\\n\\t\\tuint256 _borrowingRate,\\n\\t\\tuint256 _paiAmount,\\n\\t\\tuint256 price\\n\\t) internal pure returns (uint256 gemFee) {\\n\\t\\tuint256 paiFee = _borrowingRate.mul(_paiAmount).div(DECIMAL_PRECISION);\\n\\t\\tgemFee = paiFee.mul(DECIMAL_PRECISION).div(price);\\n\\t}\\n\\n\\tfunction _minutesPassedSinceLastFeeOp() internal view returns (uint256) {\\n\\t\\t// solhint-disable-next-line not-rely-on-time\\n\\t\\treturn (block.timestamp.sub(lastFeeOperationTime)).div(SECONDS_IN_ONE_MINUTE); // solhint-disable-line no-rely-on-time\\n\\t}\\n\\n\\t/*\\n\\t * Remove a Trove owner from the TroveOwners array, not preserving array order. Removing owner 'B' does the following:\\n\\t * [A B C D E] => [A E C D], and updates E's Trove struct to point to its new array index.\\n\\t */\\n\\tfunction _removeTroveOwner(address _borrower, uint256 TroveOwnersArrayLength) internal {\\n\\t\\tTroveStatus troveStatus = Troves[_borrower].status;\\n\\t\\t// It\\u2019s set in caller function `_closeTrove`\\n\\t\\tassert(troveStatus != TroveStatus.nonExistent && troveStatus != TroveStatus.active);\\n\\n\\t\\tuint128 index = Troves[_borrower].arrayIndex;\\n\\t\\tuint256 length = TroveOwnersArrayLength;\\n\\t\\tuint256 idxLast = length.sub(1);\\n\\n\\t\\tassert(index <= idxLast);\\n\\n\\t\\taddress addressToMove = TroveOwners[idxLast];\\n\\n\\t\\tTroveOwners[index] = addressToMove;\\n\\t\\tTroves[addressToMove].arrayIndex = index;\\n\\t\\temit TroveIndexUpdated(addressToMove, index);\\n\\n\\t\\tTroveOwners.pop();\\n\\t}\\n\\n\\t// Trove Management\\n\\t// ------------------------\\n\\n\\t// Return the Troves entire debt and coll, including pending rewards from redistributions.\\n\\tfunction getEntireDebtAndColl(address _borrower)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\toverride\\n\\t\\treturns (\\n\\t\\t\\tuint256 debt,\\n\\t\\t\\tuint256 coll,\\n\\t\\t\\tuint256 pendingDebtReward,\\n\\t\\t\\tuint256 pendingCollReward\\n\\t\\t)\\n\\t{\\n\\t\\tdebt = Troves[_borrower].debt;\\n\\t\\tcoll = Troves[_borrower].coll;\\n\\n\\t\\tpendingDebtReward = getPendingDebtReward(_borrower);\\n\\t\\tpendingCollReward = getPendingCollReward(_borrower);\\n\\n\\t\\tdebt = debt.add(pendingDebtReward);\\n\\t\\tcoll = coll.add(pendingCollReward);\\n\\t}\\n\\n\\tfunction setTroveStatus(address _borrower, uint256 _num) public override {\\n\\t\\t_requireCallerIsBorrowerOperations();\\n\\t\\tTroves[_borrower].status = TroveStatus(_num);\\n\\t}\\n\\n\\tfunction increaseTroveColl(address _borrower, uint256 _collIncrease)\\n\\t\\texternal\\n\\t\\toverride\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\t_requireCallerIsBorrowerOperations();\\n\\t\\t_requireActiveTrove(_borrower);\\n\\t\\tuint256 newColl = Troves[_borrower].coll + _collIncrease;\\n\\n\\t\\tTroves[_borrower].coll = newColl;\\n\\n\\t\\treturn newColl;\\n\\t}\\n\\n\\tfunction decreaseTroveColl(address _borrower, uint256 _collDecrease)\\n\\t\\texternal\\n\\t\\toverride\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\t_requireCallerIsBorrowerOperations();\\n\\t\\t_requireActiveTrove(_borrower);\\n\\t\\t// No collateral underflow\\n\\t\\tuint256 newColl = Troves[_borrower].coll.sub(_collDecrease);\\n\\n\\t\\t// Can't decrease collateral more than what's in the trove\\n\\t\\t_requireNoNegativeTroveColl(_borrower, _collDecrease);\\n\\n\\t\\tTroves[_borrower].coll = newColl;\\n\\t\\treturn newColl;\\n\\t}\\n\\n\\tfunction increaseTroveDebt(address _borrower, uint256 _debtIncrease)\\n\\t\\texternal\\n\\t\\toverride\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\t_requireCallerIsBorrowerOperations();\\n\\t\\t_requireActiveTrove(_borrower);\\n\\n\\t\\tuint256 newDebt = Troves[_borrower].debt.add(_debtIncrease);\\n\\t\\tTroves[_borrower].debt = newDebt;\\n\\n\\t\\treturn newDebt;\\n\\t}\\n\\n\\tfunction decreaseTroveDebt(address _borrower, uint256 _debtDecrease)\\n\\t\\texternal\\n\\t\\toverride\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\t_requireCallerIsBorrowerOperations();\\n\\t\\t_requireActiveTrove(_borrower);\\n\\n\\t\\t// Can't decrease debt  more than what's in the trove\\n\\t\\t_requireNoNegativeTroveDebt(_borrower, _debtDecrease);\\n\\n\\t\\tuint256 newDebt = Troves[_borrower].debt - (_debtDecrease);\\n\\t\\tTroves[_borrower].debt = newDebt;\\n\\t\\treturn newDebt;\\n\\t}\\n\\n\\tfunction getTroveStatus(address _borrower) external view override returns (TroveStatus) {\\n\\t\\treturn Troves[_borrower].status;\\n\\t}\\n\\n\\tfunction getTroveStake(address _borrower) external view override returns (uint256) {\\n\\t\\treturn Troves[_borrower].stake;\\n\\t}\\n\\n\\tfunction getTroveDebt(address _borrower) external view override returns (uint256) {\\n\\t\\treturn Troves[_borrower].debt;\\n\\t}\\n\\n\\tfunction getTroveColl(address _borrower) external view override returns (uint256) {\\n\\t\\treturn Troves[_borrower].coll;\\n\\t}\\n\\n\\tstruct RedemptionTotals {\\n\\t\\tuint256 remainingPAI;\\n\\t\\tuint256 totalPAIToRedeem;\\n\\t\\tuint256 totalGEMToRedeem;\\n\\t\\tuint256 totalGEMDrawn;\\n\\t\\tuint256 GEMFee;\\n\\t\\tuint256 GEMToSendToRedeemer;\\n\\t\\tuint256 decayedBaseRate;\\n\\t\\tuint256 price;\\n\\t\\tuint256 totalPAISupplyAtStart;\\n\\t}\\n\\n\\tstruct SingleRedemptionValues {\\n\\t\\tuint256 PAILot;\\n\\t\\tuint256 GEMLot;\\n\\t\\tbool cancelledPartial;\\n\\t}\\n\\n\\t// --- Redemption functions ---\\n\\n\\t// Redeem as much collateral as possible from _borrower's Trove in exchange for PAI up to _maxPAIamount\\n\\tfunction _redeemCollateralFromTrove(\\n\\t\\taddress _borrower,\\n\\t\\tuint256 _maxPAIamount,\\n\\t\\tuint256 _price,\\n\\t\\taddress _upperPartialRedemptionHint,\\n\\t\\taddress _lowerPartialRedemptionHint,\\n\\t\\tuint256 _partialRedemptionHintNICR\\n\\t) internal returns (SingleRedemptionValues memory singleRedemption) {\\n\\t\\t// Determine the remaining amount (lot) to be redeemed, capped by the entire debt of the Trove\\n\\t\\tsingleRedemption.PAILot = BaseMath._min(_maxPAIamount, Troves[_borrower].debt);\\n\\n\\t\\t// Get the GEMLot of equivalent value in USD\\n\\t\\tsingleRedemption.GEMLot = singleRedemption.PAILot.mul(DECIMAL_PRECISION).div(_price);\\n\\n\\t\\t// Decrease the debt and collateral of the current Trove according to the PAI lot and corresponding ETH to send\\n\\t\\tuint256 newDebt = (Troves[_borrower].debt).sub(singleRedemption.PAILot);\\n\\t\\tuint256 newColl = (Troves[_borrower].coll).sub(singleRedemption.GEMLot);\\n\\n\\t\\tif (newDebt == 0) {\\n\\t\\t\\t// No debt left in the Trove (except for the liquidation reserve), therefore the trove gets closed\\n\\t\\t\\t_removeStake(_borrower);\\n\\t\\t\\t_closeTrove(_borrower, TroveStatus.closedByRedemption);\\n\\t\\t\\t_redeemCloseTrove(_borrower, 0, newColl);\\n\\t\\t\\temit TroveUpdated(_borrower, 0, 0, 0, 0, TroveOperation.redeemCollateral);\\n\\t\\t} else {\\n\\t\\t\\tuint256 newNICR = BaseMath._computeNominalCR(newColl, newDebt);\\n\\n\\t\\t\\t/*\\n\\t\\t\\t * If the provided hint is out of date, we bail since trying to reinsert without a good hint will almost\\n\\t\\t\\t * certainly result in running out of gas.\\n\\t\\t\\t */\\n\\n\\t\\t\\tif (newNICR != _partialRedemptionHintNICR) {\\n\\t\\t\\t\\tsingleRedemption.cancelledPartial = true;\\n\\t\\t\\t\\treturn singleRedemption;\\n\\t\\t\\t}\\n\\n\\t\\t\\tsortedTroves().reInsert(\\n\\t\\t\\t\\t_borrower,\\n\\t\\t\\t\\tnewNICR,\\n\\t\\t\\t\\t_upperPartialRedemptionHint,\\n\\t\\t\\t\\t_lowerPartialRedemptionHint\\n\\t\\t\\t);\\n\\n\\t\\t\\tTroves[_borrower].debt = newDebt;\\n\\t\\t\\tTroves[_borrower].coll = newColl;\\n\\t\\t\\t_updateStakeAndTotalStakes(_borrower);\\n\\n\\t\\t\\temit TroveUpdated(\\n\\t\\t\\t\\t_borrower,\\n\\t\\t\\t\\tnewDebt,\\n\\t\\t\\t\\tnewColl,\\n\\t\\t\\t\\tTroves[_borrower].stake,\\n\\t\\t\\t\\t0,\\n\\t\\t\\t\\tTroveOperation.redeemCollateral\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\treturn singleRedemption;\\n\\t}\\n\\n\\t/*\\n\\t * Called when a full redemption occurs, and closes the trove.\\n\\t * The redeemer swaps debt (PAI) for debt worth of GEM. \\n\\n\\t * NOT VALID IN PAI => \\n\\t * The redeemer swaps (debt - liquidation reserve) PAI for (debt - liquidation reserve) worth of ETH, so the PAI liquidation reserve left corresponds to the remaining debt.\\n\\t * In order to close the trove, the PAI liquidation reserve is burned, and the corresponding debt is removed from the active pool.\\n\\t * The debt recorded on the trove's struct is zero'd elswhere, in _closeTrove.\\n\\t * Any surplus ETH left in the trove, is sent to the Coll surplus pool, and can be later claimed by the borrower.\\n\\t */\\n\\tfunction _redeemCloseTrove(\\n\\t\\taddress _borrower,\\n\\t\\tuint256 _debt,\\n\\t\\tuint256 _coll\\n\\t) internal {\\n\\t\\t// paiToken().burn(gasPoolAddress, _debt);\\n\\n\\t\\t// Update Active Pool PAI, and send GEM to account\\n\\t\\tactivePool().decreaseDebt(_debt);\\n\\n\\t\\t// we need to add DAI_GAS_COMPENSATION because trove\\n\\t\\t// is being closed and DAI_GAS_COMPENSATION is not part\\n\\t\\t// of trove's collateral.\\n\\t\\tuint256 totalColl = _coll.add(DAI_GAS_COMPENSATION);\\n\\n\\t\\t// send GEM from Active Pool to CollSurplus Pool\\n\\t\\tcollSurplusPool().accountSurplus(_borrower, totalColl);\\n\\t\\tactivePool().sendColl(address(collSurplusPool()), totalColl);\\n\\t}\\n\\n\\tfunction _isValidFirstRedemptionHint(address _firstRedemptionHint, uint256 _price)\\n\\t\\tinternal\\n\\t\\tview\\n\\t\\treturns (bool)\\n\\t{\\n\\t\\tif (\\n\\t\\t\\t_firstRedemptionHint == address(0) ||\\n\\t\\t\\t!sortedTroves().contains(_firstRedemptionHint) ||\\n\\t\\t\\tgetCurrentICR(_firstRedemptionHint, _price) < MCR\\n\\t\\t) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\taddress nextTrove = sortedTroves().getNext(_firstRedemptionHint);\\n\\t\\treturn nextTrove == address(0) || getCurrentICR(nextTrove, _price) < MCR;\\n\\t}\\n\\n\\t/* Send _amount PAI to the system and redeem the corresponding amount of collateral from as many Troves as are needed to fill the redemption\\n\\t * request.  Applies pending rewards to a Trove before reducing its debt and coll.\\n\\t *\\n\\t * Note that if _amount is very large, this function can run out of gas, specially if traversed troves are small. This can be easily avoided by\\n\\t * splitting the total _amount in appropriate chunks and calling the function multiple times.\\n\\t *\\n\\t * Param `_maxIterations` can also be provided, so the loop through Troves is capped (if it\\u2019s zero, it will be ignored).This makes it easier to\\n\\t * avoid OOG for the frontend, as only knowing approximately the average cost of an iteration is enough, without needing to know the \\u201ctopology\\u201d\\n\\t * of the trove list. It also avoids the need to set the cap in stone in the contract, nor doing gas calculations, as both gas price and opcode\\n\\t * costs can vary.\\n\\t *\\n\\t * All Troves that are redeemed from -- with the likely exception of the last one -- will end up with no debt left, therefore they will be closed.\\n\\t * If the last Trove does have some remaining debt, it has a finite ICR, and the reinsertion could be anywhere in the list, therefore it requires a hint.\\n\\t * A frontend should use getRedemptionHints() to calculate what the ICR of this Trove will be after redemption, and pass a hint for its position\\n\\t * in the sortedTroves list along with the ICR value that the hint was found for.\\n\\t *\\n\\t * If another transaction modifies the list between calling getRedemptionHints() and passing the hints to redeemCollateral(), it\\n\\t * is very likely that the last (partially) redeemed Trove would end up with a different ICR than what the hint is for. In this case the\\n\\t * redemption will stop after the last completely redeemed Trove and the sender will keep the remaining PAI amount, which they can attempt\\n\\t * to redeem later.\\n\\t */\\n\\tfunction redeemCollateral(\\n\\t\\tuint256 _paiAmount,\\n\\t\\taddress _firstRedemptionHint,\\n\\t\\taddress _upperPartialRedemptionHint,\\n\\t\\taddress _lowerPartialRedemptionHint,\\n\\t\\tuint256 _partialRedemptionHintNICR,\\n\\t\\tuint256 _maxIterations,\\n\\t\\tuint256 _maxFeePercentage\\n\\t) external override {\\n\\t\\tRedemptionTotals memory totals;\\n\\n\\t\\t_requireValidMaxFeePercentage(_maxFeePercentage);\\n\\t\\t_requireAfterBootstrapPeriod();\\n\\n\\t\\ttotals.price = priceFeed().fetchPrice();\\n\\n\\t\\t_requireTCRoverMCR(totals.price);\\n\\t\\t_requireAmountGreaterThanZero(_paiAmount);\\n\\t\\t_requirePAIBalanceCoversRedemption(msg.sender, _paiAmount);\\n\\n\\t\\ttotals.totalPAISupplyAtStart = getEntireSystemDebt();\\n\\n\\t\\t// Confirm redeemer's balance is less than total PAI supply\\n\\t\\tassert(paiToken().balanceOf(msg.sender) <= totals.totalPAISupplyAtStart);\\n\\n\\t\\ttotals.remainingPAI = _paiAmount;\\n\\t\\taddress currentBorrower;\\n\\n\\t\\tif (_isValidFirstRedemptionHint(_firstRedemptionHint, totals.price)) {\\n\\t\\t\\tcurrentBorrower = _firstRedemptionHint;\\n\\t\\t} else {\\n\\t\\t\\tcurrentBorrower = sortedTroves().getLast();\\n\\n\\t\\t\\t// Find the first trove with ICR >= MCR\\n\\t\\t\\twhile (\\n\\t\\t\\t\\tcurrentBorrower != address(0) && getCurrentICR(currentBorrower, totals.price) < MCR\\n\\t\\t\\t) {\\n\\t\\t\\t\\tcurrentBorrower = sortedTroves().getPrev(currentBorrower);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Loop through the Troves starting from the one with lowest collateral ratio until _amount of PAI is exchanged for collateral\\n\\t\\tif (_maxIterations == 0) {\\n\\t\\t\\t_maxIterations = MAX_UINT;\\n\\t\\t}\\n\\t\\twhile (currentBorrower != address(0) && totals.remainingPAI > 0 && _maxIterations > 0) {\\n\\t\\t\\t_maxIterations--;\\n\\n\\t\\t\\t// Save the address of the Trove preceding the current one, before potentially modifying the list\\n\\t\\t\\taddress nextUserToCheck = sortedTroves().getPrev(currentBorrower);\\n\\n\\t\\t\\t_applyPendingRewards(currentBorrower);\\n\\n\\t\\t\\tSingleRedemptionValues memory singleRedemption = _redeemCollateralFromTrove(\\n\\t\\t\\t\\tcurrentBorrower,\\n\\t\\t\\t\\ttotals.remainingPAI,\\n\\t\\t\\t\\ttotals.price,\\n\\t\\t\\t\\t_upperPartialRedemptionHint,\\n\\t\\t\\t\\t_lowerPartialRedemptionHint,\\n\\t\\t\\t\\t_partialRedemptionHintNICR\\n\\t\\t\\t);\\n\\n\\t\\t\\tif (singleRedemption.cancelledPartial) break; // Partial redemption was cancelled (out-of-date hint, or new net debt < minimum), therefore we could not redeem from the last Trove\\n\\n\\t\\t\\ttotals.totalPAIToRedeem = totals.totalPAIToRedeem.add(singleRedemption.PAILot);\\n\\t\\t\\ttotals.totalGEMDrawn = totals.totalGEMDrawn.add(singleRedemption.GEMLot);\\n\\n\\t\\t\\ttotals.remainingPAI = totals.remainingPAI.sub(singleRedemption.PAILot);\\n\\t\\t\\tcurrentBorrower = nextUserToCheck;\\n\\t\\t}\\n\\t\\trequire(totals.totalGEMDrawn > 0, \\\"Vault: Unable to redeem any amount\\\");\\n\\n\\t\\t// Decay the baseRate due to time passed, and then increase it according to the size of this redemption.\\n\\t\\t// Use the saved total PAI supply value, from before it was reduced by the redemption.\\n\\t\\t_updateBaseRateFromRedemption(\\n\\t\\t\\ttotals.totalGEMDrawn,\\n\\t\\t\\ttotals.price,\\n\\t\\t\\ttotals.totalPAISupplyAtStart\\n\\t\\t);\\n\\n\\t\\t// Calculate the GEM fee\\n\\t\\ttotals.GEMFee = _getRedemptionFee(totals.totalGEMDrawn);\\n\\t\\t_requireUserAcceptsFee(totals.GEMFee, totals.totalGEMDrawn, _maxFeePercentage);\\n\\n\\t\\t// Send the GEM fee to the MYO staking contract\\n\\t\\tactivePool().transferFeeToStacking(totals.GEMFee);\\n\\t\\t// activePool().sendColl(address(myoStaking()), totals.GEMFee);\\n\\t\\t// myoStaking().increaseF_GEM(totals.GEMFee);\\n\\n\\t\\ttotals.GEMToSendToRedeemer = totals.totalGEMDrawn.sub(totals.GEMFee);\\n\\n\\t\\temit Redemption(_paiAmount, totals.totalPAIToRedeem, totals.totalGEMDrawn, totals.GEMFee);\\n\\n\\t\\t// Burn the total PAI that is cancelled with debt, and send the redeemed GEM to msg.sender\\n\\t\\tpaiToken().burn(msg.sender, totals.totalPAIToRedeem);\\n\\n\\t\\t// Update Active Pool PAI, and send GEM to account\\n\\t\\tactivePool().decreaseDebt(totals.totalGEMToRedeem);\\n\\t\\tactivePool().sendColl(msg.sender, totals.GEMToSendToRedeemer);\\n\\t}\\n\\n\\t// Internal Functions\\n\\t// ------------------\\n\\n\\tfunction _getCurrentTroveAmounts(address _borrower) internal view returns (uint256, uint256) {\\n\\t\\tuint256 pendingCollReward = getPendingCollReward(_borrower);\\n\\t\\tuint256 pendingDebtReward = getPendingDebtReward(_borrower);\\n\\n\\t\\tuint256 currentColl = Troves[_borrower].coll.add(pendingCollReward);\\n\\t\\tuint256 currentDebt = Troves[_borrower].debt.add(pendingDebtReward);\\n\\n\\t\\treturn (currentColl, currentDebt);\\n\\t}\\n\\n\\t// Require Wrappers\\n\\t// ----------------\\n\\n\\tfunction _requireCallerIsBorrowerOperations() internal view {\\n\\t\\trequire(\\n\\t\\t\\tmsg.sender == address(borrowerOperations()),\\n\\t\\t\\t\\\"Vault: Caller must be BorrowerOperations\\\"\\n\\t\\t);\\n\\t}\\n\\n\\t// function _requireGasCompCollateralOrZero(uint256 _collateral) internal pure {\\n\\t// \\trequire(\\n\\t// \\t\\t_collateral == 0 || _collateral >= DAI_GAS_COMPENSATION,\\n\\t// \\t\\t\\\"Vault: Minimum collateral must be zero or Gas Comp\\\"\\n\\t// \\t);\\n\\t// }\\n\\n\\tfunction _requirePAIBalanceCoversRedemption(address _redeemer, uint256 _amount) internal view {\\n\\t\\trequire(\\n\\t\\t\\tpaiToken().balanceOf(_redeemer) >= _amount,\\n\\t\\t\\t\\\"Vault: Requested redemption amount must be <= user's PAI token balance\\\"\\n\\t\\t);\\n\\t}\\n\\n\\tfunction _requireAmountGreaterThanZero(uint256 _amount) internal pure {\\n\\t\\trequire(_amount > 0, \\\"Vault: Amount must be greater than zero\\\");\\n\\t}\\n\\n\\tfunction _requireTCRoverMCR(uint256 _price) internal view {\\n\\t\\trequire(_getTCR(_price) >= MCR, \\\"Vault: Cannot redeem when TCR < MCR\\\");\\n\\t}\\n\\n\\tfunction _requireAfterBootstrapPeriod() internal view {\\n\\t\\tuint256 systemDeploymentTime = myoToken().getDeploymentStartTime();\\n\\t\\trequire(\\n\\t\\t\\tblock.timestamp >= systemDeploymentTime.add(BOOTSTRAP_PERIOD), // solhint-disable-line not-rely-on-time\\n\\t\\t\\t\\\"Vault: Redemptions are not allowed during bootstrap phase\\\"\\n\\t\\t);\\n\\t}\\n\\n\\tfunction _requireValidMaxFeePercentage(uint256 _maxFeePercentage) internal pure {\\n\\t\\trequire(\\n\\t\\t\\t_maxFeePercentage >= REDEMPTION_FEE_FLOOR && _maxFeePercentage <= DECIMAL_PRECISION,\\n\\t\\t\\t\\\"Vault: Max fee percentage must be between 0.5% and 100%\\\"\\n\\t\\t);\\n\\t}\\n\\n\\tfunction _requireMoreThanOneTroveInSystem(uint256 TroveOwnersArrayLength) internal view {\\n\\t\\trequire(\\n\\t\\t\\tTroveOwnersArrayLength > 1 && sortedTroves().getSize() > 1,\\n\\t\\t\\t\\\"Vault: Only one trove in the system\\\"\\n\\t\\t);\\n\\t}\\n\\n\\tfunction _requireNoNegativeTroveColl(address _borrower, uint256 _collDecrease) internal view {\\n\\t\\trequire(\\n\\t\\t\\t_collDecrease <= Troves[_borrower].coll,\\n\\t\\t\\t\\\"Vault: Collateral decrease can't be grater than trove's balance\\\"\\n\\t\\t);\\n\\t}\\n\\n\\tfunction _requireNoNegativeTroveDebt(address _borrower, uint256 _debtDecrease) internal view {\\n\\t\\trequire(\\n\\t\\t\\t_debtDecrease <= Troves[_borrower].debt,\\n\\t\\t\\t\\\"Vault: Debt decrease can't be grater than trove's debt balance\\\"\\n\\t\\t);\\n\\t}\\n\\n\\tfunction _requireNewICRisAboveOldICR(uint256 _newICR, uint256 _oldICR) internal pure {\\n\\t\\trequire(_newICR >= _oldICR, \\\"Vault: Cannot decrease your Trove's ICR in Recovery Mode\\\");\\n\\t}\\n\\n\\tfunction _requireNonZeroAdjustment(uint256 _collChange, uint256 _debtChange) internal pure {\\n\\t\\trequire(\\n\\t\\t\\t_collChange != 0 || _debtChange != 0,\\n\\t\\t\\t\\\"Vault: There must be either a collateral change or a debt change\\\"\\n\\t\\t);\\n\\t}\\n\\n\\tfunction _requireisNotActiveTrove(address _borrower) internal view {\\n\\t\\trequire(Troves[_borrower].status != TroveStatus.active, \\\"Vault: Trove must not be active\\\");\\n\\t}\\n\\n\\tfunction _requireActiveTrove(address _borrower) internal view {\\n\\t\\trequire(Troves[_borrower].status == TroveStatus.active, \\\"Vault: Trove must be active\\\");\\n\\t}\\n\\n\\tfunction _requireICRisAboveMCR(uint256 _newICR) internal pure {\\n\\t\\trequire(\\n\\t\\t\\t_newICR >= MCR,\\n\\t\\t\\t\\\"Vault: An operation that would result in ICR < MCR is not permitted\\\"\\n\\t\\t);\\n\\t}\\n\\n\\tfunction _requireICRisAboveCCR(uint256 _newICR) internal pure {\\n\\t\\trequire(_newICR >= CCR, \\\"Vault: Operation must leave trove with ICR >= CCR\\\");\\n\\t}\\n\\n\\tfunction _requireNewTCRisAboveCCR(uint256 _newTCR) internal pure {\\n\\t\\trequire(\\n\\t\\t\\t_newTCR >= CCR,\\n\\t\\t\\t\\\"Vault: An operation that would result in TCR < CCR is not permitted\\\"\\n\\t\\t);\\n\\t}\\n}\\n\",\"keccak256\":\"0x05a8621579e13e99ce7efab9981a7253e450d17047b331eaa3bb4d2e7981938d\",\"license\":\"MIT\"},\"contracts/dependencies/BaseMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nlibrary BaseMath {\\n\\tusing SafeMath for uint256;\\n\\n\\tuint256 internal constant DECIMAL_PRECISION = 1e18;\\n\\n\\t/* Precision for Nominal ICR (independent of price). Rationale for the value:\\n\\t *\\n\\t * - Making it \\u201ctoo high\\u201d could lead to overflows.\\n\\t * - Making it \\u201ctoo low\\u201d could lead to an ICR equal to zero, due to truncation from Solidity floor division.\\n\\t *\\n\\t * This value of 1e20 is chosen for safety: the NICR will only overflow for numerator > ~1e39 ETH,\\n\\t * and will only truncate to 0 if the denominator is at least 1e20 times greater than the numerator.\\n\\t *\\n\\t */\\n\\tuint256 internal constant NICR_PRECISION = 1e20;\\n\\n\\tfunction _min(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n\\t\\treturn (_a < _b) ? _a : _b;\\n\\t}\\n\\n\\tfunction _max(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n\\t\\treturn (_a >= _b) ? _a : _b;\\n\\t}\\n\\n\\t/*\\n\\t * Multiply two decimal numbers and use normal rounding rules:\\n\\t * -round product up if 19'th mantissa digit >= 5\\n\\t * -round product down if 19'th mantissa digit < 5\\n\\t *\\n\\t * Used only inside the exponentiation, _decPow().\\n\\t */\\n\\tfunction decMul(uint256 x, uint256 y) internal pure returns (uint256 decProd) {\\n\\t\\tuint256 prod_xy = x.mul(y);\\n\\n\\t\\tdecProd = prod_xy.add(DECIMAL_PRECISION / 2).div(DECIMAL_PRECISION);\\n\\t}\\n\\n\\t/*\\n\\t * _decPow: Exponentiation function for 18-digit decimal base, and integer exponent n.\\n\\t *\\n\\t * Uses the efficient \\\"exponentiation by squaring\\\" algorithm. O(log(n)) complexity.\\n\\t *\\n\\t * Called by two functions that represent time in units of minutes:\\n\\t * 1) TroveManager._calcDecayedBaseRate\\n\\t * 2) CommunityIssuance._getCumulativeIssuanceFraction\\n\\t *\\n\\t * The exponent is capped to avoid reverting due to overflow. The cap 525600000 equals\\n\\t * \\\"minutes in 1000 years\\\": 60 * 24 * 365 * 1000\\n\\t *\\n\\t * If a period of > 1000 years is ever used as an exponent in either of the above functions, the result will be\\n\\t * negligibly different from just passing the cap, since:\\n\\t *\\n\\t * In function 1), the decayed base rate will be 0 for 1000 years or > 1000 years\\n\\t * In function 2), the difference in tokens issued at 1000 years and any time > 1000 years, will be negligible\\n\\t */\\n\\tfunction _decPow(uint256 _base, uint256 _minutes) internal pure returns (uint256) {\\n\\t\\tif (_minutes > 525600000) {\\n\\t\\t\\t_minutes = 525600000;\\n\\t\\t} // cap to avoid overflow\\n\\n\\t\\tif (_minutes == 0) {\\n\\t\\t\\treturn DECIMAL_PRECISION;\\n\\t\\t}\\n\\n\\t\\tuint256 y = DECIMAL_PRECISION;\\n\\t\\tuint256 x = _base;\\n\\t\\tuint256 n = _minutes;\\n\\n\\t\\t// Exponentiation-by-squaring\\n\\t\\twhile (n > 1) {\\n\\t\\t\\tif (n % 2 == 0) {\\n\\t\\t\\t\\tx = decMul(x, x);\\n\\t\\t\\t\\tn = n.div(2);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t// if (n % 2 != 0)\\n\\t\\t\\t\\ty = decMul(x, y);\\n\\t\\t\\t\\tx = decMul(x, x);\\n\\t\\t\\t\\tn = (n.sub(1)).div(2);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn decMul(x, y);\\n\\t}\\n\\n\\tfunction _getAbsoluteDifference(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n\\t\\treturn (_a >= _b) ? _a.sub(_b) : _b.sub(_a);\\n\\t}\\n\\n\\tfunction _computeNominalCR(uint256 _coll, uint256 _debt) internal pure returns (uint256) {\\n\\t\\tif (_debt > 0) {\\n\\t\\t\\treturn _coll.mul(NICR_PRECISION).div(_debt);\\n\\t\\t}\\n\\t\\t// Return the maximal value for uint256 if the Trove has a debt of 0. Represents \\\"infinite\\\" CR.\\n\\t\\telse {\\n\\t\\t\\t// if (_debt == 0)\\n\\t\\t\\treturn 2**256 - 1;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _computeCR(\\n\\t\\tuint256 _coll,\\n\\t\\tuint256 _debt,\\n\\t\\tuint256 _price\\n\\t) internal pure returns (uint256) {\\n\\t\\tif (_debt > 0) {\\n\\t\\t\\tuint256 newCollRatio = _coll.mul(_price).div(_debt);\\n\\t\\t\\treturn newCollRatio;\\n\\t\\t}\\n\\t\\t// Return the maximal value for uint256 if the Trove has a debt of 0. Represents \\\"infinite\\\" CR.\\n\\t\\telse {\\n\\t\\t\\t// if (_debt == 0)\\n\\t\\t\\treturn 2**256 - 1;\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x285eace200a08f5136b406fe3051fafc95e56550e7df16a346670c939b61122d\",\"license\":\"MIT\"},\"contracts/dependencies/CheckContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\ncontract CheckContract {\\n\\t/**\\n\\t * Check that the account is an already deployed non-destroyed contract.\\n\\t * See: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol#L12\\n\\t */\\n\\tfunction checkContract(address _account) internal view {\\n\\t\\trequire(_account != address(0), \\\"Account cannot be zero address\\\");\\n\\n\\t\\tuint256 size;\\n\\t\\t// solhint-disable-next-line no-inline-assembly\\n\\t\\tassembly {\\n\\t\\t\\tsize := extcodesize(_account)\\n\\t\\t}\\n\\t\\trequire(size > 0, \\\"Account code size cannot be zero\\\");\\n\\t}\\n}\\n\",\"keccak256\":\"0xb5cb7705e2af49e9ad0be340e8fd106a5bf928fd834ae7e4d22d8c6db17e7844\",\"license\":\"MIT\"},\"contracts/dependencies/Constants.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\ncontract Constants {\\n\\tusing SafeMath for uint256;\\n\\n\\tuint256 public constant DECIMAL_PRECISION = 1e18;\\n\\n\\tuint256 public constant SECONDS_IN_ONE_MINUTE = 60;\\n\\n\\t// uint256 public constant _100pct = 1000000000000000000; // 1e18 == 100%\\n\\n\\t// Minimum collateral ratio for individual troves\\n\\tuint256 public constant MCR = 1100000000000000000; // 110%\\n\\n\\t// Critical system collateral ratio. If the system's total collateral ratio (TCR) falls below the CCR, Recovery Mode is triggered.\\n\\tuint256 public constant CCR = 1500000000000000000; // 150%\\n\\n\\t// Amount of DAI to be locked in gas pool on opening troves\\n\\tuint256 public constant DAI_GAS_COMPENSATION = 200e16; // 2.00\\n\\n\\t// Minimum amount of net PAI debt a trove must have\\n\\tuint256 public constant MIN_NET_DEBT = 1800e18;\\n\\n\\tuint256 public constant HALF_PERCENT_DIVISOR = 200; // dividing by 200 yields 0.5%\\n\\n\\tuint256 public constant BORROWING_FEE_FLOOR = (DECIMAL_PRECISION / 1000) * 5; // 0.005% (1e18 == 100%)\\n\\n\\t// During bootsrap period redemptions are not allowed\\n\\tuint256 public constant BOOTSTRAP_PERIOD = 14 days;\\n\\n\\t// MAX UINT256\\n\\tuint256 public MAX_UINT = 2**256 - 1;\\n}\\n\",\"keccak256\":\"0xdcdd9a915df81cc087e0f7e36af33bc16f927f9690ca6216ab0656ead92b823e\",\"license\":\"MIT\"},\"contracts/interfaces/IActivePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\ninterface IActivePool {\\n\\t// --- Events ---\\n\\tevent ActivePoolDebtUpdated(uint256 _debt);\\n\\tevent ActivePoolCollUpdated(uint256 _coll);\\n\\tevent ActivePoolgasCompensationBalanceUpdated(uint256 gasBalance);\\n\\n\\t// --- Functions ---\\n\\n\\tfunction getColl() external view returns (uint256);\\n\\n\\tfunction getDebt() external view returns (uint256);\\n\\n\\tfunction getGasCompensationBalance() external view returns (uint256);\\n\\n\\tfunction receiveColl(address sender, uint256 _amount) external returns (bool);\\n\\n\\tfunction sendColl(address _account, uint256 _amount) external;\\n\\n\\tfunction increaseDebt(uint256 _amount) external;\\n\\n\\tfunction decreaseDebt(uint256 _amount) external;\\n\\n\\tfunction transferFeeToStacking(uint256 _amount) external;\\n\\n\\tfunction sendGasCompensation(address _account) external;\\n\\n\\tfunction increaseGasCompensationBalance() external;\\n\\n\\tfunction decreaseGasCompensationBalance() external;\\n}\\n\",\"keccak256\":\"0x076c1e5eab0ec84bf88ac69e44b4eb7efe0ec739b4bcd4c0e2179dde69384d74\",\"license\":\"MIT\"},\"contracts/interfaces/IBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\ninterface IBase {\\n\\tenum TroveOperation {\\n\\t\\tapplyPendingRewards,\\n\\t\\tliquidateInNormalMode,\\n\\t\\tliquidateInRecoveryMode,\\n\\t\\tredeemCollateral\\n\\t}\\n\\n\\tenum TroveStatus {\\n\\t\\tnonExistent,\\n\\t\\tactive,\\n\\t\\tclosedByOwner,\\n\\t\\tclosedByLiquidation,\\n\\t\\tclosedByRedemption\\n\\t}\\n}\\n\",\"keccak256\":\"0xe5c93a5a6eb11be0dda687ba8d5a5399d1e395f8fd63a590cfd1f60d165de33b\",\"license\":\"MIT\"},\"contracts/interfaces/IBorrowerOperations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\n// Common interface for the Trove Manager.\\ninterface IBorrowerOperations {\\n\\t// --- Events ---\\n\\n\\tevent TroveCreated(address indexed _borrower, uint256 arrayIndex);\\n\\tevent TroveUpdated(\\n\\t\\taddress indexed _borrower,\\n\\t\\tuint256 _debt,\\n\\t\\tuint256 _coll,\\n\\t\\tuint256 stake,\\n\\t\\tuint256 _borrowingFee,\\n\\t\\tuint8 operation\\n\\t);\\n\\n\\tevent BorrowingFeePaid(address indexed _borrower, uint256 _Fee);\\n\\n\\t// --- Functions ---\\n\\n\\tfunction openTrove(\\n\\t\\tuint256 _maxFee,\\n\\t\\tuint256 _debt,\\n\\t\\tuint256 _coll,\\n\\t\\taddress _upperHint,\\n\\t\\taddress _lowerHint\\n\\t) external;\\n\\n\\tfunction addColl(\\n\\t\\tuint256 _coll,\\n\\t\\taddress _upperHint,\\n\\t\\taddress _lowerHint\\n\\t) external;\\n\\n\\tfunction withdrawColl(\\n\\t\\tuint256 _coll,\\n\\t\\taddress _upperHint,\\n\\t\\taddress _lowerHint\\n\\t) external;\\n\\n\\tfunction withdrawPAI(\\n\\t\\tuint256 _maxFee,\\n\\t\\tuint256 _amount,\\n\\t\\taddress _upperHint,\\n\\t\\taddress _lowerHint\\n\\t) external;\\n\\n\\tfunction repayPAI(\\n\\t\\tuint256 _amount,\\n\\t\\taddress _upperHint,\\n\\t\\taddress _lowerHint\\n\\t) external;\\n\\n\\tfunction closeTrove() external;\\n\\n\\tfunction adjustTrove(\\n\\t\\tuint256 _collChange,\\n\\t\\tbool _isCollIncrease,\\n\\t\\tuint256 _debtChange,\\n\\t\\tbool _isDebtIncrease,\\n\\t\\taddress _upperHint,\\n\\t\\taddress _lowerHint,\\n\\t\\tuint256 _maxFeePercentage\\n\\t) external;\\n\\n\\tfunction claimCollateral() external;\\n}\\n\",\"keccak256\":\"0x2adf8d06d3469b27c19f86dc54c89a9ffd542cf3f2ace19eab8925cdbfe9aee8\",\"license\":\"MIT\"},\"contracts/interfaces/ICollSurplusPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface ICollSurplusPool {\\n\\t// --- Events ---\\n\\n\\tevent CollBalanceUpdated(address indexed _account, uint256 _newBalance);\\n\\tevent CollSent(address _to, uint256 _amount);\\n\\n\\tfunction getColl() external view returns (uint256);\\n\\n\\tfunction getCollateral(address _account) external view returns (uint256);\\n\\n\\tfunction accountSurplus(address _account, uint256 _amount) external;\\n\\n\\tfunction claimColl(address _account) external;\\n}\\n\",\"keccak256\":\"0x305dde14e343334510b9283c9c49d2c5aa1525ef4eae6ea3906797561a9bfbb9\",\"license\":\"MIT\"},\"contracts/interfaces/ICore.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.3;\\n\\nimport \\\"./IVault.sol\\\";\\nimport \\\"./IMYOStaking.sol\\\";\\nimport \\\"../interfaces/IMYOToken.sol\\\";\\nimport \\\"../interfaces/IPAIToken.sol\\\";\\nimport \\\"../interfaces/ISortedTroves.sol\\\";\\nimport \\\"../interfaces/IPriceFeed.sol\\\";\\nimport \\\"../interfaces/IActivePool.sol\\\";\\nimport \\\"../interfaces/IDefaultPool.sol\\\";\\nimport \\\"../interfaces/ICollSurplusPool.sol\\\";\\nimport \\\"../interfaces/IBorrowerOperations.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ICore {\\n\\t// Tokens\\n\\tfunction gemToken() external view returns (IERC20);\\n\\n\\tfunction paiToken() external view returns (IPAIToken);\\n\\n\\tfunction myoToken() external view returns (IMYOToken);\\n\\n\\t// Core Contracts\\n\\n\\tfunction sortedTroves() external view returns (ISortedTroves);\\n\\n\\tfunction vault() external view returns (IVault);\\n\\n\\tfunction myoStaking() external view returns (IMYOStaking);\\n\\n\\tfunction priceFeed() external view returns (IPriceFeed);\\n\\n\\tfunction activePool() external view returns (IActivePool);\\n\\n\\tfunction collSurplusPool() external view returns (ICollSurplusPool);\\n\\n\\tfunction defaultPool() external view returns (IDefaultPool);\\n\\n\\tfunction borrowerOperations() external view returns (IBorrowerOperations);\\n\\n\\t// Setter\\n\\n\\tfunction setAddresses(\\n\\t\\taddress _gemTokenAddress,\\n\\t\\taddress _paiTokenAddress,\\n\\t\\taddress _myoTokenAddress,\\n\\t\\taddress _sortedTrovesAddress,\\n\\t\\taddress _vaultAddress,\\n\\t\\taddress _myoStakingAddress,\\n\\t\\taddress _priceFeedAddress,\\n\\t\\taddress _activePoolAddress,\\n\\t\\taddress _defaultPoolAddress,\\n\\t\\taddress _collSurplusPoolAddress,\\n\\t\\taddress _borrowerOperationsAddress\\n\\t) external;\\n}\\n\",\"keccak256\":\"0x0a7eacf11f0e0f41669dd4d87dad5718180f19e026881ba6e3e00a87b8df3dec\",\"license\":\"Unlicense\"},\"contracts/interfaces/IDefaultPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface IDefaultPool {\\n\\t// --- Events ---\\n\\tevent GemSent(address _recipient, uint256 _amount);\\n\\tevent DefaultPoolCollBalanceUpdated(uint256 _amount);\\n\\tevent DefaultPoolDebtBalanceUpdated(uint256 _debt);\\n\\n\\t// --- Functions ---\\n\\n\\tfunction getColl() external view returns (uint256);\\n\\n\\tfunction getDebt() external view returns (uint256);\\n\\n\\tfunction increaseDebt(uint256 _amount) external;\\n\\n\\tfunction decreaseDebt(uint256 _amount) external;\\n\\n\\tfunction receiveColl(uint256 _amount) external returns (bool);\\n\\n\\tfunction sendCollToActivePool(uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x5e5936d6e59a5060f9f268b6088d557876eba26c8583191b45f7378d4a509110\",\"license\":\"MIT\"},\"contracts/interfaces/IMYOStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface IMYOStaking {\\n\\tfunction stake(uint256 _MYOamount) external;\\n\\n\\tfunction unstake(uint256 _MYOamount) external;\\n\\n\\tfunction increaseF_GEM(uint256 _GEMFee) external;\\n\\n\\tfunction increaseF_PAI(uint256 _PAIFee) external;\\n\\n\\tfunction getPendingGEMGain(address _user) external view returns (uint256);\\n\\n\\tfunction getPendingPAIGain(address _user) external view returns (uint256);\\n\\n\\tfunction getAccruedGEMFees() external view returns (uint256);\\n\\n\\tfunction getAccruedPAIFees() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa79b5abd952be6a7688ddbf9f7ed8c08345c68deae82db27aecbc513a8c87024\",\"license\":\"MIT\"},\"contracts/interfaces/IMYOToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IMYOToken is IERC20, IERC20Permit, IERC20Metadata {\\n\\t// --- Events ---\\n\\n\\tevent CommunityIssuanceAddressSet(address _communityIssuanceAddress);\\n\\tevent MYOStakingAddressSet(address _myoStakingAddress);\\n\\tevent LockupContractFactoryAddressSet(address _lockupContractFactoryAddress);\\n\\n\\t// --- Functions ---\\n\\n\\tfunction sendToMYOStaking(address _sender, uint256 _amount) external;\\n\\n\\tfunction getDeploymentStartTime() external view returns (uint256);\\n\\n\\tfunction getLpRewardsEntitlement() external view returns (uint256);\\n\\n\\tfunction increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\n\\n\\tfunction decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\n\\n\\tfunction permitTypeHash() external view returns (bytes32);\\n\\n\\tfunction version() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6f53194956e4c49c701a27fab9e30b67df4fb7ae10b8b1110ffc51f983cc0ac2\",\"license\":\"MIT\"},\"contracts/interfaces/IPAIToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IPAIToken is IERC20, IERC20Permit, IERC20Metadata {\\n\\t// --- Events ---\\n\\n\\tevent PAITokenBalanceUpdated(address _user, uint256 _amount);\\n\\n\\t// --- Functions ---\\n\\n\\tfunction mint(address _account, uint256 _amount) external;\\n\\n\\tfunction burn(address _account, uint256 _amount) external;\\n\\n\\t// function sendToPool(\\n\\t// \\taddress _sender,\\n\\t// \\taddress poolAddress,\\n\\t// \\tuint256 _amount\\n\\t// ) external;\\n\\n\\t// function returnFromPool(\\n\\t// \\taddress poolAddress,\\n\\t// \\taddress user,\\n\\t// \\tuint256 _amount\\n\\t// ) external;\\n\\n\\tfunction increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\n\\n\\tfunction decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\n\\n\\tfunction permitTypeHash() external view returns (bytes32);\\n\\n\\tfunction version() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x3312daa10e22922f96ea5015f6a4efdf9fb00b4d9c1bfebf7bf7315a22699840\",\"license\":\"MIT\"},\"contracts/interfaces/IPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\ninterface IPriceFeed {\\n\\t// --- Events ---j\\n\\tevent LastGoodPriceUpdated(uint256 _lastGoodPrice);\\n\\n\\t// --- Function ---\\n\\tfunction fetchPrice() external returns (uint256);\\n}\\n\",\"keccak256\":\"0xfb8dd85ba5db55006bdc28c5102b88581a8ac106c06b01ef538d1204ac0736dd\",\"license\":\"MIT\"},\"contracts/interfaces/ISortedTroves.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\n// Common interface for the SortedTroves Doubly Linked List.\\ninterface ISortedTroves {\\n\\t// --- Events ---\\n\\n\\tevent BorrowerOperationsAddressChanged(address _borrowerOperationsAddress);\\n\\tevent VaultAddressChanged(address _vaultAddress);\\n\\tevent NodeAdded(address _id, uint256 _NICR);\\n\\tevent NodeRemoved(address _id);\\n\\n\\t// --- Functions ---\\n\\n\\tfunction setParams(\\n\\t\\tuint256 _size,\\n\\t\\taddress _vaultAddress,\\n\\t\\taddress _borrowerOperationsAddress\\n\\t) external;\\n\\n\\tfunction insert(\\n\\t\\taddress _id,\\n\\t\\tuint256 _ICR,\\n\\t\\taddress _prevId,\\n\\t\\taddress _nextId\\n\\t) external;\\n\\n\\tfunction remove(address _id) external;\\n\\n\\tfunction reInsert(\\n\\t\\taddress _id,\\n\\t\\tuint256 _newICR,\\n\\t\\taddress _prevId,\\n\\t\\taddress _nextId\\n\\t) external;\\n\\n\\tfunction contains(address _id) external view returns (bool);\\n\\n\\tfunction isFull() external view returns (bool);\\n\\n\\tfunction isEmpty() external view returns (bool);\\n\\n\\tfunction getSize() external view returns (uint256);\\n\\n\\tfunction getMaxSize() external view returns (uint256);\\n\\n\\tfunction getFirst() external view returns (address);\\n\\n\\tfunction getLast() external view returns (address);\\n\\n\\tfunction getNext(address _id) external view returns (address);\\n\\n\\tfunction getPrev(address _id) external view returns (address);\\n\\n\\tfunction validInsertPosition(\\n\\t\\tuint256 _ICR,\\n\\t\\taddress _prevId,\\n\\t\\taddress _nextId\\n\\t) external view returns (bool);\\n\\n\\tfunction findInsertPosition(\\n\\t\\tuint256 _ICR,\\n\\t\\taddress _prevId,\\n\\t\\taddress _nextId\\n\\t) external view returns (address, address);\\n}\\n\",\"keccak256\":\"0xcbd1ed4f5291ae6801e526e3bd6eabf8776009e511aab81e5bf74a51a426ce6b\",\"license\":\"MIT\"},\"contracts/interfaces/IVault.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.3;\\n\\nimport \\\"./IBase.sol\\\";\\n\\ninterface IVault is IBase {\\n\\t// --- Events ---\\n\\n\\tevent TroveUpdated(\\n\\t\\taddress indexed _borrower,\\n\\t\\tuint256 _debt,\\n\\t\\tuint256 _coll,\\n\\t\\tuint256 _borrowingFee,\\n\\t\\tuint256 _stake,\\n\\t\\tTroveOperation _operation\\n\\t);\\n\\tevent TotalStakesUpdated(uint256 _newTotalStakes);\\n\\tevent TroveSnapshotsUpdated(uint256 _L_Coll, uint256 _L_Debt);\\n\\n\\tevent BaseRateUpdated(uint256 _baseRate);\\n\\tevent LastFeeOpTimeUpdated(uint256 _lastFeeOpTime);\\n\\n\\tevent Liquidation(uint256 _liquidatedDebt, uint256 _liquidatedColl, uint256 _gasCompensation);\\n\\tevent Redemption(\\n\\t\\tuint256 _attemptedPAIAmount,\\n\\t\\tuint256 _actualPAIAmount,\\n\\t\\tuint256 _collSent,\\n\\t\\tuint256 _collFee\\n\\t);\\n\\tevent TroveLiquidated(address indexed _borrower, uint256 _debt, uint256 _coll, uint8 operation);\\n\\tevent SystemSnapshotsUpdated(uint256 _totalStakesSnapshot, uint256 _totalCollateralSnapshot);\\n\\tevent LTermsUpdated(uint256 _L_Coll, uint256 _L_Debt);\\n\\tevent TroveIndexUpdated(address _borrower, uint256 _newIndex);\\n\\n\\tfunction baseRate() external view returns (uint256);\\n\\n\\t// Borrowing Fee Functions\\n\\n\\tfunction getTroveOwnersCount() external view returns (uint256);\\n\\n\\tfunction getTroveFromTroveOwnersArray(uint256 _index) external view returns (address);\\n\\n\\t// Collateralization Ratios\\n\\tfunction getNominalICR(address _borrower) external view returns (uint256);\\n\\n\\tfunction getCurrentICR(address _borrower, uint256 _price) external view returns (uint256);\\n\\n\\tfunction getTCR(uint256 _price) external view returns (uint256);\\n\\n\\t// Liquidations\\n\\tfunction liquidate(address _borrower) external;\\n\\n\\tfunction liquidateTroves(uint256 _n) external;\\n\\n\\tfunction batchLiquidateTroves(address[] calldata _troveArray) external;\\n\\n\\tfunction redeemCollateral(\\n\\t\\tuint256 _paiAmount,\\n\\t\\taddress _firstRedemptionHint,\\n\\t\\taddress _upperPartialRedemptionHint,\\n\\t\\taddress _lowerPartialRedemptionHint,\\n\\t\\tuint256 _partialRedemptionHintNICR,\\n\\t\\tuint256 _maxIterations,\\n\\t\\tuint256 _maxFee\\n\\t) external;\\n\\n\\tfunction updateStakeAndTotalStakes(address _borrower) external returns (uint256);\\n\\n\\tfunction updateTroveRewardSnapshots(address _borrower) external;\\n\\n\\tfunction addTroveOwnerToArray(address _borrower) external returns (uint256 index);\\n\\n\\tfunction applyPendingRewards(address _borrower) external;\\n\\n\\tfunction getPendingCollReward(address _borrower) external view returns (uint256);\\n\\n\\tfunction getPendingDebtReward(address _borrower) external view returns (uint256);\\n\\n\\tfunction hasPendingRewards(address _borrower) external view returns (bool);\\n\\n\\tfunction getEntireDebtAndColl(address _borrower)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint256 debt,\\n\\t\\t\\tuint256 coll,\\n\\t\\t\\tuint256 pendingDebtReward,\\n\\t\\t\\tuint256 pendingCollReward\\n\\t\\t);\\n\\n\\tfunction closeTrove(address _borrower) external;\\n\\n\\tfunction removeStake(address _borrower) external;\\n\\n\\t// Borrowing and Redemption Fees\\n\\n\\tfunction getRedemptionRate() external view returns (uint256);\\n\\n\\tfunction getRedemptionRateWithDecay() external view returns (uint256);\\n\\n\\tfunction getRedemptionFeeWithDecay(uint256 _collDrawn) external view returns (uint256);\\n\\n\\tfunction getBorrowingRate() external view returns (uint256);\\n\\n\\tfunction getBorrowingRateWithDecay() external view returns (uint256);\\n\\n\\tfunction getBorrowingFee(uint256 _debt, uint256 _price) external view returns (uint256);\\n\\n\\tfunction getBorrowingFeeWithDecay(uint256 _debt, uint256 _price)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256);\\n\\n\\tfunction decayBaseRateFromBorrowing() external;\\n\\n\\t// Trove Management\\n\\tfunction increaseTroveColl(address _borrower, uint256 _collIncrease) external returns (uint256);\\n\\n\\tfunction decreaseTroveColl(address _borrower, uint256 _collDecrease) external returns (uint256);\\n\\n\\tfunction increaseTroveDebt(address _borrower, uint256 _debtIncrease) external returns (uint256);\\n\\n\\tfunction decreaseTroveDebt(address _borrower, uint256 _debtDecrease) external returns (uint256);\\n\\n\\tfunction setTroveStatus(address _borrower, uint256 _num) external;\\n\\n\\tfunction getTroveStatus(address _borrower) external view returns (TroveStatus);\\n\\n\\tfunction getTroveStake(address _borrower) external view returns (uint256);\\n\\n\\tfunction getTroveDebt(address _borrower) external view returns (uint256);\\n\\n\\tfunction getTroveColl(address _borrower) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x56b260112539fd68925ae0d21ee16698d05bea325f6316305cf650b48aad35a9\",\"license\":\"Unlicense\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040526000196000553480156200001757600080fd5b5060405162004de438038062004de48339810160408190526200003a916200010e565b8062000046816200005d565b60601b6001600160601b031916608052506200013e565b6001600160a01b038116620000b95760405162461bcd60e51b815260206004820152601e60248201527f4163636f756e742063616e6e6f74206265207a65726f2061646472657373000060448201526064015b60405180910390fd5b803b806200010a5760405162461bcd60e51b815260206004820181905260248201527f4163636f756e7420636f64652073697a652063616e6e6f74206265207a65726f6044820152606401620000b0565b5050565b60006020828403121562000120578081fd5b81516001600160a01b038116811462000137578182fd5b9392505050565b60805160601c614c3a620001aa600039600081816108fe01528181610da2015281816110970152818161111c015281816112810152818161144d015281816114a801528181611cc401528181611f3501528181611fc801528181612034015261208f0152614c3a6000f3fe608060405234801561001057600080fd5b50600436106104145760003560e01c8063887105d311610221578063d1149b851161012b578063e2d8ef8d116100c3578063f92d343311610087578063f92d343314610537578063fbfa77cf1461093b578063fe2ba84814610943578063ff2fb57c14610956578063fff298df1461095e57610414565b8063e2d8ef8d146108e8578063e5b5019a146108f0578063f2f4eb26146108f9578063f36b242514610920578063f59fac2d1461092857610414565b8063d1149b8514610825578063d293c71014610838578063d380a37c1461084b578063d3c2f3c114610854578063d3d6f84314610863578063d5b3563514610876578063d66a255314610889578063d9a72444146108b2578063e2ac77b0146108c557610414565b8063b0d8e181116101b9578063c35bc5501161017d578063c35bc550146107e9578063c52861f2146107f3578063c7b55481146107fb578063cbd138ae1461080a578063cda775f91461081d57610414565b8063b0d8e18114610774578063b82f263d14610787578063b91af97c1461079a578063bcd37526146107cd578063bf9befb1146107e057610414565b8063887105d31461070d57806389a8872f14610715578063915713841461071d57806396d711ff146107305780639976cf45146107395780639e8ef3901461074c5780639ed7254214610754578063a20baee61461075d578063ae9187541461076c57610414565b80635733d58f116103225780636ef64338116102ba578063794e57241161027e578063794e5724146106d2578063795d26c3146106e15780637f7dde4a146106e9578063807d138d146106f157806382fe3eb9146106fa57610414565b80636ef643381461064257806372423c171461069c578063741bef1a146106af578063756b253e146106b757806377553ad4146106ca57610414565b80635733d58f146105ad5780635d6b480f146105bc5780635dba4c4a146105cf5780635f94c327146105d757806361ec893d146105ea57806364cee260146105f2578063653d46e71461061e57806366ca4a21146106315780636752be4f1461063957610414565b80631f68f20a116103b05780632f865568116103745780632f8655681461054757806331eaf05c1461055a5780633cc7422514610563578063480cd5781461057857806349eefeee146105a557610414565b80631f68f20a146104ea57806321e37801146104f3578063240926691461052f57806328d28b5b146105375780632b11551a1461053f57610414565b8063071a7541146104195780630ae72619146104345780630b0765571461043d57806312610e921461045257806315d549f1146104655780631673c79a1461047857806318f2817a146104b45780631bf43555146104c75780631e8b1c2b146104d7575b600080fd5b610421600281565b6040519081526020015b60405180910390f35b61042160055481565b61045061044b366004614801565b610966565b005b610421610460366004614839565b610972565b610421610473366004614801565b6109d8565b61049f610486366004614801565b6002602052600090815260409020805460019091015482565b6040805192835260208301919091520161042b565b6104216104c2366004614801565b6109fc565b610421686194049f30f720000081565b6104506104e5366004614864565b610a07565b610421600b5481565b610522610501366004614801565b6001600160a01b031660009081526001602052604090206003015460ff1690565b60405161042b9190614a5a565b610421610cdd565b610421610cfe565b610421610d12565b610450610555366004614801565b610d24565b61042160065481565b61056b610d9e565b60405161042b9190614a2d565b610421610586366004614801565b6001600160a01b03166000908152600160208190526040909120015490565b600a54610421565b6104216714d1120d7b16000081565b6104506105ca366004614839565b610e31565b610450610eab565b6104216105e53660046149e8565b610f25565b610421603c81565b610421610600366004614801565b6001600160a01b031660009081526001602052604090206002015490565b61045061062c36600461494b565b610f40565b61042161101f565b61042160035481565b61068b610650366004614801565b6001602081905260009182526040909120805491810154600282015460039092015490919060ff81169061010090046001600160801b031685565b60405161042b959493929190614a92565b6104216106aa366004614839565b611031565b61056b611093565b61056b6106c536600461494b565b6110ee565b61056b611118565b610421670f43fc2c04ee000081565b610421611173565b61056b61127d565b61042160085481565b610450610708366004614801565b6112d8565b610421611347565b61042160c881565b61042161072b3660046149e8565b611406565b61042160095481565b610421610747366004614839565b611413565b61056b611449565b61042160045481565b610421670de0b6b3a764000081565b61056b6114a4565b610421610782366004614801565b6114ff565b61042161079536600461494b565b611526565b6107ad6107a8366004614801565b611531565b60408051948552602085019390935291830152606082015260800161042b565b6104506107db36600461497b565b611588565b61042160075481565b6104216212750081565b610421611c9b565b610421670ddd4b8c6c7d70d881565b610450610818366004614801565b611cad565b61056b611cc0565b610421610833366004614801565b611d1b565b610421610846366004614839565b611de3565b610421600c5481565b610421671bc16d674ec8000081565b610421610871366004614839565b611e02565b61042161088436600461494b565b611e6e565b610421610897366004614801565b6001600160a01b031660009081526001602052604090205490565b61056b6108c036600461494b565b611e81565b6108d86108d3366004614801565b611ebf565b604051901515815260200161042b565b61056b611f31565b61042160005481565b61056b7f000000000000000000000000000000000000000000000000000000000000000081565b610421611f8c565b610421610936366004614801565b611f99565b61056b611fc4565b610450610951366004614801565b61201f565b61056b612030565b61056b61208b565b61096f816120e6565b50565b600061097c6121e1565b6109858361225c565b61098f83836122e9565b6001600160a01b0383166000908152600160205260408120546109b3908490614b1a565b6001600160a01b03851660009081526001602052604090208190559150505b92915050565b60006109e26121e1565b6109eb82612377565b6001600160801b031690505b919050565b60006109d282612411565b8051610a725760405162461bcd60e51b815260206004820152602f60248201527f5661756c743a2043616c6c646174612061646472657373206172726179206d7560448201526e7374206e6f7420626520656d70747960881b60648201526084015b60405180910390fd5b610a9f60405180608001604052806000815260200160001515815260200160008152602001600081525090565b610aa7614778565b610aaf611093565b6001600160a01b0316630fdb11cf6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610ae957600080fd5b505af1158015610afd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b219190614963565b808352610b2d906124b5565b1580156020840152610b4c578151610b4590846124d2565b9050610b5b565b8151610b5890846126a6565b90505b6000816020015111610baf5760405162461bcd60e51b815260206004820152601b60248201527f5661756c743a206e6f7468696e6720746f206c697175696461746500000000006044820152606401610a69565b610bc181608001518260a0015161275c565b60c081015115610c3e57610bd361127d565b6001600160a01b0316639f4e511e610be9611cc0565b8360c001516040518363ffffffff1660e01b8152600401610c0b929190614a41565b600060405180830381600087803b158015610c2557600080fd5b505af1158015610c39573d6000803e3d6000fd5b505050505b610c4b81604001516129c0565b602081015160408084019190915260c0820151908201518251610c799291610c739190612b17565b90612b17565b60608381018290526040808501518482015182519182526020820194909452908101929092527fc5cb827645ffa2009bf4c45a58df393302651bf85a1f49ba3bd75c05032bcde2910160405180910390a1610cd8338260400151612b23565b505050565b610cf06064670de0b6b3a7640000614ae7565b610cfb906005614afb565b81565b610cf06103e8670de0b6b3a7640000614ae7565b6000610d1f600b54612b94565b905090565b610d2d8161225c565b604080516001808252818301909252600091602080830190803683370190505090508181600081518110610d7157634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b031681525050610d9a81610a07565b5050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633cc742256040518163ffffffff1660e01b815260040160206040518083038186803b158015610df957600080fd5b505afa158015610e0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d1f919061481d565b610e396121e1565b806004811115610e5957634e487b7160e01b600052602160045260246000fd5b6001600160a01b03831660009081526001602081905260409091206003018054909160ff1990911690836004811115610ea257634e487b7160e01b600052602160045260246000fd5b02179055505050565b610eb36121e1565b6000610ebd612bca565b9050670de0b6b3a7640000811115610ee557634e487b7160e01b600052600160045260246000fd5b600b8190556040518181527fc454ee9b76c52f782a256af821b857ca6e125d1e3333bcede402fec2bed9600c9060200160405180910390a161096f612c0e565b6000610f39610f3261101f565b8484612c65565b9392505050565b610f6d60405180608001604052806000815260200160001515815260200160008152602001600081525090565b610f75614778565b610f7d611093565b6001600160a01b0316630fdb11cf6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610fb757600080fd5b505af1158015610fcb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fef9190614963565b808352610ffb906124b5565b1580156020840152611013578151610b459084612c96565b8151610b589084612fb4565b6000610d1f61102c612bca565b6130bb565b600061103b6121e1565b6110448361225c565b6001600160a01b03831660009081526001602081905260408220015461106b908490614acf565b6001600160a01b03851660009081526001602081905260409091200181905591505092915050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663741bef1a6040518163ffffffff1660e01b815260040160206040518083038186803b158015610df957600080fd5b600a81815481106110fe57600080fd5b6000918252602090912001546001600160a01b0316905081565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166377553ad46040518163ffffffff1660e01b815260040160206040518083038186803b158015610df957600080fd5b60008061117e61127d565b6001600160a01b03166314a6bf0f6040518163ffffffff1660e01b815260040160206040518083038186803b1580156111b657600080fd5b505afa1580156111ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ee9190614963565b905060006111fa610d9e565b6001600160a01b03166314a6bf0f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561123257600080fd5b505afa158015611246573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061126a9190614963565b905061127682826130fb565b9250505090565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637f7dde4a6040518163ffffffff1660e01b815260040160206040518083038186803b158015610df957600080fd5b600580546001600160a01b038316600090815260026020526040908190209182556006546001909201829055915491517fc437f324d85e369394148dd9d62f98f534b382e01ed3dd2eb98138fb6d3ab49a9261133c92908252602082015260400190565b60405180910390a150565b60008061135261127d565b6001600160a01b03166388bf5a9b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561138a57600080fd5b505afa15801561139e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c29190614963565b905060006113ce610d9e565b6001600160a01b03166388bf5a9b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561123257600080fd5b6000610f39610f32611f8c565b600061141d6121e1565b6114268361225c565b6001600160a01b0383166000908152600160205260408120546109b390846130fb565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639e8ef3906040518163ffffffff1660e01b815260040160206040518083038186803b158015610df957600080fd5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ae9187546040518163ffffffff1660e01b815260040160206040518083038186803b158015610df957600080fd5b600080600061150d84613107565b91509150600061151d8383613181565b95945050505050565b60006109d2826131b0565b6001600160a01b03811660009081526001602081905260408220805491015490918061155c85611f99565b915061156785611d1b565b905061157384836130fb565b935061157f83826130fb565b92509193509193565b6115d76040518061012001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6115e0826131dc565b6115e861327e565b6115f0611093565b6001600160a01b0316630fdb11cf6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561162a57600080fd5b505af115801561163e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116629190614963565b60e0820181905261167290613378565b61167b886133e4565b6116853389613444565b61168d611173565b610100820181905261169d611449565b6001600160a01b03166370a08231336040518263ffffffff1660e01b81526004016116c89190614a2d565b60206040518083038186803b1580156116e057600080fd5b505afa1580156116f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117189190614963565b111561173457634e487b7160e01b600052600160045260246000fd5b87815260e081015160009061174a90899061354b565b1561175657508661188c565b61175e6114a4565b6001600160a01b0316634d6228316040518163ffffffff1660e01b815260040160206040518083038186803b15801561179657600080fd5b505afa1580156117aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ce919061481d565b90505b6001600160a01b038116158015906117fd5750670f43fc2c04ee00006117fb828460e00151611de3565b105b1561188c5761180a6114a4565b6001600160a01b031663b72703ac826040518263ffffffff1660e01b81526004016118359190614a2d565b60206040518083038186803b15801561184d57600080fd5b505afa158015611861573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611885919061481d565b90506117d1565b836118975760005493505b6001600160a01b038116158015906118af5750815115155b80156118bb5750600084115b156119ce57836118ca81614b31565b94505060006118d76114a4565b6001600160a01b031663b72703ac836040518263ffffffff1660e01b81526004016119029190614a2d565b60206040518083038186803b15801561191a57600080fd5b505afa15801561192e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611952919061481d565b905061195d826120e6565b60006119758385600001518660e001518c8c8c6136bf565b90508060400151156119885750506119ce565b80516020850151611998916130fb565b60208086019190915281015160608501516119b2916130fb565b6060850152805184516119c491612b17565b8452509050611897565b6000826060015111611a2d5760405162461bcd60e51b815260206004820152602260248201527f5661756c743a20556e61626c6520746f2072656465656d20616e7920616d6f756044820152611b9d60f21b6064820152608401610a69565b611a4582606001518360e0015184610100015161390a565b50611a5382606001516139b4565b608083018190526060830151611a6a9190856139c1565b611a7261127d565b6001600160a01b0316634c38b4b283608001516040518263ffffffff1660e01b8152600401611aa391815260200190565b600060405180830381600087803b158015611abd57600080fd5b505af1158015611ad1573d6000803e3d6000fd5b5050505060808201516060830151611ae891612b17565b60a08301526020820151606083015160808401516040517f43a3f4082a4dbc33d78e317d2497d3a730bc7fc3574159dcea1056e62e5d9ad893611b47938e93919290919093845260208401929092526040830152606082015260800190565b60405180910390a1611b57611449565b6001600160a01b0316639dc29fac3384602001516040518363ffffffff1660e01b8152600401611b88929190614a41565b600060405180830381600087803b158015611ba257600080fd5b505af1158015611bb6573d6000803e3d6000fd5b50505050611bc261127d565b6001600160a01b0316632a7ba1f783604001516040518263ffffffff1660e01b8152600401611bf391815260200190565b600060405180830381600087803b158015611c0d57600080fd5b505af1158015611c21573d6000803e3d6000fd5b50505050611c2d61127d565b6001600160a01b0316639f4e511e338460a001516040518363ffffffff1660e01b8152600401611c5e929190614a41565b600060405180830381600087803b158015611c7857600080fd5b505af1158015611c8c573d6000803e3d6000fd5b50505050505050505050505050565b6000610d1f611ca8612bca565b612b94565b611cb56121e1565b61096f816002613a31565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663cda775f96040518163ffffffff1660e01b815260040160206040518083038186803b158015610df957600080fd5b6001600160a01b0381166000908152600260205260408120546005548290611d439083612b17565b9050801580611d90575060016001600160a01b03851660009081526001602052604090206003015460ff166004811115611d8d57634e487b7160e01b600052602160045260246000fd5b14155b15611da0576000925050506109f7565b6001600160a01b03841660009081526001602052604081206002015490611dd9670de0b6b3a7640000611dd38486613b99565b90613ba5565b9695505050505050565b6000806000611df185613107565b915091506000611dd9838387613bb1565b6000611e0c6121e1565b611e158361225c565b6001600160a01b038316600090815260016020819052604082200154611e3b9084612b17565b9050611e478484613bdb565b6001600160a01b038416600090815260016020819052604090912001819055905092915050565b60006109d2611e7b611c9b565b83613c6d565b6000600a8281548110611ea457634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031692915050565b600060016001600160a01b03831660009081526001602052604090206003015460ff166004811115611f0157634e487b7160e01b600052602160045260246000fd5b14611f0e575060006109f7565b506005546001600160a01b03821660009081526002602052604090205410919050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e2d8ef8d6040518163ffffffff1660e01b815260040160206040518083038186803b158015610df957600080fd5b6000610d1f600b546130bb565b6001600160a01b0381166000908152600260205260408120600101546006548290611d439083612b17565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663fbfa77cf6040518163ffffffff1660e01b815260040160206040518083038186803b158015610df957600080fd5b6120276121e1565b61096f81613cef565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ff2fb57c6040518163ffffffff1660e01b815260040160206040518083038186803b158015610df957600080fd5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663fff298df6040518163ffffffff1660e01b815260040160206040518083038186803b158015610df957600080fd5b6120ef81611ebf565b1561096f576120fd8161225c565b600061210882611d1b565b9050600061211583611f99565b6001600160a01b0384166000908152600160208190526040909120015490915061213f90836130fb565b6001600160a01b0384166000908152600160208190526040909120908101919091555461216c90826130fb565b6001600160a01b03841660009081526001602052604090205561218e836112d8565b6001600160a01b03831660008181526001602081905260408083208054928101546002909101549151600080516020614be5833981519152946121d49493918190614a68565b60405180910390a2505050565b6121e9611118565b6001600160a01b0316336001600160a01b03161461225a5760405162461bcd60e51b815260206004820152602860248201527f5661756c743a2043616c6c6572206d75737420626520426f72726f7765724f7060448201526765726174696f6e7360c01b6064820152608401610a69565b565b60016001600160a01b03821660009081526001602052604090206003015460ff16600481111561229c57634e487b7160e01b600052602160045260246000fd5b1461096f5760405162461bcd60e51b815260206004820152601b60248201527f5661756c743a2054726f7665206d7573742062652061637469766500000000006044820152606401610a69565b6001600160a01b038216600090815260016020526040902054811115610d9a5760405162461bcd60e51b815260206004820152603e60248201527f5661756c743a20446562742064656372656173652063616e277420626520677260448201527f61746572207468616e2074726f7665277320646562742062616c616e636500006064820152608401610a69565b600a80546001808201835560008381527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a890920180546001600160a01b0319166001600160a01b038616179055915490916123d29190612b17565b6001600160a01b039290921660009081526001602052604090206003018054610100600160881b0319166101006001600160801b038516021790555090565b6001600160a01b038116600090815260016020819052604082200154819061243890613d39565b6001600160a01b0384166000908152600160205260409020600201805490829055600754919250906124769083906124709084612b17565b906130fb565b60078190556040519081527f6bac5e0eb3c44eb03a60ab11ec3a2c051771616aecadbcfff2630aabae5203829060200160405180910390a15092915050565b6000806124c1836131b0565b6714d1120d7b160000119392505050565b6124da614778565b6124e26147b5565b6124ea614778565b600060608301526124f9611173565b6080830152612506611347565b60a0830152600082525b83518251101561269e578382600001518151811061253e57634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b03166040848101829052600091825260019283905290206003015460ff16600481111561258e57634e487b7160e01b600052602160045260246000fd5b146125985761268a565b6125a6826040015186611de3565b6020830152606082015161264d57670f43fc2c04ee00008260200151106125cc5761268a565b6125de82604001518360200151613d89565b90506125fb81606001518360800151612b1790919063ffffffff16565b608083015260c0810151604082015160a084015161261e9291610c739190612b17565b60a083015261262d8382613eef565b92506126428260a00151836080015187613f86565b15606083015261268a565b816060015180156126695750670f43fc2c04ee00008260200151105b1561268a5761267b8260400151613fa7565b90506126878382613eef565b92505b81518261269682614b48565b905250612510565b505092915050565b6126ae614778565b6126b66147b5565b6126be614778565b600082525b83518251101561269e57838260000151815181106126f157634e487b7160e01b600052603260045260246000fd5b60209081029190910101516001600160a01b0316604083018190526127169086611de3565b60208301819052670f43fc2c04ee00001115612748576127398260400151613fa7565b90506127458382613eef565b92505b81518261275482614b48565b9052506126c3565b8161276657610d9a565b6003546000906127829061247084670de0b6b3a7640000613b99565b905060006127a7600454612470670de0b6b3a764000087613b9990919063ffffffff16565b905060006127c060075484613ba590919063ffffffff16565b905060006127d960075484613ba590919063ffffffff16565b90506127fa6127f360075484613b9990919063ffffffff16565b8590612b17565b6003556007546128169061280f908390613b99565b8490612b17565b60045560055461282690836130fb565b60055560065461283690826130fb565b60068190556005546040517f9f8bc8ab0daf5bceef75ecfd2085d1fcc6548c657ea970d9a23a60610d0737e392612874928252602082015260400190565b60405180910390a161288461127d565b6001600160a01b0316632a7ba1f7876040518263ffffffff1660e01b81526004016128b191815260200190565b600060405180830381600087803b1580156128cb57600080fd5b505af11580156128df573d6000803e3d6000fd5b505050506128eb610d9e565b6001600160a01b0316632b7c7b11876040518263ffffffff1660e01b815260040161291891815260200190565b600060405180830381600087803b15801561293257600080fd5b505af1158015612946573d6000803e3d6000fd5b5050505061295261127d565b6001600160a01b0316639f4e511e612968610d9e565b876040518363ffffffff1660e01b8152600401612986929190614a41565b600060405180830381600087803b1580156129a057600080fd5b505af11580156129b4573d6000803e3d6000fd5b50505050505050505050565b60075460085560006129d061127d565b6001600160a01b03166388bf5a9b6040518163ffffffff1660e01b815260040160206040518083038186803b158015612a0857600080fd5b505afa158015612a1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a409190614963565b90506000612a4c610d9e565b6001600160a01b03166388bf5a9b6040518163ffffffff1660e01b815260040160206040518083038186803b158015612a8457600080fd5b505afa158015612a98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612abc9190614963565b9050612acc816124708486612b17565b60098190556008546040517f51bf4c63ec3cba9d03d43238abbdd979dd91bd16d9895c74ceea9118c7baaf6092612b0a928252602082015260400190565b60405180910390a1505050565b6000610f398284614b1a565b8015610d9a57612b3161127d565b6001600160a01b0316639f4e511e83836040518363ffffffff1660e01b8152600401612b5e929190614a41565b600060405180830381600087803b158015612b7857600080fd5b505af1158015612b8c573d6000803e3d6000fd5b505050505050565b60006109d2612bbc83612bb16103e8670de0b6b3a7640000614ae7565b612470906005614afb565b670de0b6b3a76400006140de565b600080612bd56140f4565b90506000612beb670ddd4b8c6c7d70d883614110565b9050611276670de0b6b3a7640000611dd383600b54613b9990919063ffffffff16565b6000612c25600c5442612b1790919063ffffffff16565b9050603c811061096f5742600c8190556040519081527f860f8d2f0c74dd487e89e2883e3b25b8159ce1e1b3433a291cba7b82c508f3bc9060200161133c565b600080612c7e670de0b6b3a7640000611dd38787613b99565b905061151d83611dd383670de0b6b3a7640000613b99565b612c9e614778565b612ca66147b5565b612cae614778565b60006060830152612cbd611173565b6080830152612cca611347565b60a0830152612cd76114a4565b6001600160a01b0316634d6228316040518163ffffffff1660e01b815260040160206040518083038186803b158015612d0f57600080fd5b505afa158015612d23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d47919061481d565b6001600160a01b031660408301526000612d5f6114a4565b6001600160a01b0316631e2231436040518163ffffffff1660e01b815260040160206040518083038186803b158015612d9757600080fd5b505afa158015612dab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dcf919061481d565b6000845290505b825185118015612dfc5750806001600160a01b031683604001516001600160a01b031614155b15612fab576000612e0b6114a4565b6001600160a01b031663b72703ac85604001516040518263ffffffff1660e01b8152600401612e3a9190614a2d565b60206040518083038186803b158015612e5257600080fd5b505afa158015612e66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e8a919061481d565b9050612e9a846040015188611de3565b60208501526060840151612f4257670f43fc2c04ee0000846020015110612ec15750612fab565b612ed384604001518560200151613d89565b9250612ef083606001518560800151612b1790919063ffffffff16565b608085015260c0830151604084015160a0860151612f139291610c739190612b17565b60a0850152612f228584613eef565b9450612f378460a00151856080015189613f86565b156060850152612f89565b83606001518015612f5e5750670f43fc2c04ee00008460200151105b15612f8357612f708460400151613fa7565b9250612f7c8584613eef565b9450612f89565b50612fab565b6001600160a01b03166040840152825183612fa382614b48565b905250612dd6565b50505092915050565b612fbc614778565b612fc46147b5565b612fcc614778565b600082525b815184111561269e57612fe26114a4565b6001600160a01b0316634d6228316040518163ffffffff1660e01b815260040160206040518083038186803b15801561301a57600080fd5b505afa15801561302e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613052919061481d565b6001600160a01b03166040830181905261306c9086611de3565b60208301819052670f43fc2c04ee000011156130a25761308f8260400151613fa7565b905061309b8382613eef565b92506130a7565b61269e565b8151826130b382614b48565b905250612fd1565b60006109d26130d883612bb16103e8670de0b6b3a7640000614ae7565b6130eb6064670de0b6b3a7640000614ae7565b6130f6906005614afb565b6140de565b6000610f398284614acf565b600080600061311584611d1b565b9050600061312285611f99565b6001600160a01b0386166000908152600160208190526040822001549192509061314c90846130fb565b6001600160a01b0387166000908152600160205260408120549192509061317390846130fb565b919550909350505050915091565b600081156131a7576131a082611dd38568056bc75e2d63100000613b99565b90506109d2565b506000196109d2565b6000806131bb611347565b905060006131c7611173565b90506131d4828286613bb1565b949350505050565b6131f06103e8670de0b6b3a7640000614ae7565b6131fb906005614afb565b81101580156132125750670de0b6b3a76400008111155b61096f5760405162461bcd60e51b815260206004820152603760248201527f5661756c743a204d6178206665652070657263656e74616765206d757374206260448201527665206265747765656e20302e352520616e64203130302560481b6064820152608401610a69565b600061328861208b565b6001600160a01b0316633c84b7c26040518163ffffffff1660e01b815260040160206040518083038186803b1580156132c057600080fd5b505afa1580156132d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132f89190614963565b905061330781621275006130fb565b42101561096f5760405162461bcd60e51b815260206004820152603960248201527f5661756c743a20526564656d7074696f6e7320617265206e6f7420616c6c6f77604482015278656420647572696e6720626f6f74737472617020706861736560381b6064820152608401610a69565b670f43fc2c04ee000061338a826131b0565b101561096f5760405162461bcd60e51b815260206004820152602360248201527f5661756c743a2043616e6e6f742072656465656d207768656e20544352203c2060448201526226a1a960e91b6064820152608401610a69565b6000811161096f5760405162461bcd60e51b815260206004820152602760248201527f5661756c743a20416d6f756e74206d7573742062652067726561746572207468604482015266616e207a65726f60c81b6064820152608401610a69565b8061344d611449565b6001600160a01b03166370a08231846040518263ffffffff1660e01b81526004016134789190614a2d565b60206040518083038186803b15801561349057600080fd5b505afa1580156134a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134c89190614963565b1015610d9a5760405162461bcd60e51b815260206004820152604660248201527f5661756c743a2052657175657374656420726564656d7074696f6e20616d6f7560448201527f6e74206d757374206265203c3d207573657227732050414920746f6b656e2062606482015265616c616e636560d01b608482015260a401610a69565b60006001600160a01b03831615806135e357506135666114a4565b6001600160a01b0316635dbe47e8846040518263ffffffff1660e01b81526004016135919190614a2d565b60206040518083038186803b1580156135a957600080fd5b505afa1580156135bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135e1919061492b565b155b806135fe5750670f43fc2c04ee00006135fc8484611de3565b105b1561360b575060006109d2565b60006136156114a4565b6001600160a01b031663765e0159856040518263ffffffff1660e01b81526004016136409190614a2d565b60206040518083038186803b15801561365857600080fd5b505afa15801561366c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613690919061481d565b90506001600160a01b03811615806131d45750670f43fc2c04ee00006136b68285611de3565b10949350505050565b6136e5604051806060016040528060008152602001600081526020016000151581525090565b6001600160a01b0387166000908152600160205260409020546137099087906140de565b808252613724908690611dd390670de0b6b3a7640000613b99565b60208083019190915281516001600160a01b03891660009081526001909252604082205461375191612b17565b6020808401516001600160a01b038b1660009081526001928390526040812090920154929350909161378291612b17565b9050816137e85761379289613cef565b61379d896004613a31565b6137a9896000836141b6565b886001600160a01b0316600080516020614be583398151915260008060008060036040516137db959493929190614a68565b60405180910390a26138fe565b60006137f48284613181565b905084811461380c5750506001604083015250611dd9565b6138146114a4565b60405163015f109360e51b81526001600160a01b038c8116600483015260248201849052898116604483015288811660648301529190911690632be2126090608401600060405180830381600087803b15801561387057600080fd5b505af1158015613884573d6000803e3d6000fd5b5050506001600160a01b038b16600090815260016020819052604090912085815501839055506138b38a612411565b506001600160a01b038a16600081815260016020526040808220600201549051600080516020614be5833981519152926138f4928892889290600390614a68565b60405180910390a2505b50509695505050505050565b600080613915612bca565b9050600061392784611dd38888613b99565b90506000613940613939836002613ba5565b84906130fb565b905061395481670de0b6b3a76400006140de565b90506000811161397457634e487b7160e01b600052600160045260246000fd5b600b8190556040518181527fc454ee9b76c52f782a256af821b857ca6e125d1e3333bcede402fec2bed9600c9060200160405180910390a1611dd9612c0e565b60006109d2611e7b610d12565b60006139d983611dd386670de0b6b3a7640000613b99565b905081811115613a2b5760405162461bcd60e51b815260206004820152601d60248201527f4665652065786365656465642070726f7669646564206d6178696d756d0000006044820152606401610a69565b50505050565b6000816004811115613a5357634e487b7160e01b600052602160045260246000fd5b14158015613a8157506001816004811115613a7e57634e487b7160e01b600052602160045260246000fd5b14155b613a9b57634e487b7160e01b600052600160045260246000fd5b600a54613aa781614317565b6001600160a01b03831660009081526001602081905260409091206003018054849260ff1990911690836004811115613af057634e487b7160e01b600052602160045260246000fd5b02179055506001600160a01b0383166000908152600160208181526040808420808401859055849055600290915282208281550155613b2f83826143f6565b613b376114a4565b6001600160a01b03166329092d0e846040518263ffffffff1660e01b8152600401613b629190614a2d565b600060405180830381600087803b158015613b7c57600080fd5b505af1158015613b90573d6000803e3d6000fd5b50505050505050565b6000610f398284614afb565b6000610f398284614ae7565b60008215613bd2576000613bc984611dd38786613b99565b9150610f399050565b50600019610f39565b6001600160a01b03821660009081526001602081905260409091200154811115610d9a5760405162461bcd60e51b815260206004820152603f60248201527f5661756c743a20436f6c6c61746572616c2064656372656173652063616e277460448201527f20626520677261746572207468616e2074726f766527732062616c616e6365006064820152608401610a69565b600080613c86670de0b6b3a7640000611dd38686613b99565b9050828110610f395760405162461bcd60e51b815260206004820152602f60248201527f5661756c743a2046656520776f756c642065617420757020616c6c207265747560448201526e1c9b99590818dbdb1b185d195c985b608a1b6064820152608401610a69565b6001600160a01b038116600090815260016020526040902060020154600754613d189082612b17565b600755506001600160a01b0316600090815260016020526040812060020155565b60008060095460001415613d4e5750816109d2565b600060085411613d6e57634e487b7160e01b600052600160045260246000fd5b610f39600954611dd360085486613b9990919063ffffffff16565b613d91614778565b613db560405180606001604052806000815260200160008152602001600081525090565b600a54600110613dc557506109d2565b613dce84611531565b60408501526020848101919091528401819052908352613ded9061462a565b604083018190526020830151613e0291612b17565b8152670f43fc2c04ee00008311613ed757613e258160200151826040015161464c565b613e2e84613cef565b81516080830152805160a0830152613e47846003613a31565b815160208084015160408051938452918301526002908201526001600160a01b038516907fea67486ed7ebe3eea8ab3390efd4a3c8aae48be5bea27df104a8af786c4084349060600160405180910390a2836001600160a01b0316600080516020614be58339815191526000806000806002604051613eca959493929190614a68565b60405180910390a2613ee8565b613edf614778565b91506109d29050565b5092915050565b613ef7614778565b60408083015190840151613f0a916130fb565b604082015281516020840151613f1f916130fb565b6020808301919091528201518351613f36916130fb565b815260808083015190840151613f4b916130fb565b608082015260a08083015190840151613f63916130fb565b60a082015260c08083015190840151613f7b916130fb565b60c082015292915050565b600080613f94858585613bb1565b6714d1120d7b1600001195945050505050565b613faf614778565b613fd360405180606001604052806000815260200160008152602001600081525090565b613fdc83611531565b60408501908152602085810192835286019290925291845290519051614002919061464c565b61400b83613cef565b614018826020015161462a565b6040830181905260208301516000916140319190612b17565b8351608085015260a08401819052905061404c846003613a31565b825160208085015160408051938452918301526001908201526001600160a01b038516907fea67486ed7ebe3eea8ab3390efd4a3c8aae48be5bea27df104a8af786c4084349060600160405180910390a2836001600160a01b0316600080516020614be583398151915260008060008060016040516140cf959493929190614a68565b60405180910390a25050919050565b60008183106140ed5781610f39565b5090919050565b6000610d1f603c611dd3600c5442612b1790919063ffffffff16565b6000631f54050082111561412657631f54050091505b8161413a5750670de0b6b3a76400006109d2565b670de0b6b3a764000083835b60018111156141ac5761415a600282614b63565b61417c57614168828361474f565b9150614175816002613ba5565b90506141a7565b614186828461474f565b9250614192828361474f565b91506141a46002611dd3836001612b17565b90505b614146565b611dd9828461474f565b6141be61127d565b6001600160a01b0316632a7ba1f7836040518263ffffffff1660e01b81526004016141eb91815260200190565b600060405180830381600087803b15801561420557600080fd5b505af1158015614219573d6000803e3d6000fd5b50505050600061423a671bc16d674ec80000836130fb90919063ffffffff16565b9050614244611cc0565b6001600160a01b0316633f10abab85836040518363ffffffff1660e01b8152600401614271929190614a41565b600060405180830381600087803b15801561428b57600080fd5b505af115801561429f573d6000803e3d6000fd5b505050506142ab61127d565b6001600160a01b0316639f4e511e6142c1611cc0565b836040518363ffffffff1660e01b81526004016142df929190614a41565b600060405180830381600087803b1580156142f957600080fd5b505af115801561430d573d6000803e3d6000fd5b5050505050505050565b60018111801561439e5750600161432c6114a4565b6001600160a01b031663de8fa4316040518163ffffffff1660e01b815260040160206040518083038186803b15801561436457600080fd5b505afa158015614378573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061439c9190614963565b115b61096f5760405162461bcd60e51b815260206004820152602360248201527f5661756c743a204f6e6c79206f6e652074726f766520696e207468652073797360448201526274656d60e81b6064820152608401610a69565b6001600160a01b03821660009081526001602052604081206003015460ff169081600481111561443657634e487b7160e01b600052602160045260246000fd5b141580156144645750600181600481111561446157634e487b7160e01b600052602160045260246000fd5b14155b61447e57634e487b7160e01b600052600160045260246000fd5b6001600160a01b038316600090815260016020819052604082206003015461010090046001600160801b03169184916144b8908390612b17565b905080836001600160801b031611156144e157634e487b7160e01b600052600160045260246000fd5b6000600a828154811061450457634e487b7160e01b600052603260045260246000fd5b600091825260209091200154600a80546001600160a01b03909216925082916001600160801b03871690811061454a57634e487b7160e01b600052603260045260246000fd5b600091825260208083209190910180546001600160a01b0319166001600160a01b03948516179055918316808252600183526040918290206003018054610100600160881b0319166101006001600160801b038a16908102919091179091558251918252928101929092527f02b04ae5f7be9ca7c103293a2aa15f3c339d15d6eda53b721fef7b0e609c831a910160405180910390a1600a8054806145ff57634e487b7160e01b600052603160045260246000fd5b600082815260209020810160001990810180546001600160a01b031916905501905550505050505050565b60008061463860c884614ae7565b9050610f3981671bc16d674ec800006130fb565b614654610d9e565b6001600160a01b0316632a7ba1f7836040518263ffffffff1660e01b815260040161468191815260200190565b600060405180830381600087803b15801561469b57600080fd5b505af11580156146af573d6000803e3d6000fd5b505050506146bb61127d565b6001600160a01b0316632b7c7b11836040518263ffffffff1660e01b81526004016146e891815260200190565b600060405180830381600087803b15801561470257600080fd5b505af1158015614716573d6000803e3d6000fd5b50505050614722610d9e565b6001600160a01b0316633d5dae7a826040518263ffffffff1660e01b8152600401612b5e91815260200190565b60008061475c8484613b99565b90506131d4670de0b6b3a7640000611dd3613939600283614ae7565b6040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040518060c00160405280600081526020016000815260200160006001600160a01b0316815260200160001515815260200160008152602001600081525090565b80356109f781614bcf565b600060208284031215614812578081fd5b8135610f3981614bcf565b60006020828403121561482e578081fd5b8151610f3981614bcf565b6000806040838503121561484b578081fd5b823561485681614bcf565b946020939093013593505050565b60006020808385031215614876578182fd5b823567ffffffffffffffff8082111561488d578384fd5b818501915085601f8301126148a0578384fd5b8135818111156148b2576148b2614bb9565b8060051b604051601f19603f830116810181811085821117156148d7576148d7614bb9565b604052828152858101935084860182860187018a10156148f5578788fd5b8795505b8386101561491e5761490a816147f6565b8552600195909501949386019386016148f9565b5098975050505050505050565b60006020828403121561493c578081fd5b81518015158114610f39578182fd5b60006020828403121561495c578081fd5b5035919050565b600060208284031215614974578081fd5b5051919050565b600080600080600080600060e0888a031215614995578283fd5b8735965060208801356149a781614bcf565b955060408801356149b781614bcf565b945060608801356149c781614bcf565b9699959850939660808101359560a0820135955060c0909101359350915050565b600080604083850312156149fa578182fd5b50508035926020909101359150565b60048110614a1957614a19614ba3565b9052565b60058110614a1957614a19614ba3565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b602081016109d28284614a1d565b600060a082019050868252856020830152846040830152836060830152611dd96080830184614a09565b858152602081018590526040810184905260a08101614ab46060830185614a1d565b6001600160801b039290921660809190910152949350505050565b60008219821115614ae257614ae2614b77565b500190565b600082614af657614af6614b8d565b500490565b6000816000190483118215151615614b1557614b15614b77565b500290565b600082821015614b2c57614b2c614b77565b500390565b600081614b4057614b40614b77565b506000190190565b6000600019821415614b5c57614b5c614b77565b5060010190565b600082614b7257614b72614b8d565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461096f57600080fdfef575eb5cdee005607f56587351e18943ddacd11756b9d37980ec251797ff136ca2646970667358221220d291ca8eeb039152d4206a395821de4f39c99ef27894e4eb0276b99ea98e222f64736f6c63430008030033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 15613,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "MAX_UINT",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 11501,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "Troves",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(Trove)11496_storage)"
      },
      {
        "astId": 11506,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "rewardSnapshots",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(RewardSnapshot)11511_storage)"
      },
      {
        "astId": 11513,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "lastCollError_Redistribution",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 11515,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "lastDebtError_Redistribution",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 11517,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "L_Coll",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 11519,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "L_Debt",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 11521,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "totalStakes",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 11523,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "totalStakesSnapshot",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 11525,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "totalCollateralSnapshot",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 11528,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "TroveOwners",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 11542,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "baseRate",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 11544,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "lastFeeOperationTime",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_enum(TroveStatus)15699": {
        "encoding": "inplace",
        "label": "enum IBase.TroveStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(RewardSnapshot)11511_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Vault.RewardSnapshot)",
        "numberOfBytes": "32",
        "value": "t_struct(RewardSnapshot)11511_storage"
      },
      "t_mapping(t_address,t_struct(Trove)11496_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Vault.Trove)",
        "numberOfBytes": "32",
        "value": "t_struct(Trove)11496_storage"
      },
      "t_struct(RewardSnapshot)11511_storage": {
        "encoding": "inplace",
        "label": "struct Vault.RewardSnapshot",
        "members": [
          {
            "astId": 11508,
            "contract": "contracts/core/Vault.sol:Vault",
            "label": "coll",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 11510,
            "contract": "contracts/core/Vault.sol:Vault",
            "label": "debt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Trove)11496_storage": {
        "encoding": "inplace",
        "label": "struct Vault.Trove",
        "members": [
          {
            "astId": 11486,
            "contract": "contracts/core/Vault.sol:Vault",
            "label": "debt",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 11488,
            "contract": "contracts/core/Vault.sol:Vault",
            "label": "coll",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 11490,
            "contract": "contracts/core/Vault.sol:Vault",
            "label": "stake",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 11493,
            "contract": "contracts/core/Vault.sol:Vault",
            "label": "status",
            "offset": 0,
            "slot": "3",
            "type": "t_enum(TroveStatus)15699"
          },
          {
            "astId": 11495,
            "contract": "contracts/core/Vault.sol:Vault",
            "label": "arrayIndex",
            "offset": 1,
            "slot": "3",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
