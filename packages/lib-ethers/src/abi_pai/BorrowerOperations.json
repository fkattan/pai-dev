{
  "address": "0xeA7925865556a7DD7ba3a48eACe1A90C6F5c3a98",
  "contractName": "BorrowerOperations",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_core",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_Fee",
          "type": "uint256"
        }
      ],
      "name": "BorrowingFeePaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "arrayIndex",
          "type": "uint256"
        }
      ],
      "name": "TroveCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_debt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_coll",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stake",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_borrowingFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "operation",
          "type": "uint8"
        }
      ],
      "name": "TroveUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BOOTSTRAP_PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BORROWING_FEE_FLOOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CCR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DAI_GAS_COMPENSATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DECIMAL_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "HALF_PERCENT_DIVISOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_UINT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MCR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_NET_DEBT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SECONDS_IN_ONE_MINUTE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "activePool",
      "outputs": [
        {
          "internalType": "contract IActivePool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_collIncrease",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_upperHint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lowerHint",
          "type": "address"
        }
      ],
      "name": "addColl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_collChange",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isCollIncrease",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_debtChange",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isDebtIncrease",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "_upperHint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lowerHint",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxFeePercentage",
          "type": "uint256"
        }
      ],
      "name": "adjustTrove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowerOperations",
      "outputs": [
        {
          "internalType": "contract IBorrowerOperations",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "closeTrove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collSurplusPool",
      "outputs": [
        {
          "internalType": "contract ICollSurplusPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "core",
      "outputs": [
        {
          "internalType": "contract ICore",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultPool",
      "outputs": [
        {
          "internalType": "contract IDefaultPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gemToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntireSystemColl",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "entireSystemColl",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntireSystemDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "entireSystemDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "myoStaking",
      "outputs": [
        {
          "internalType": "contract IMYOStaking",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "myoToken",
      "outputs": [
        {
          "internalType": "contract IMYOToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxFeePercentage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_debt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_coll",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_upperHint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lowerHint",
          "type": "address"
        }
      ],
      "name": "openTrove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paiToken",
      "outputs": [
        {
          "internalType": "contract IPAIToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "contract IPriceFeed",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_paiAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_upperHint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lowerHint",
          "type": "address"
        }
      ],
      "name": "repayPAI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sortedTroves",
      "outputs": [
        {
          "internalType": "contract ISortedTroves",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "contract IVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_collWithdrawal",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_upperHint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lowerHint",
          "type": "address"
        }
      ],
      "name": "withdrawColl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxFeePercentage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_paiWithdrawal",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_upperHint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lowerHint",
          "type": "address"
        }
      ],
      "name": "withdrawPAI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x93cdd19ea1af2e89a9c0b605c6c18c0970d85f059ec3cd27936cd0d32d35cdca",
  "receipt": {
    "to": null,
    "from": "0xd28e3542856F157f979111435DaFCC37f419d0c2",
    "contractAddress": "0xeA7925865556a7DD7ba3a48eACe1A90C6F5c3a98",
    "transactionIndex": 14,
    "gasUsed": "2752183",
    "logsBloom": "0x
    "blockHash": "0xbe13520e5ae92d16f29f726ccb1d4e523f5a07c54d9215ab56fb2981f3df17b7",
    "transactionHash": "0x93cdd19ea1af2e89a9c0b605c6c18c0970d85f059ec3cd27936cd0d32d35cdca",
    "logs": [
      {
        "transactionIndex": 14,
        "blockNumber": 26047921,
        "transactionHash": "0x93cdd19ea1af2e89a9c0b605c6c18c0970d85f059ec3cd27936cd0d32d35cdca",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000d28e3542856f157f979111435dafcc37f419d0c2",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x000000000000000000000000000000000000000000000000004e38c44f6d38ff0000000000000000000000000000000000000000000000000a26e24fd510cf6700000000000000000000000000000000000000000000126f95f0b8a535b2e60000000000000000000000000000000000000000000000000009d8a98b85a3966800000000000000000000000000000000000000000000126f963ef16985201eff",
        "logIndex": 30,
        "blockHash": "0xbe13520e5ae92d16f29f726ccb1d4e523f5a07c54d9215ab56fb2981f3df17b7"
      }
    ],
    "blockNumber": 26047921,
    "cumulativeGasUsed": "5235968",
    "status": 1,
    "byzantium": true
  },
  "args": ["0x37F6DFa518E3708727E7eD3CbF5cA3641412890e"],
  "numDeployments": 2,
  "solcInputHash": "8aa079dc372efa4fb72dddab2b66ad11",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_core\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_Fee\",\"type\":\"uint256\"}],\"name\":\"BorrowingFeePaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"arrayIndex\",\"type\":\"uint256\"}],\"name\":\"TroveCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_debt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_coll\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_borrowingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"operation\",\"type\":\"uint8\"}],\"name\":\"TroveUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BOOTSTRAP_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BORROWING_FEE_FLOOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CCR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAI_GAS_COMPENSATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DECIMAL_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HALF_PERCENT_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_UINT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MCR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_NET_DEBT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SECONDS_IN_ONE_MINUTE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activePool\",\"outputs\":[{\"internalType\":\"contract IActivePool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_collIncrease\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_upperHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lowerHint\",\"type\":\"address\"}],\"name\":\"addColl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_collChange\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isCollIncrease\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_debtChange\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isDebtIncrease\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_upperHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lowerHint\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxFeePercentage\",\"type\":\"uint256\"}],\"name\":\"adjustTrove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowerOperations\",\"outputs\":[{\"internalType\":\"contract IBorrowerOperations\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeTrove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collSurplusPool\",\"outputs\":[{\"internalType\":\"contract ICollSurplusPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"core\",\"outputs\":[{\"internalType\":\"contract ICore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultPool\",\"outputs\":[{\"internalType\":\"contract IDefaultPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gemToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntireSystemColl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"entireSystemColl\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntireSystemDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"entireSystemDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"myoStaking\",\"outputs\":[{\"internalType\":\"contract IMYOStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"myoToken\",\"outputs\":[{\"internalType\":\"contract IMYOToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_coll\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_upperHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lowerHint\",\"type\":\"address\"}],\"name\":\"openTrove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paiToken\",\"outputs\":[{\"internalType\":\"contract IPAIToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract IPriceFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_paiAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_upperHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lowerHint\",\"type\":\"address\"}],\"name\":\"repayPAI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sortedTroves\",\"outputs\":[{\"internalType\":\"contract ISortedTroves\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_collWithdrawal\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_upperHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lowerHint\",\"type\":\"address\"}],\"name\":\"withdrawColl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_paiWithdrawal\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_upperHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lowerHint\",\"type\":\"address\"}],\"name\":\"withdrawPAI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/BorrowerOperations.sol\":\"BorrowerOperations\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/core/BorrowerOperations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"./CoreRef.sol\\\";\\nimport \\\"../interfaces/IBorrowerOperations.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract BorrowerOperations is CoreRef, IBorrowerOperations {\\n\\tusing SafeMath for uint256;\\n\\n\\t// solhint-disable-next-line no-empty-blocks\\n\\tconstructor(address _core) CoreRef(_core) {}\\n\\n\\tenum BorrowerOperation {\\n\\t\\topenTrove,\\n\\t\\tcloseTrove,\\n\\t\\tadjustTrove\\n\\t}\\n\\n\\t// OPEN TROVE\\n\\t//\\n\\t// uint256 _maxFeePercentage,\\n\\t// uint256 _debt,\\n\\t// uint256 _coll,\\n\\t// address _upperHint,\\n\\t// address _lowerHint\\n\\t//\\n\\t// Fetch Price and determine if in recovery mode.\\n\\t// Verify fee\\n\\t// Determine Borrowing Fee\\n\\t// Calculate net Collateral as: collateral - borrowing fee\\n\\t// Require sufficient net collateral to cover for gas compensation reserve\\n\\t// Determine minimum collateralization ratio is meet; trove collateral (for borrwing capacity) is net collateral - Gas Comp\\n\\t// Adjust trove\\n\\t// Insert Sorted\\n\\t// Transfer Collateral\\n\\t// Transfer Debt\\n\\t// Emit Events\\n\\n\\tfunction openTrove(\\n\\t\\tuint256 _maxFeePercentage,\\n\\t\\tuint256 _debt,\\n\\t\\tuint256 _coll,\\n\\t\\taddress _upperHint,\\n\\t\\taddress _lowerHint\\n\\t) external override {\\n\\t\\t_requireTroveisNotActive(msg.sender);\\n\\n\\t\\tuint256 price = priceFeed().fetchPrice();\\n\\t\\tbool isRecoveryMode = _checkRecoveryMode(price);\\n\\n\\t\\t_requireValidMaxFeePercentage(_maxFeePercentage, isRecoveryMode);\\n\\n\\t\\tuint256 borrowingFee;\\n\\t\\tuint256 netColl = _coll;\\n\\n\\t\\tif (!isRecoveryMode) {\\n\\t\\t\\t// Calc fee, verify user acceptance\\n\\t\\t\\tborrowingFee = _calcBorrowingFee(_debt, price);\\n\\t\\t\\t_requireUserAcceptsFee(\\n\\t\\t\\t\\tborrowingFee,\\n\\t\\t\\t\\t_debt.mul(DECIMAL_PRECISION).div(price),\\n\\t\\t\\t\\t_maxFeePercentage\\n\\t\\t\\t);\\n\\n\\t\\t\\tassert(netColl > borrowingFee);\\n\\t\\t\\tnetColl = netColl.sub(borrowingFee);\\n\\t\\t}\\n\\n\\t\\t// GAS COMP is set aside in the ActivePool;\\n\\t\\t// netColl available in the trove is coll minus DAI_GAS_COMPENSATION\\n\\t\\t_requireAtLeastGasCompAndBorrowingFeeCollateral(netColl, borrowingFee);\\n\\t\\tnetColl = netColl.sub(DAI_GAS_COMPENSATION);\\n\\n\\t\\t// Borrowing capacity depends on collateral minus gas comp and borrowing fee\\n\\t\\tuint256 ICR = BaseMath._computeCR(netColl, _debt, price);\\n\\t\\tuint256 NICR = BaseMath._computeNominalCR(netColl, _debt);\\n\\n\\t\\tif (isRecoveryMode) {\\n\\t\\t\\t_requireICRisAboveCCR(ICR);\\n\\t\\t} else {\\n\\t\\t\\t_requireICRisAboveMCR(ICR);\\n\\t\\t\\tuint256 newTCR = _getNewTCRFromTroveChange(netColl, true, _debt, true, price); // bools: coll increase, debt increase\\n\\t\\t\\t_requireNewTCRisAboveCCR(newTCR);\\n\\t\\t}\\n\\n\\t\\t// Set the trove struct's properties\\n\\t\\tvault().setTroveStatus(msg.sender, 1);\\n\\t\\tvault().increaseTroveColl(msg.sender, netColl);\\n\\t\\tvault().increaseTroveDebt(msg.sender, _debt);\\n\\n\\t\\tvault().updateTroveRewardSnapshots(msg.sender);\\n\\t\\tuint256 stake = vault().updateStakeAndTotalStakes(msg.sender);\\n\\n\\t\\tsortedTroves().insert(msg.sender, NICR, _upperHint, _lowerHint);\\n\\t\\tuint256 arrayIndex = vault().addTroveOwnerToArray(msg.sender);\\n\\n\\t\\t_withdrawPAI(msg.sender, _debt);\\n\\n\\t\\t// Move Collateral to ActivePool\\n\\t\\t_activePoolAddColl(msg.sender, _coll); // Transfer all the collateral supplied ( including borrowing Fee + GAS_COMP to ActivePool)j\\n\\t\\tactivePool().increaseGasCompensationBalance(); // Increment gas compensation tracker in ActivePool\\n\\n\\t\\t// Send fee to MYO staking contract\\n\\t\\t_transferFeeToStacking(msg.sender, borrowingFee);\\n\\n\\t\\temit TroveCreated(msg.sender, arrayIndex);\\n\\t\\temit TroveUpdated(\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\t_debt,\\n\\t\\t\\tnetColl,\\n\\t\\t\\tstake,\\n\\t\\t\\tborrowingFee,\\n\\t\\t\\tuint8(BorrowerOperation.openTrove)\\n\\t\\t);\\n\\t}\\n\\n\\tfunction closeTrove() external override {\\n\\t\\t_requireActiveTrove(msg.sender);\\n\\n\\t\\tuint256 price = priceFeed().fetchPrice();\\n\\t\\t_requireNotInRecoveryMode(price);\\n\\n\\t\\tvault().applyPendingRewards(msg.sender);\\n\\n\\t\\tuint256 coll = vault().getTroveColl(msg.sender);\\n\\t\\tuint256 debt = vault().getTroveDebt(msg.sender);\\n\\n\\t\\t_requireSufficientBalance(msg.sender, debt);\\n\\n\\t\\tuint256 newTCR = _getNewTCRFromTroveChange(coll, false, debt, false, price);\\n\\t\\t_requireNewTCRisAboveCCR(newTCR);\\n\\n\\t\\tvault().removeStake(msg.sender);\\n\\t\\tvault().closeTrove(msg.sender);\\n\\n\\t\\temit TroveUpdated(msg.sender, 0, 0, 0, 0, uint8(BorrowerOperation.closeTrove));\\n\\n\\t\\t// Burn the repaid LUSD from the user's balance and the gas compensation from the Gas Pool\\n\\t\\t_repayPAI(msg.sender, debt);\\n\\n\\t\\tactivePool().decreaseGasCompensationBalance();\\n\\n\\t\\t// Send the collateral back to the user (Including GAS Comp reserved on openTrove)\\n\\t\\tactivePool().sendColl(msg.sender, coll.add(DAI_GAS_COMPENSATION));\\n\\t}\\n\\n\\tfunction addColl(\\n\\t\\tuint256 _collIncrease,\\n\\t\\taddress _upperHint,\\n\\t\\taddress _lowerHint\\n\\t) external override {\\n\\t\\t_adjustTrove(msg.sender, _collIncrease, true, 0, false, _upperHint, _lowerHint, 0);\\n\\t}\\n\\n\\t// Withdraw ETH collateral from a trove\\n\\tfunction withdrawColl(\\n\\t\\tuint256 _collWithdrawal,\\n\\t\\taddress _upperHint,\\n\\t\\taddress _lowerHint\\n\\t) external override {\\n\\t\\t_adjustTrove(msg.sender, _collWithdrawal, false, 0, false, _upperHint, _lowerHint, 0);\\n\\t}\\n\\n\\t// Withdraw LUSD tokens from a trove: mint new LUSD tokens to the owner, and increase the trove's debt accordingly\\n\\tfunction withdrawPAI(\\n\\t\\tuint256 _maxFeePercentage,\\n\\t\\tuint256 _paiWithdrawal,\\n\\t\\taddress _upperHint,\\n\\t\\taddress _lowerHint\\n\\t) external override {\\n\\t\\t// TODO: Add borrowing Fee\\n\\t\\t_adjustTrove(\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\t0,\\n\\t\\t\\tfalse,\\n\\t\\t\\t_paiWithdrawal,\\n\\t\\t\\ttrue,\\n\\t\\t\\t_upperHint,\\n\\t\\t\\t_lowerHint,\\n\\t\\t\\t_maxFeePercentage\\n\\t\\t);\\n\\t}\\n\\n\\t// Repay LUSD tokens to a Trove: Burn the repaid LUSD tokens, and reduce the trove's debt accordingly\\n\\tfunction repayPAI(\\n\\t\\tuint256 _paiAmount,\\n\\t\\taddress _upperHint,\\n\\t\\taddress _lowerHint\\n\\t) external override {\\n\\t\\t_adjustTrove(msg.sender, 0, false, _paiAmount, false, _upperHint, _lowerHint, 0);\\n\\t}\\n\\n\\t// solhint-disable-next-line contract-name-camelcase\\n\\tstruct LocalVariables_AdjustTrove {\\n\\t\\tuint256 price;\\n\\t\\tbool isRecoveryMode;\\n\\t\\tuint256 debt;\\n\\t\\tuint256 coll;\\n\\t\\tuint256 newDebt;\\n\\t\\tuint256 newColl;\\n\\t\\tuint256 oldICR;\\n\\t\\tuint256 newICR;\\n\\t\\tuint256 stake;\\n\\t\\tuint256 newNICR;\\n\\t\\tuint256 borrowingFee;\\n\\t}\\n\\n\\tfunction adjustTrove(\\n\\t\\tuint256 _collChange,\\n\\t\\tbool _isCollIncrease,\\n\\t\\tuint256 _debtChange,\\n\\t\\tbool _isDebtIncrease,\\n\\t\\taddress _upperHint,\\n\\t\\taddress _lowerHint,\\n\\t\\tuint256 _maxFeePercentage\\n\\t) external override {\\n\\t\\t_adjustTrove(\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\t_collChange,\\n\\t\\t\\t_isCollIncrease,\\n\\t\\t\\t_debtChange,\\n\\t\\t\\t_isDebtIncrease,\\n\\t\\t\\t_upperHint,\\n\\t\\t\\t_lowerHint,\\n\\t\\t\\t_maxFeePercentage\\n\\t\\t);\\n\\t}\\n\\n\\tfunction _adjustTrove(\\n\\t\\taddress _borrower,\\n\\t\\tuint256 _collChange,\\n\\t\\tbool _isCollIncrease,\\n\\t\\tuint256 _debtChange,\\n\\t\\tbool _isDebtIncrease,\\n\\t\\taddress _upperHint,\\n\\t\\taddress _lowerHint,\\n\\t\\tuint256 _maxFeePercentage\\n\\t) internal {\\n\\t\\t_requireActiveTrove(_borrower);\\n\\t\\t_requireNonZeroAdjustment(_collChange, _debtChange);\\n\\n\\t\\tLocalVariables_AdjustTrove memory vars;\\n\\n\\t\\tvars.price = priceFeed().fetchPrice();\\n\\t\\tvars.isRecoveryMode = _checkRecoveryMode(vars.price);\\n\\n\\t\\tif (_isDebtIncrease) {\\n\\t\\t\\t_requireValidMaxFeePercentage(_maxFeePercentage, vars.isRecoveryMode);\\n\\t\\t\\t_requireNonZeroDebtChange(_debtChange);\\n\\n\\t\\t\\tif (!vars.isRecoveryMode) {\\n\\t\\t\\t\\tvars.borrowingFee = _calcBorrowingFee(_debtChange, vars.price);\\n\\t\\t\\t\\t_requireUserAcceptsFee(\\n\\t\\t\\t\\t\\tvars.borrowingFee,\\n\\t\\t\\t\\t\\t_debtChange.mul(DECIMAL_PRECISION).div(vars.price),\\n\\t\\t\\t\\t\\t_maxFeePercentage\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Apply redistributions\\n\\t\\tvault().applyPendingRewards(_borrower);\\n\\n\\t\\tvars.debt = vault().getTroveDebt(_borrower);\\n\\t\\tvars.coll = vault().getTroveColl(_borrower);\\n\\n\\t\\t// Collateral adjustment should be enough to pay for borrowing fee and leave gas comp locked.\\n\\t\\t_requireValidCollAdjustment(vars.coll, _collChange, _isCollIncrease, vars.borrowingFee);\\n\\n\\t\\tvars.oldICR = BaseMath._computeCR(vars.coll, vars.debt, vars.price);\\n\\t\\tvars.newICR = _getNewICRFromTroveChange(\\n\\t\\t\\tvars.coll,\\n\\t\\t\\tvars.debt,\\n\\t\\t\\t_collChange,\\n\\t\\t\\t_isCollIncrease,\\n\\t\\t\\t_debtChange,\\n\\t\\t\\t_isDebtIncrease,\\n\\t\\t\\tvars.borrowingFee,\\n\\t\\t\\tvars.price\\n\\t\\t);\\n\\n\\t\\t_requireValidTroveAdjustment(\\n\\t\\t\\tvars.isRecoveryMode,\\n\\t\\t\\t_collChange,\\n\\t\\t\\t_isCollIncrease,\\n\\t\\t\\t_debtChange,\\n\\t\\t\\t_isDebtIncrease,\\n\\t\\t\\tvars.oldICR,\\n\\t\\t\\tvars.newICR,\\n\\t\\t\\tvars.price\\n\\t\\t);\\n\\n\\t\\t(vars.newColl, vars.newDebt) = _updateTroveFromAdjustment(\\n\\t\\t\\t_borrower,\\n\\t\\t\\t_collChange,\\n\\t\\t\\t_isCollIncrease,\\n\\t\\t\\t_debtChange,\\n\\t\\t\\t_isDebtIncrease,\\n\\t\\t\\tvars.borrowingFee\\n\\t\\t);\\n\\n\\t\\t// When the adjustment is a debt repayment, check it's a valid amount and that the caller has enough PAI\\n\\t\\tif (!_isDebtIncrease && _debtChange > 0) {\\n\\t\\t\\t_requireValidRepayment(_borrower, vars.debt);\\n\\t\\t\\t_requireSufficientBalance(_borrower, _debtChange);\\n\\t\\t}\\n\\n\\t\\tvars.stake = vault().updateStakeAndTotalStakes(_borrower);\\n\\n\\t\\t// Re-insert trove in to the sorted list\\n\\t\\tvars.newNICR = _getNewNominalICRFromTroveChange(\\n\\t\\t\\tvars.coll,\\n\\t\\t\\tvars.debt,\\n\\t\\t\\t_collChange,\\n\\t\\t\\t_isCollIncrease,\\n\\t\\t\\t_debtChange,\\n\\t\\t\\t_isDebtIncrease,\\n\\t\\t\\tvars.borrowingFee\\n\\t\\t);\\n\\n\\t\\tsortedTroves().reInsert(_borrower, vars.newNICR, _upperHint, _lowerHint);\\n\\n\\t\\temit TroveUpdated(\\n\\t\\t\\t_borrower,\\n\\t\\t\\tvars.newDebt,\\n\\t\\t\\tvars.newColl,\\n\\t\\t\\tvars.stake,\\n\\t\\t\\tvars.borrowingFee,\\n\\t\\t\\tuint8(BorrowerOperation.adjustTrove)\\n\\t\\t);\\n\\n\\t\\t// Send fee to MYO staking contract\\n\\t\\t_transferFeeToStacking(_borrower, vars.borrowingFee);\\n\\n\\t\\t// Get Coll Gem from msg.sender and issue new PAI\\n\\t\\t_moveCollAndDebtFromAdjustment(\\n\\t\\t\\t_borrower,\\n\\t\\t\\t_collChange,\\n\\t\\t\\t_isCollIncrease,\\n\\t\\t\\t_debtChange,\\n\\t\\t\\t_isDebtIncrease\\n\\t\\t);\\n\\t}\\n\\n\\t// Update trove's coll and debt based on whether they increase or decrease\\n\\tfunction _updateTroveFromAdjustment(\\n\\t\\taddress _borrower,\\n\\t\\tuint256 _collChange,\\n\\t\\tbool _isCollIncrease,\\n\\t\\tuint256 _debtChange,\\n\\t\\tbool _isDebtIncrease,\\n\\t\\tuint256 _borrowingFee\\n\\t) internal returns (uint256, uint256) {\\n\\t\\tuint256 newColl = (_isCollIncrease)\\n\\t\\t\\t? vault().increaseTroveColl(_borrower, _collChange)\\n\\t\\t\\t: vault().decreaseTroveColl(_borrower, _collChange);\\n\\t\\tuint256 newDebt = (_isDebtIncrease)\\n\\t\\t\\t? vault().increaseTroveDebt(_borrower, _debtChange)\\n\\t\\t\\t: vault().decreaseTroveDebt(_borrower, _debtChange);\\n\\n\\t\\tnewColl = vault().decreaseTroveColl(_borrower, _borrowingFee);\\n\\n\\t\\treturn (newColl, newDebt);\\n\\t}\\n\\n\\tfunction _moveCollAndDebtFromAdjustment(\\n\\t\\taddress _borrower,\\n\\t\\tuint256 _collChange,\\n\\t\\tbool _isCollIncrease,\\n\\t\\tuint256 _debtChange,\\n\\t\\tbool _isDebtIncrease\\n\\t) internal {\\n\\t\\tif (_debtChange > 0) {\\n\\t\\t\\tif (_isDebtIncrease) {\\n\\t\\t\\t\\t_withdrawPAI(_borrower, _debtChange);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t_repayPAI(_borrower, _debtChange);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (_collChange > 0) {\\n\\t\\t\\tif (_isCollIncrease) {\\n\\t\\t\\t\\t_activePoolAddColl(_borrower, _collChange);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tactivePool().sendColl(_borrower, _collChange);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t// solhint-disable-next-line no-empty-blocks\\n\\tfunction claimCollateral() external override {}\\n\\n\\tfunction _getNewTCRFromTroveChange(\\n\\t\\tuint256 _collChange,\\n\\t\\tbool _isCollIncrease,\\n\\t\\tuint256 _debtChange,\\n\\t\\tbool _isDebtIncrease,\\n\\t\\tuint256 _price\\n\\t) internal view returns (uint256) {\\n\\t\\tuint256 totalColl = getEntireSystemColl();\\n\\t\\tuint256 totalDebt = getEntireSystemDebt();\\n\\n\\t\\ttotalColl = _isCollIncrease ? totalColl.add(_collChange) : totalColl.sub(_collChange);\\n\\t\\ttotalDebt = _isDebtIncrease ? totalDebt.add(_debtChange) : totalDebt.sub(_debtChange);\\n\\n\\t\\tuint256 newTCR = BaseMath._computeCR(totalColl, totalDebt, _price);\\n\\t\\treturn newTCR;\\n\\t}\\n\\n\\t// Compute the new collateral ratio, considering the change in coll and debt. Assumes 0 pending rewards.\\n\\tfunction _getNewICRFromTroveChange(\\n\\t\\tuint256 _coll,\\n\\t\\tuint256 _debt,\\n\\t\\tuint256 _collChange,\\n\\t\\tbool _isCollIncrease,\\n\\t\\tuint256 _debtChange,\\n\\t\\tbool _isDebtIncrease,\\n\\t\\tuint256 _borrowingFee,\\n\\t\\tuint256 _price\\n\\t) internal pure returns (uint256) {\\n\\t\\t(uint256 newColl, uint256 newDebt) = _getNewTroveAmounts(\\n\\t\\t\\t_coll,\\n\\t\\t\\t_debt,\\n\\t\\t\\t_collChange,\\n\\t\\t\\t_isCollIncrease,\\n\\t\\t\\t_debtChange,\\n\\t\\t\\t_isDebtIncrease,\\n\\t\\t\\t_borrowingFee\\n\\t\\t);\\n\\n\\t\\tuint256 newICR = BaseMath._computeCR(newColl, newDebt, _price);\\n\\t\\treturn newICR;\\n\\t}\\n\\n\\t// Compute the new collateral ratio, considering the change in coll and debt. Assumes 0 pending rewards.\\n\\tfunction _getNewNominalICRFromTroveChange(\\n\\t\\tuint256 _coll,\\n\\t\\tuint256 _debt,\\n\\t\\tuint256 _collChange,\\n\\t\\tbool _isCollIncrease,\\n\\t\\tuint256 _debtChange,\\n\\t\\tbool _isDebtIncrease,\\n\\t\\tuint256 _borrowingFee\\n\\t) internal pure returns (uint256) {\\n\\t\\t(uint256 newColl, uint256 newDebt) = _getNewTroveAmounts(\\n\\t\\t\\t_coll,\\n\\t\\t\\t_debt,\\n\\t\\t\\t_collChange,\\n\\t\\t\\t_isCollIncrease,\\n\\t\\t\\t_debtChange,\\n\\t\\t\\t_isDebtIncrease,\\n\\t\\t\\t_borrowingFee\\n\\t\\t);\\n\\n\\t\\tuint256 newNICR = BaseMath._computeNominalCR(newColl, newDebt);\\n\\t\\treturn newNICR;\\n\\t}\\n\\n\\tfunction _getNewTroveAmounts(\\n\\t\\tuint256 _coll,\\n\\t\\tuint256 _debt,\\n\\t\\tuint256 _collChange,\\n\\t\\tbool _isCollIncrease,\\n\\t\\tuint256 _debtChange,\\n\\t\\tbool _isDebtIncrease,\\n\\t\\tuint256 _borrowingFee\\n\\t) internal pure returns (uint256, uint256) {\\n\\t\\tuint256 newColl = _coll;\\n\\t\\tuint256 newDebt = _debt;\\n\\n\\t\\tnewColl = _isCollIncrease ? _coll.add(_collChange) : _coll.sub(_collChange);\\n\\t\\tnewDebt = _isDebtIncrease ? _debt.add(_debtChange) : _debt.sub(_debtChange);\\n\\n\\t\\tassert(newColl >= _borrowingFee);\\n\\t\\tnewColl = newColl.sub(_borrowingFee);\\n\\n\\t\\treturn (newColl, newDebt);\\n\\t}\\n\\n\\t// --- Borrowing fee functions ---\\n\\n\\t// Calculate borrowing fee based on trove's debt; fee is charged in gem tokens and\\n\\t// sent to the stacking contract for distribution.\\n\\t// function _triggerBorrowingFee(\\n\\t// \\taddress _borrower,\\n\\t// \\tuint256 _debt,\\n\\t// \\tuint256 _maxFeePercentage,\\n\\t// \\tuint256 _price\\n\\t// ) internal returns (uint256) {\\n\\t// \\tvault().decayBaseRateFromBorrowing(); // decay the baseRate state variable\\n\\n\\t// \\t// Get Borrowing Fee in GEMs (Fees are paid in collateral token)\\n\\t// \\tuint256 borrowingFee_gem = vault().getBorrowingFee(_debt, _price);\\n\\n\\t// \\t_requireUserAcceptsFee(\\n\\t// \\t\\tborrowingFee_gem,\\n\\t// \\t\\t_debt.mul(DECIMAL_PRECISION).div(_price),\\n\\t// \\t\\t_maxFeePercentage\\n\\t// \\t);\\n\\n\\t// \\t// Send fee to MYO staking contract\\n\\t// \\t_transferFeeToStacking(_borrower, borrowingFee_gem);\\n\\n\\t// \\treturn borrowingFee_gem;\\n\\t// }\\n\\n\\t// Calculate borrowing fee based on trove's debt; fee is charged in gem tokens and\\n\\t// sent to the stacking contract for distribution.\\n\\tfunction _calcBorrowingFee(uint256 _debt, uint256 _price) internal returns (uint256) {\\n\\t\\tvault().decayBaseRateFromBorrowing(); // decay the baseRate state variable\\n\\n\\t\\t// Get Borrowing Fee in GEMs (Fees are paid in collateral token)\\n\\t\\tuint256 borrowingFee = vault().getBorrowingFee(_debt, _price);\\n\\n\\t\\treturn borrowingFee;\\n\\t}\\n\\n\\tfunction _transferFeeToStacking(address _borrower, uint256 _fee) internal {\\n\\t\\temit BorrowingFeePaid(_borrower, _fee);\\n\\n\\t\\tactivePool().transferFeeToStacking(_fee);\\n\\t}\\n\\n\\t// Send GEM tokens to Active Pool and increase its recorded Coll balance\\n\\tfunction _activePoolAddColl(address _borrower, uint256 _amount) internal {\\n\\t\\tactivePool().receiveColl(_borrower, _amount);\\n\\t}\\n\\n\\t// function _gasPoolAddTokens(address _sender, uint _amount) internal {\\n\\t// \\tgemToken().transferFrom(_sender, address(gasPool()), _amount);\\n\\t// }\\n\\n\\t// Issue the specified amount of PAI to _borrower and increases the total active debt\\n\\tfunction _withdrawPAI(address _borrower, uint256 _amount) internal {\\n\\t\\tactivePool().increaseDebt(_amount);\\n\\t\\tpaiToken().mint(_borrower, _amount);\\n\\t}\\n\\n\\t// Burn the specified amount of PAI from _borrower and decreases the total active debt\\n\\tfunction _repayPAI(address _borrower, uint256 _amount) internal {\\n\\t\\tactivePool().decreaseDebt(_amount);\\n\\t\\tpaiToken().burn(_borrower, _amount);\\n\\t}\\n\\n\\t// Require wrappers\\n\\tfunction _requireActiveTrove(address _borrower) internal view {\\n\\t\\trequire(\\n\\t\\t\\tvault().getTroveStatus(_borrower) == TroveStatus.active,\\n\\t\\t\\t\\\"BorrowerOps: Trove must be active\\\"\\n\\t\\t);\\n\\t}\\n\\n\\tfunction _requireValidTroveAdjustment(\\n\\t\\tbool _isRecoveryMode,\\n\\t\\tuint256 _collChange,\\n\\t\\tbool _isCollIncrease,\\n\\t\\tuint256 _debtChange,\\n\\t\\tbool _isDebtIncrease,\\n\\t\\tuint256 _oldICR,\\n\\t\\tuint256 _newICR,\\n\\t\\tuint256 _price\\n\\t) internal view {\\n\\t\\t/*\\n\\t\\t *In Recovery Mode, only allow:\\n\\t\\t *\\n\\t\\t * - Pure collateral top-up\\n\\t\\t * - Pure debt repayment\\n\\t\\t * - Collateral top-up with debt repayment\\n\\t\\t * - A debt increase combined with a collateral top-up which makes the ICR >= 150% and improves the ICR (and by extension improves the TCR).\\n\\t\\t *\\n\\t\\t * In Normal Mode, ensure:\\n\\t\\t *\\n\\t\\t * - The new ICR is above MCR\\n\\t\\t * - The adjustment won't pull the TCR below CCR\\n\\t\\t */\\n\\t\\tif (_isRecoveryMode) {\\n\\t\\t\\t_requireNoCollWithdrawal(_collChange, _isCollIncrease);\\n\\t\\t\\tif (_isDebtIncrease) {\\n\\t\\t\\t\\t_requireICRisAboveCCR(_newICR);\\n\\t\\t\\t\\t_requireNewICRisAboveOldICR(_newICR, _oldICR);\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\t// if Normal Mode\\n\\t\\t\\t_requireICRisAboveMCR(_newICR);\\n\\t\\t\\tuint256 newTCR = _getNewTCRFromTroveChange(\\n\\t\\t\\t\\t_collChange,\\n\\t\\t\\t\\t_isCollIncrease,\\n\\t\\t\\t\\t_debtChange,\\n\\t\\t\\t\\t_isDebtIncrease,\\n\\t\\t\\t\\t_price\\n\\t\\t\\t);\\n\\t\\t\\t_requireNewTCRisAboveCCR(newTCR);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _requireNoCollWithdrawal(uint256 _collChange, bool _isCollIncrease) internal pure {\\n\\t\\trequire(\\n\\t\\t\\t_isCollIncrease == true || _collChange == 0,\\n\\t\\t\\t\\\"BorrowerOps: Collateral withdrawal not permitted Recovery Mode\\\"\\n\\t\\t);\\n\\t}\\n\\n\\t// Valid adjustment is when the collateral left in the trove is greater than any\\n\\t// pending borrowing fee that needs to be charged plus Gas Comp.\\n\\t// borrowingFee can be 0, in that case min collateral is equal to Gas Comp.\\n\\tfunction _requireValidCollAdjustment(\\n\\t\\tuint256 _coll,\\n\\t\\tuint256 _collChange,\\n\\t\\tbool _isCollIncrease,\\n\\t\\tuint256 _borrowingFee\\n\\t) internal pure {\\n\\t\\tuint256 minCollateral = _borrowingFee.add(DAI_GAS_COMPENSATION);\\n\\n\\t\\tif (_isCollIncrease) {\\n\\t\\t\\t// Coll increase could still leave collateral below minimum requirement depending on the borrowing fees\\n\\t\\t\\t// that need to be applied.\\n\\t\\t\\trequire(\\n\\t\\t\\t\\t_coll.add(_collChange) >= minCollateral,\\n\\t\\t\\t\\t\\\"BorrowerOps: Not enough collateral for adjustment\\\"\\n\\t\\t\\t);\\n\\t\\t} else {\\n\\t\\t\\t// A coll decrease requires a trove with  minimum collateral equal to Gas Comp (if borrowing fee is 0),\\n\\t\\t\\t// so coll has to be greater than the amount withdraw plus min collateral\\n\\t\\t\\trequire(\\n\\t\\t\\t\\t_coll >= _collChange.add(minCollateral),\\n\\t\\t\\t\\t\\\"BorrowerOps: Not enough collateral for adjustment\\\"\\n\\t\\t\\t);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _requireAtLeastGasCompAndBorrowingFeeCollateral(uint256 _coll, uint256 _borrowingFee)\\n\\t\\tinternal\\n\\t\\tpure\\n\\t{\\n\\t\\trequire(\\n\\t\\t\\t_coll >= DAI_GAS_COMPENSATION.add(_borrowingFee),\\n\\t\\t\\t\\\"BorrowerOps: Not enough collateral for Gas Compensation & Borrowing Fee\\\"\\n\\t\\t);\\n\\t}\\n\\n\\tfunction _requireNonZeroAdjustment(uint256 _collChange, uint256 _debtChange) internal pure {\\n\\t\\trequire(\\n\\t\\t\\t_collChange != 0 || _debtChange != 0,\\n\\t\\t\\t\\\"BorrowerOps: There must be either a collateral change or a debt change\\\"\\n\\t\\t);\\n\\t}\\n\\n\\tfunction _requireNonZeroDebtChange(uint256 _debtChange) internal pure {\\n\\t\\trequire(_debtChange > 0, \\\"BorrowerOps: Non-Zero debt change is required\\\");\\n\\t}\\n\\n\\tfunction _requireSufficientBalance(address _borrower, uint256 _repayment) internal view {\\n\\t\\tuint256 balance = paiToken().balanceOf(_borrower);\\n\\t\\trequire(balance >= _repayment, \\\"BorrowerOps: Borrower does not have enough PAI balance\\\");\\n\\t}\\n\\n\\tfunction _requireValidRepayment(address _borrower, uint256 _amount) internal view {\\n\\t\\tuint256 currentDebt = vault().getTroveDebt(_borrower);\\n\\t\\trequire(_amount <= currentDebt, \\\"BorrowerOps: Trove debt is less than repayment amount\\\");\\n\\t}\\n\\n\\tfunction _requireNewICRisAboveOldICR(uint256 _newICR, uint256 _oldICR) internal pure {\\n\\t\\trequire(\\n\\t\\t\\t_newICR >= _oldICR,\\n\\t\\t\\t\\\"BorrowerOps: Cannot decrease your Trove's ICR in Recovery Mode\\\"\\n\\t\\t);\\n\\t}\\n\\n\\tfunction _requireICRisAboveMCR(uint256 _newICR) internal pure {\\n\\t\\trequire(\\n\\t\\t\\t_newICR >= MCR,\\n\\t\\t\\t\\\"BorrowerOps: An operation that would result in ICR < MCR is not permitted\\\"\\n\\t\\t);\\n\\t}\\n\\n\\tfunction _requireICRisAboveCCR(uint256 _newICR) internal pure {\\n\\t\\trequire(_newICR >= CCR, \\\"BorrowerOps: Operation must leave trove with ICR >= CCR\\\");\\n\\t}\\n\\n\\tfunction _requireNewTCRisAboveCCR(uint256 _newTCR) internal pure {\\n\\t\\trequire(\\n\\t\\t\\t_newTCR >= CCR,\\n\\t\\t\\t\\\"BorrowerOps: An operation that would result in TCR < CCR is not permitted\\\"\\n\\t\\t);\\n\\t}\\n\\n\\tfunction _requireTroveisNotActive(address _borrower) internal view {\\n\\t\\trequire(\\n\\t\\t\\tvault().getTroveStatus(_borrower) != TroveStatus.active,\\n\\t\\t\\t\\\"BorrowerOps: Trove already exists\\\"\\n\\t\\t);\\n\\t}\\n\\n\\tfunction _requireNotInRecoveryMode(uint256 _price) internal view {\\n\\t\\trequire(\\n\\t\\t\\t!_checkRecoveryMode(_price),\\n\\t\\t\\t\\\"BorrowerOps: Operation not permitted during Recovery Mode\\\"\\n\\t\\t);\\n\\t}\\n\\n\\tfunction _requireValidMaxFeePercentage(uint256 _maxFeePercentage, bool _isRecoveryMode)\\n\\t\\tinternal\\n\\t\\tpure\\n\\t{\\n\\t\\tif (_isRecoveryMode) {\\n\\t\\t\\trequire(\\n\\t\\t\\t\\t_maxFeePercentage <= DECIMAL_PRECISION,\\n\\t\\t\\t\\t\\\"BorrowerOps: Max fee percentage must less than or equal to 100%\\\"\\n\\t\\t\\t);\\n\\t\\t} else {\\n\\t\\t\\trequire(\\n\\t\\t\\t\\t_maxFeePercentage >= BORROWING_FEE_FLOOR && _maxFeePercentage <= DECIMAL_PRECISION,\\n\\t\\t\\t\\t\\\"BorrowerOps: Max fee percentage must be between 0.5% and 100%\\\"\\n\\t\\t\\t);\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0xc0f53870d79f31689be53bd49e1bf4eacf56c8d20ce6700202da118cde2020d1\",\"license\":\"MIT\"},\"contracts/core/CoreRef.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"../dependencies/CheckContract.sol\\\";\\nimport \\\"../dependencies/Constants.sol\\\";\\nimport \\\"../dependencies/BaseMath.sol\\\";\\n\\nimport \\\"../interfaces/ICore.sol\\\";\\n\\nimport \\\"../interfaces/IMYOStaking.sol\\\";\\nimport \\\"../interfaces/IMYOToken.sol\\\";\\nimport \\\"../interfaces/IPAIToken.sol\\\";\\n\\nimport \\\"../interfaces/IPriceFeed.sol\\\";\\nimport \\\"../interfaces/IDefaultPool.sol\\\";\\nimport \\\"../interfaces/IActivePool.sol\\\";\\nimport \\\"../interfaces/IBorrowerOperations.sol\\\";\\n\\ncontract CoreRef is CheckContract, Constants, IBase {\\n\\tusing SafeMath for uint256;\\n\\n\\tICore public immutable core;\\n\\n\\tconstructor(address _core) {\\n\\t\\tcheckContract(_core);\\n\\t\\tcore = ICore(_core);\\n\\t}\\n\\n\\t// function setAddresses(\\n\\t//     address _core\\n\\t// )\\n\\t//     external\\n\\t//     onlyOwner\\n\\t// {\\n\\t//     checkContract(_core);\\n\\t//     core = ICore(_core);\\n\\t//     renounceOwnership();\\n\\t// }\\n\\n\\tmodifier onlyVault() {\\n\\t\\trequire(msg.sender == address(core.vault()), \\\"CoreRef: Caller must be Vault\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier onlyBO() {\\n\\t\\trequire(\\n\\t\\t\\tmsg.sender == address(core.borrowerOperations()),\\n\\t\\t\\t\\\"CoreRef: Caller must be BorrowerOperations\\\"\\n\\t\\t);\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier onlyActivePool() {\\n\\t\\trequire(msg.sender == address(core.activePool()), \\\"CoreRef: Caller must be ActivePool\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t// Getters\\n\\n\\tfunction gemToken() public view returns (IERC20) {\\n\\t\\treturn core.gemToken();\\n\\t}\\n\\n\\tfunction paiToken() public view returns (IPAIToken) {\\n\\t\\treturn core.paiToken();\\n\\t}\\n\\n\\tfunction myoToken() public view returns (IMYOToken) {\\n\\t\\treturn core.myoToken();\\n\\t}\\n\\n\\tfunction sortedTroves() public view returns (ISortedTroves) {\\n\\t\\treturn core.sortedTroves();\\n\\t}\\n\\n\\tfunction vault() public view returns (IVault) {\\n\\t\\treturn core.vault();\\n\\t}\\n\\n\\tfunction myoStaking() public view returns (IMYOStaking) {\\n\\t\\treturn core.myoStaking();\\n\\t}\\n\\n\\tfunction priceFeed() public view returns (IPriceFeed) {\\n\\t\\treturn core.priceFeed();\\n\\t}\\n\\n\\tfunction activePool() public view returns (IActivePool) {\\n\\t\\treturn core.activePool();\\n\\t}\\n\\n\\tfunction defaultPool() public view returns (IDefaultPool) {\\n\\t\\treturn core.defaultPool();\\n\\t}\\n\\n\\tfunction collSurplusPool() public view returns (ICollSurplusPool) {\\n\\t\\treturn core.collSurplusPool();\\n\\t}\\n\\n\\tfunction borrowerOperations() public view returns (IBorrowerOperations) {\\n\\t\\treturn core.borrowerOperations();\\n\\t}\\n\\n\\t// Helper Functions\\n\\n\\tfunction getEntireSystemColl() public view returns (uint256 entireSystemColl) {\\n\\t\\tuint256 activeColl = activePool().getColl();\\n\\t\\tuint256 liquidatedColl = defaultPool().getColl();\\n\\n\\t\\treturn activeColl.add(liquidatedColl);\\n\\t}\\n\\n\\tfunction getEntireSystemDebt() public view returns (uint256 entireSystemDebt) {\\n\\t\\tuint256 activeDebt = activePool().getDebt();\\n\\t\\tuint256 closedDebt = defaultPool().getDebt();\\n\\n\\t\\treturn activeDebt.add(closedDebt);\\n\\t}\\n\\n\\tfunction _getTCR(uint256 _price) internal view returns (uint256 TCR) {\\n\\t\\tuint256 entireSystemColl = getEntireSystemColl();\\n\\t\\tuint256 entireSystemDebt = getEntireSystemDebt();\\n\\n\\t\\tTCR = BaseMath._computeCR(entireSystemColl, entireSystemDebt, _price);\\n\\n\\t\\treturn TCR;\\n\\t}\\n\\n\\tfunction _checkRecoveryMode(uint256 _price) internal view returns (bool) {\\n\\t\\tuint256 TCR = _getTCR(_price);\\n\\n\\t\\treturn TCR < CCR;\\n\\t}\\n\\n\\tfunction _getNetCollateral(uint256 _collateral) internal pure returns (uint256) {\\n\\t\\treturn\\n\\t\\t\\t_collateral.sub(\\n\\t\\t\\t\\tDAI_GAS_COMPENSATION,\\n\\t\\t\\t\\t\\\"Core: Insuficient Net Collateral to cover GAS Comp\\\"\\n\\t\\t\\t);\\n\\t}\\n\\n\\tfunction _getGrossColl(uint256 _debt) internal pure returns (uint256) {\\n\\t\\treturn _debt.add(DAI_GAS_COMPENSATION);\\n\\t}\\n\\n\\tfunction _requireUserAcceptsFee(\\n\\t\\tuint256 _gemFee,\\n\\t\\tuint256 _gemAmount,\\n\\t\\tuint256 _maxFeePercentage\\n\\t) internal pure {\\n\\t\\tuint256 feePercentage = _gemFee.mul(DECIMAL_PRECISION).div(_gemAmount);\\n\\t\\trequire(feePercentage <= _maxFeePercentage, \\\"Fee exceeded provided maximum\\\");\\n\\t}\\n}\\n\",\"keccak256\":\"0xaa9810fc762e1323c91469ddb7f130b266b34929e298a53834fcc9a2977b473b\",\"license\":\"MIT\"},\"contracts/dependencies/BaseMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nlibrary BaseMath {\\n\\tusing SafeMath for uint256;\\n\\n\\tuint256 internal constant DECIMAL_PRECISION = 1e18;\\n\\n\\t/* Precision for Nominal ICR (independent of price). Rationale for the value:\\n\\t *\\n\\t * - Making it \\u201ctoo high\\u201d could lead to overflows.\\n\\t * - Making it \\u201ctoo low\\u201d could lead to an ICR equal to zero, due to truncation from Solidity floor division.\\n\\t *\\n\\t * This value of 1e20 is chosen for safety: the NICR will only overflow for numerator > ~1e39 ETH,\\n\\t * and will only truncate to 0 if the denominator is at least 1e20 times greater than the numerator.\\n\\t *\\n\\t */\\n\\tuint256 internal constant NICR_PRECISION = 1e20;\\n\\n\\tfunction _min(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n\\t\\treturn (_a < _b) ? _a : _b;\\n\\t}\\n\\n\\tfunction _max(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n\\t\\treturn (_a >= _b) ? _a : _b;\\n\\t}\\n\\n\\t/*\\n\\t * Multiply two decimal numbers and use normal rounding rules:\\n\\t * -round product up if 19'th mantissa digit >= 5\\n\\t * -round product down if 19'th mantissa digit < 5\\n\\t *\\n\\t * Used only inside the exponentiation, _decPow().\\n\\t */\\n\\tfunction decMul(uint256 x, uint256 y) internal pure returns (uint256 decProd) {\\n\\t\\tuint256 prod_xy = x.mul(y);\\n\\n\\t\\tdecProd = prod_xy.add(DECIMAL_PRECISION / 2).div(DECIMAL_PRECISION);\\n\\t}\\n\\n\\t/*\\n\\t * _decPow: Exponentiation function for 18-digit decimal base, and integer exponent n.\\n\\t *\\n\\t * Uses the efficient \\\"exponentiation by squaring\\\" algorithm. O(log(n)) complexity.\\n\\t *\\n\\t * Called by two functions that represent time in units of minutes:\\n\\t * 1) TroveManager._calcDecayedBaseRate\\n\\t * 2) CommunityIssuance._getCumulativeIssuanceFraction\\n\\t *\\n\\t * The exponent is capped to avoid reverting due to overflow. The cap 525600000 equals\\n\\t * \\\"minutes in 1000 years\\\": 60 * 24 * 365 * 1000\\n\\t *\\n\\t * If a period of > 1000 years is ever used as an exponent in either of the above functions, the result will be\\n\\t * negligibly different from just passing the cap, since:\\n\\t *\\n\\t * In function 1), the decayed base rate will be 0 for 1000 years or > 1000 years\\n\\t * In function 2), the difference in tokens issued at 1000 years and any time > 1000 years, will be negligible\\n\\t */\\n\\tfunction _decPow(uint256 _base, uint256 _minutes) internal pure returns (uint256) {\\n\\t\\tif (_minutes > 525600000) {\\n\\t\\t\\t_minutes = 525600000;\\n\\t\\t} // cap to avoid overflow\\n\\n\\t\\tif (_minutes == 0) {\\n\\t\\t\\treturn DECIMAL_PRECISION;\\n\\t\\t}\\n\\n\\t\\tuint256 y = DECIMAL_PRECISION;\\n\\t\\tuint256 x = _base;\\n\\t\\tuint256 n = _minutes;\\n\\n\\t\\t// Exponentiation-by-squaring\\n\\t\\twhile (n > 1) {\\n\\t\\t\\tif (n % 2 == 0) {\\n\\t\\t\\t\\tx = decMul(x, x);\\n\\t\\t\\t\\tn = n.div(2);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t// if (n % 2 != 0)\\n\\t\\t\\t\\ty = decMul(x, y);\\n\\t\\t\\t\\tx = decMul(x, x);\\n\\t\\t\\t\\tn = (n.sub(1)).div(2);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn decMul(x, y);\\n\\t}\\n\\n\\tfunction _getAbsoluteDifference(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n\\t\\treturn (_a >= _b) ? _a.sub(_b) : _b.sub(_a);\\n\\t}\\n\\n\\tfunction _computeNominalCR(uint256 _coll, uint256 _debt) internal pure returns (uint256) {\\n\\t\\tif (_debt > 0) {\\n\\t\\t\\treturn _coll.mul(NICR_PRECISION).div(_debt);\\n\\t\\t}\\n\\t\\t// Return the maximal value for uint256 if the Trove has a debt of 0. Represents \\\"infinite\\\" CR.\\n\\t\\telse {\\n\\t\\t\\t// if (_debt == 0)\\n\\t\\t\\treturn 2**256 - 1;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _computeCR(\\n\\t\\tuint256 _coll,\\n\\t\\tuint256 _debt,\\n\\t\\tuint256 _price\\n\\t) internal pure returns (uint256) {\\n\\t\\tif (_debt > 0) {\\n\\t\\t\\tuint256 newCollRatio = _coll.mul(_price).div(_debt);\\n\\t\\t\\treturn newCollRatio;\\n\\t\\t}\\n\\t\\t// Return the maximal value for uint256 if the Trove has a debt of 0. Represents \\\"infinite\\\" CR.\\n\\t\\telse {\\n\\t\\t\\t// if (_debt == 0)\\n\\t\\t\\treturn 2**256 - 1;\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x285eace200a08f5136b406fe3051fafc95e56550e7df16a346670c939b61122d\",\"license\":\"MIT\"},\"contracts/dependencies/CheckContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\ncontract CheckContract {\\n\\t/**\\n\\t * Check that the account is an already deployed non-destroyed contract.\\n\\t * See: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol#L12\\n\\t */\\n\\tfunction checkContract(address _account) internal view {\\n\\t\\trequire(_account != address(0), \\\"Account cannot be zero address\\\");\\n\\n\\t\\tuint256 size;\\n\\t\\t// solhint-disable-next-line no-inline-assembly\\n\\t\\tassembly {\\n\\t\\t\\tsize := extcodesize(_account)\\n\\t\\t}\\n\\t\\trequire(size > 0, \\\"Account code size cannot be zero\\\");\\n\\t}\\n}\\n\",\"keccak256\":\"0xb5cb7705e2af49e9ad0be340e8fd106a5bf928fd834ae7e4d22d8c6db17e7844\",\"license\":\"MIT\"},\"contracts/dependencies/Constants.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\ncontract Constants {\\n\\tusing SafeMath for uint256;\\n\\n\\tuint256 public constant DECIMAL_PRECISION = 1e18;\\n\\n\\tuint256 public constant SECONDS_IN_ONE_MINUTE = 60;\\n\\n\\t// uint256 public constant _100pct = 1000000000000000000; // 1e18 == 100%\\n\\n\\t// Minimum collateral ratio for individual troves\\n\\tuint256 public constant MCR = 1100000000000000000; // 110%\\n\\n\\t// Critical system collateral ratio. If the system's total collateral ratio (TCR) falls below the CCR, Recovery Mode is triggered.\\n\\tuint256 public constant CCR = 1500000000000000000; // 150%\\n\\n\\t// Amount of DAI to be locked in gas pool on opening troves\\n\\tuint256 public constant DAI_GAS_COMPENSATION = 200e16; // 2.00\\n\\n\\t// Minimum amount of net PAI debt a trove must have\\n\\tuint256 public constant MIN_NET_DEBT = 1800e18;\\n\\n\\tuint256 public constant HALF_PERCENT_DIVISOR = 200; // dividing by 200 yields 0.5%\\n\\n\\tuint256 public constant BORROWING_FEE_FLOOR = (DECIMAL_PRECISION / 1000) * 5; // 0.005% (1e18 == 100%)\\n\\n\\t// During bootsrap period redemptions are not allowed\\n\\tuint256 public constant BOOTSTRAP_PERIOD = 14 days;\\n\\n\\t// MAX UINT256\\n\\tuint256 public MAX_UINT = 2**256 - 1;\\n}\\n\",\"keccak256\":\"0xdcdd9a915df81cc087e0f7e36af33bc16f927f9690ca6216ab0656ead92b823e\",\"license\":\"MIT\"},\"contracts/interfaces/IActivePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\ninterface IActivePool {\\n\\t// --- Events ---\\n\\tevent ActivePoolDebtUpdated(uint256 _debt);\\n\\tevent ActivePoolCollUpdated(uint256 _coll);\\n\\tevent ActivePoolgasCompensationBalanceUpdated(uint256 gasBalance);\\n\\n\\t// --- Functions ---\\n\\n\\tfunction getColl() external view returns (uint256);\\n\\n\\tfunction getDebt() external view returns (uint256);\\n\\n\\tfunction getGasCompensationBalance() external view returns (uint256);\\n\\n\\tfunction receiveColl(address sender, uint256 _amount) external returns (bool);\\n\\n\\tfunction sendColl(address _account, uint256 _amount) external;\\n\\n\\tfunction increaseDebt(uint256 _amount) external;\\n\\n\\tfunction decreaseDebt(uint256 _amount) external;\\n\\n\\tfunction transferFeeToStacking(uint256 _amount) external;\\n\\n\\tfunction sendGasCompensation(address _account) external;\\n\\n\\tfunction increaseGasCompensationBalance() external;\\n\\n\\tfunction decreaseGasCompensationBalance() external;\\n}\\n\",\"keccak256\":\"0x076c1e5eab0ec84bf88ac69e44b4eb7efe0ec739b4bcd4c0e2179dde69384d74\",\"license\":\"MIT\"},\"contracts/interfaces/IBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\ninterface IBase {\\n\\tenum TroveOperation {\\n\\t\\tapplyPendingRewards,\\n\\t\\tliquidateInNormalMode,\\n\\t\\tliquidateInRecoveryMode,\\n\\t\\tredeemCollateral\\n\\t}\\n\\n\\tenum TroveStatus {\\n\\t\\tnonExistent,\\n\\t\\tactive,\\n\\t\\tclosedByOwner,\\n\\t\\tclosedByLiquidation,\\n\\t\\tclosedByRedemption\\n\\t}\\n}\\n\",\"keccak256\":\"0xe5c93a5a6eb11be0dda687ba8d5a5399d1e395f8fd63a590cfd1f60d165de33b\",\"license\":\"MIT\"},\"contracts/interfaces/IBorrowerOperations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\n// Common interface for the Trove Manager.\\ninterface IBorrowerOperations {\\n\\t// --- Events ---\\n\\n\\tevent TroveCreated(address indexed _borrower, uint256 arrayIndex);\\n\\tevent TroveUpdated(\\n\\t\\taddress indexed _borrower,\\n\\t\\tuint256 _debt,\\n\\t\\tuint256 _coll,\\n\\t\\tuint256 stake,\\n\\t\\tuint256 _borrowingFee,\\n\\t\\tuint8 operation\\n\\t);\\n\\n\\tevent BorrowingFeePaid(address indexed _borrower, uint256 _Fee);\\n\\n\\t// --- Functions ---\\n\\n\\tfunction openTrove(\\n\\t\\tuint256 _maxFee,\\n\\t\\tuint256 _debt,\\n\\t\\tuint256 _coll,\\n\\t\\taddress _upperHint,\\n\\t\\taddress _lowerHint\\n\\t) external;\\n\\n\\tfunction addColl(\\n\\t\\tuint256 _coll,\\n\\t\\taddress _upperHint,\\n\\t\\taddress _lowerHint\\n\\t) external;\\n\\n\\tfunction withdrawColl(\\n\\t\\tuint256 _coll,\\n\\t\\taddress _upperHint,\\n\\t\\taddress _lowerHint\\n\\t) external;\\n\\n\\tfunction withdrawPAI(\\n\\t\\tuint256 _maxFee,\\n\\t\\tuint256 _amount,\\n\\t\\taddress _upperHint,\\n\\t\\taddress _lowerHint\\n\\t) external;\\n\\n\\tfunction repayPAI(\\n\\t\\tuint256 _amount,\\n\\t\\taddress _upperHint,\\n\\t\\taddress _lowerHint\\n\\t) external;\\n\\n\\tfunction closeTrove() external;\\n\\n\\tfunction adjustTrove(\\n\\t\\tuint256 _collChange,\\n\\t\\tbool _isCollIncrease,\\n\\t\\tuint256 _debtChange,\\n\\t\\tbool _isDebtIncrease,\\n\\t\\taddress _upperHint,\\n\\t\\taddress _lowerHint,\\n\\t\\tuint256 _maxFeePercentage\\n\\t) external;\\n\\n\\tfunction claimCollateral() external;\\n}\\n\",\"keccak256\":\"0x2adf8d06d3469b27c19f86dc54c89a9ffd542cf3f2ace19eab8925cdbfe9aee8\",\"license\":\"MIT\"},\"contracts/interfaces/ICollSurplusPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface ICollSurplusPool {\\n\\t// --- Events ---\\n\\n\\tevent CollBalanceUpdated(address indexed _account, uint256 _newBalance);\\n\\tevent CollSent(address _to, uint256 _amount);\\n\\n\\tfunction getColl() external view returns (uint256);\\n\\n\\tfunction getCollateral(address _account) external view returns (uint256);\\n\\n\\tfunction accountSurplus(address _account, uint256 _amount) external;\\n\\n\\tfunction claimColl(address _account) external;\\n}\\n\",\"keccak256\":\"0x305dde14e343334510b9283c9c49d2c5aa1525ef4eae6ea3906797561a9bfbb9\",\"license\":\"MIT\"},\"contracts/interfaces/ICore.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.3;\\n\\nimport \\\"./IVault.sol\\\";\\nimport \\\"./IMYOStaking.sol\\\";\\nimport \\\"../interfaces/IMYOToken.sol\\\";\\nimport \\\"../interfaces/IPAIToken.sol\\\";\\nimport \\\"../interfaces/ISortedTroves.sol\\\";\\nimport \\\"../interfaces/IPriceFeed.sol\\\";\\nimport \\\"../interfaces/IActivePool.sol\\\";\\nimport \\\"../interfaces/IDefaultPool.sol\\\";\\nimport \\\"../interfaces/ICollSurplusPool.sol\\\";\\nimport \\\"../interfaces/IBorrowerOperations.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ICore {\\n\\t// Tokens\\n\\tfunction gemToken() external view returns (IERC20);\\n\\n\\tfunction paiToken() external view returns (IPAIToken);\\n\\n\\tfunction myoToken() external view returns (IMYOToken);\\n\\n\\t// Core Contracts\\n\\n\\tfunction sortedTroves() external view returns (ISortedTroves);\\n\\n\\tfunction vault() external view returns (IVault);\\n\\n\\tfunction myoStaking() external view returns (IMYOStaking);\\n\\n\\tfunction priceFeed() external view returns (IPriceFeed);\\n\\n\\tfunction activePool() external view returns (IActivePool);\\n\\n\\tfunction collSurplusPool() external view returns (ICollSurplusPool);\\n\\n\\tfunction defaultPool() external view returns (IDefaultPool);\\n\\n\\tfunction borrowerOperations() external view returns (IBorrowerOperations);\\n\\n\\t// Setter\\n\\n\\tfunction setAddresses(\\n\\t\\taddress _gemTokenAddress,\\n\\t\\taddress _paiTokenAddress,\\n\\t\\taddress _myoTokenAddress,\\n\\t\\taddress _sortedTrovesAddress,\\n\\t\\taddress _vaultAddress,\\n\\t\\taddress _myoStakingAddress,\\n\\t\\taddress _priceFeedAddress,\\n\\t\\taddress _activePoolAddress,\\n\\t\\taddress _defaultPoolAddress,\\n\\t\\taddress _collSurplusPoolAddress,\\n\\t\\taddress _borrowerOperationsAddress\\n\\t) external;\\n}\\n\",\"keccak256\":\"0x0a7eacf11f0e0f41669dd4d87dad5718180f19e026881ba6e3e00a87b8df3dec\",\"license\":\"Unlicense\"},\"contracts/interfaces/IDefaultPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface IDefaultPool {\\n\\t// --- Events ---\\n\\tevent GemSent(address _recipient, uint256 _amount);\\n\\tevent DefaultPoolCollBalanceUpdated(uint256 _amount);\\n\\tevent DefaultPoolDebtBalanceUpdated(uint256 _debt);\\n\\n\\t// --- Functions ---\\n\\n\\tfunction getColl() external view returns (uint256);\\n\\n\\tfunction getDebt() external view returns (uint256);\\n\\n\\tfunction increaseDebt(uint256 _amount) external;\\n\\n\\tfunction decreaseDebt(uint256 _amount) external;\\n\\n\\tfunction receiveColl(uint256 _amount) external returns (bool);\\n\\n\\tfunction sendCollToActivePool(uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x5e5936d6e59a5060f9f268b6088d557876eba26c8583191b45f7378d4a509110\",\"license\":\"MIT\"},\"contracts/interfaces/IMYOStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface IMYOStaking {\\n\\tfunction stake(uint256 _MYOamount) external;\\n\\n\\tfunction unstake(uint256 _MYOamount) external;\\n\\n\\tfunction increaseF_GEM(uint256 _GEMFee) external;\\n\\n\\tfunction increaseF_PAI(uint256 _PAIFee) external;\\n\\n\\tfunction getPendingGEMGain(address _user) external view returns (uint256);\\n\\n\\tfunction getPendingPAIGain(address _user) external view returns (uint256);\\n\\n\\tfunction getAccruedGEMFees() external view returns (uint256);\\n\\n\\tfunction getAccruedPAIFees() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa79b5abd952be6a7688ddbf9f7ed8c08345c68deae82db27aecbc513a8c87024\",\"license\":\"MIT\"},\"contracts/interfaces/IMYOToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IMYOToken is IERC20, IERC20Permit, IERC20Metadata {\\n\\t// --- Events ---\\n\\n\\tevent CommunityIssuanceAddressSet(address _communityIssuanceAddress);\\n\\tevent MYOStakingAddressSet(address _myoStakingAddress);\\n\\tevent LockupContractFactoryAddressSet(address _lockupContractFactoryAddress);\\n\\n\\t// --- Functions ---\\n\\n\\tfunction sendToMYOStaking(address _sender, uint256 _amount) external;\\n\\n\\tfunction getDeploymentStartTime() external view returns (uint256);\\n\\n\\tfunction getLpRewardsEntitlement() external view returns (uint256);\\n\\n\\tfunction increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\n\\n\\tfunction decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\n\\n\\tfunction permitTypeHash() external view returns (bytes32);\\n\\n\\tfunction version() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6f53194956e4c49c701a27fab9e30b67df4fb7ae10b8b1110ffc51f983cc0ac2\",\"license\":\"MIT\"},\"contracts/interfaces/IPAIToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IPAIToken is IERC20, IERC20Permit, IERC20Metadata {\\n\\t// --- Events ---\\n\\n\\tevent PAITokenBalanceUpdated(address _user, uint256 _amount);\\n\\n\\t// --- Functions ---\\n\\n\\tfunction mint(address _account, uint256 _amount) external;\\n\\n\\tfunction burn(address _account, uint256 _amount) external;\\n\\n\\t// function sendToPool(\\n\\t// \\taddress _sender,\\n\\t// \\taddress poolAddress,\\n\\t// \\tuint256 _amount\\n\\t// ) external;\\n\\n\\t// function returnFromPool(\\n\\t// \\taddress poolAddress,\\n\\t// \\taddress user,\\n\\t// \\tuint256 _amount\\n\\t// ) external;\\n\\n\\tfunction increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\n\\n\\tfunction decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\n\\n\\tfunction permitTypeHash() external view returns (bytes32);\\n\\n\\tfunction version() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x3312daa10e22922f96ea5015f6a4efdf9fb00b4d9c1bfebf7bf7315a22699840\",\"license\":\"MIT\"},\"contracts/interfaces/IPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\ninterface IPriceFeed {\\n\\t// --- Events ---j\\n\\tevent LastGoodPriceUpdated(uint256 _lastGoodPrice);\\n\\n\\t// --- Function ---\\n\\tfunction fetchPrice() external returns (uint256);\\n}\\n\",\"keccak256\":\"0xfb8dd85ba5db55006bdc28c5102b88581a8ac106c06b01ef538d1204ac0736dd\",\"license\":\"MIT\"},\"contracts/interfaces/ISortedTroves.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\n// Common interface for the SortedTroves Doubly Linked List.\\ninterface ISortedTroves {\\n\\t// --- Events ---\\n\\n\\tevent BorrowerOperationsAddressChanged(address _borrowerOperationsAddress);\\n\\tevent VaultAddressChanged(address _vaultAddress);\\n\\tevent NodeAdded(address _id, uint256 _NICR);\\n\\tevent NodeRemoved(address _id);\\n\\n\\t// --- Functions ---\\n\\n\\tfunction setParams(\\n\\t\\tuint256 _size,\\n\\t\\taddress _vaultAddress,\\n\\t\\taddress _borrowerOperationsAddress\\n\\t) external;\\n\\n\\tfunction insert(\\n\\t\\taddress _id,\\n\\t\\tuint256 _ICR,\\n\\t\\taddress _prevId,\\n\\t\\taddress _nextId\\n\\t) external;\\n\\n\\tfunction remove(address _id) external;\\n\\n\\tfunction reInsert(\\n\\t\\taddress _id,\\n\\t\\tuint256 _newICR,\\n\\t\\taddress _prevId,\\n\\t\\taddress _nextId\\n\\t) external;\\n\\n\\tfunction contains(address _id) external view returns (bool);\\n\\n\\tfunction isFull() external view returns (bool);\\n\\n\\tfunction isEmpty() external view returns (bool);\\n\\n\\tfunction getSize() external view returns (uint256);\\n\\n\\tfunction getMaxSize() external view returns (uint256);\\n\\n\\tfunction getFirst() external view returns (address);\\n\\n\\tfunction getLast() external view returns (address);\\n\\n\\tfunction getNext(address _id) external view returns (address);\\n\\n\\tfunction getPrev(address _id) external view returns (address);\\n\\n\\tfunction validInsertPosition(\\n\\t\\tuint256 _ICR,\\n\\t\\taddress _prevId,\\n\\t\\taddress _nextId\\n\\t) external view returns (bool);\\n\\n\\tfunction findInsertPosition(\\n\\t\\tuint256 _ICR,\\n\\t\\taddress _prevId,\\n\\t\\taddress _nextId\\n\\t) external view returns (address, address);\\n}\\n\",\"keccak256\":\"0xcbd1ed4f5291ae6801e526e3bd6eabf8776009e511aab81e5bf74a51a426ce6b\",\"license\":\"MIT\"},\"contracts/interfaces/IVault.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.3;\\n\\nimport \\\"./IBase.sol\\\";\\n\\ninterface IVault is IBase {\\n\\t// --- Events ---\\n\\n\\tevent TroveUpdated(\\n\\t\\taddress indexed _borrower,\\n\\t\\tuint256 _debt,\\n\\t\\tuint256 _coll,\\n\\t\\tuint256 _borrowingFee,\\n\\t\\tuint256 _stake,\\n\\t\\tTroveOperation _operation\\n\\t);\\n\\tevent TotalStakesUpdated(uint256 _newTotalStakes);\\n\\tevent TroveSnapshotsUpdated(uint256 _L_Coll, uint256 _L_Debt);\\n\\n\\tevent BaseRateUpdated(uint256 _baseRate);\\n\\tevent LastFeeOpTimeUpdated(uint256 _lastFeeOpTime);\\n\\n\\tevent Liquidation(uint256 _liquidatedDebt, uint256 _liquidatedColl, uint256 _gasCompensation);\\n\\tevent Redemption(\\n\\t\\tuint256 _attemptedPAIAmount,\\n\\t\\tuint256 _actualPAIAmount,\\n\\t\\tuint256 _collSent,\\n\\t\\tuint256 _collFee\\n\\t);\\n\\tevent TroveLiquidated(address indexed _borrower, uint256 _debt, uint256 _coll, uint8 operation);\\n\\tevent SystemSnapshotsUpdated(uint256 _totalStakesSnapshot, uint256 _totalCollateralSnapshot);\\n\\tevent LTermsUpdated(uint256 _L_Coll, uint256 _L_Debt);\\n\\tevent TroveIndexUpdated(address _borrower, uint256 _newIndex);\\n\\n\\tfunction baseRate() external view returns (uint256);\\n\\n\\t// Borrowing Fee Functions\\n\\n\\tfunction getTroveOwnersCount() external view returns (uint256);\\n\\n\\tfunction getTroveFromTroveOwnersArray(uint256 _index) external view returns (address);\\n\\n\\t// Collateralization Ratios\\n\\tfunction getNominalICR(address _borrower) external view returns (uint256);\\n\\n\\tfunction getCurrentICR(address _borrower, uint256 _price) external view returns (uint256);\\n\\n\\tfunction getTCR(uint256 _price) external view returns (uint256);\\n\\n\\t// Liquidations\\n\\tfunction liquidate(address _borrower) external;\\n\\n\\tfunction liquidateTroves(uint256 _n) external;\\n\\n\\tfunction batchLiquidateTroves(address[] calldata _troveArray) external;\\n\\n\\tfunction redeemCollateral(\\n\\t\\tuint256 _paiAmount,\\n\\t\\taddress _firstRedemptionHint,\\n\\t\\taddress _upperPartialRedemptionHint,\\n\\t\\taddress _lowerPartialRedemptionHint,\\n\\t\\tuint256 _partialRedemptionHintNICR,\\n\\t\\tuint256 _maxIterations,\\n\\t\\tuint256 _maxFee\\n\\t) external;\\n\\n\\tfunction updateStakeAndTotalStakes(address _borrower) external returns (uint256);\\n\\n\\tfunction updateTroveRewardSnapshots(address _borrower) external;\\n\\n\\tfunction addTroveOwnerToArray(address _borrower) external returns (uint256 index);\\n\\n\\tfunction applyPendingRewards(address _borrower) external;\\n\\n\\tfunction getPendingCollReward(address _borrower) external view returns (uint256);\\n\\n\\tfunction getPendingDebtReward(address _borrower) external view returns (uint256);\\n\\n\\tfunction hasPendingRewards(address _borrower) external view returns (bool);\\n\\n\\tfunction getEntireDebtAndColl(address _borrower)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint256 debt,\\n\\t\\t\\tuint256 coll,\\n\\t\\t\\tuint256 pendingDebtReward,\\n\\t\\t\\tuint256 pendingCollReward\\n\\t\\t);\\n\\n\\tfunction closeTrove(address _borrower) external;\\n\\n\\tfunction removeStake(address _borrower) external;\\n\\n\\t// Borrowing and Redemption Fees\\n\\n\\tfunction getRedemptionRate() external view returns (uint256);\\n\\n\\tfunction getRedemptionRateWithDecay() external view returns (uint256);\\n\\n\\tfunction getRedemptionFeeWithDecay(uint256 _collDrawn) external view returns (uint256);\\n\\n\\tfunction getBorrowingRate() external view returns (uint256);\\n\\n\\tfunction getBorrowingRateWithDecay() external view returns (uint256);\\n\\n\\tfunction getBorrowingFee(uint256 _debt, uint256 _price) external view returns (uint256);\\n\\n\\tfunction getBorrowingFeeWithDecay(uint256 _debt, uint256 _price)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256);\\n\\n\\tfunction decayBaseRateFromBorrowing() external;\\n\\n\\t// Trove Management\\n\\tfunction increaseTroveColl(address _borrower, uint256 _collIncrease) external returns (uint256);\\n\\n\\tfunction decreaseTroveColl(address _borrower, uint256 _collDecrease) external returns (uint256);\\n\\n\\tfunction increaseTroveDebt(address _borrower, uint256 _debtIncrease) external returns (uint256);\\n\\n\\tfunction decreaseTroveDebt(address _borrower, uint256 _debtDecrease) external returns (uint256);\\n\\n\\tfunction setTroveStatus(address _borrower, uint256 _num) external;\\n\\n\\tfunction getTroveStatus(address _borrower) external view returns (TroveStatus);\\n\\n\\tfunction getTroveStake(address _borrower) external view returns (uint256);\\n\\n\\tfunction getTroveDebt(address _borrower) external view returns (uint256);\\n\\n\\tfunction getTroveColl(address _borrower) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x56b260112539fd68925ae0d21ee16698d05bea325f6316305cf650b48aad35a9\",\"license\":\"Unlicense\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040526000196000553480156200001757600080fd5b5060405162003204380380620032048339810160408190526200003a916200010e565b8062000046816200005d565b60601b6001600160601b031916608052506200013e565b6001600160a01b038116620000b95760405162461bcd60e51b815260206004820152601e60248201527f4163636f756e742063616e6e6f74206265207a65726f2061646472657373000060448201526064015b60405180910390fd5b803b806200010a5760405162461bcd60e51b815260206004820181905260248201527f4163636f756e7420636f64652073697a652063616e6e6f74206265207a65726f6044820152606401620000b0565b5050565b60006020828403121562000120578081fd5b81516001600160a01b038116811462000137578182fd5b9392505050565b60805160601c61305a620001aa60003960008181610307015281816107670152818161082f0152818161088a015281816109ef015281816110c6015281816111210152818161117c0152818161120301528181611280015281816112ee0152611349015261305a6000f3fe608060405234801561001057600080fd5b50600436106101b05760003560e01c80639e8ef390116100ef578063e2d8ef8d11610092578063e2d8ef8d146102f1578063e5b5019a146102f9578063f2f4eb2614610302578063f92d343314610329578063fbfa77cf14610331578063fe6ecf0b14610339578063ff2fb57c1461034c578063fff298df14610354576101b0565b80639e8ef3901461028b578063a20baee614610293578063ae918754146102a2578063c35bc550146102aa578063cda775f9146102b4578063d0ec5375146102bc578063d3c2f3c1146102cf578063d56d6bbe146102de576101b0565b8063741bef1a11610157578063741bef1a1461023957806377553ad414610241578063794e572414610249578063795d26c3146102585780637f7dde4a14610260578063887105d31461026857806389a8872f146102705780638f09162b14610278576101b0565b80630e704d50146101b55780631bf43555146101bf5780633cc74225146101e25780634da2bfb3146101f75780635530273c1461020a5780635733d58f1461021d57806361ec893d1461022c5780636f0b0c1c14610234575b600080fd5b6101bd61035c565b005b6101cf686194049f30f720000081565b6040519081526020015b60405180910390f35b6101ea610763565b6040516101d99190612e8e565b6101bd610205366004612df0565b6107fb565b6101bd610218366004612d35565b610813565b6101cf6714d1120d7b16000081565b6101cf603c81565b6101bd565b6101ea61082b565b6101ea610886565b6101cf670f43fc2c04ee000081565b6101cf6108e1565b6101ea6109eb565b6101cf610a46565b6101cf60c881565b6101bd610286366004612e39565b610b05565b6101ea6110c2565b6101cf670de0b6b3a764000081565b6101ea61111d565b6101cf6212750081565b6101ea611178565b6101bd6102ca366004612d76565b6111d3565b6101cf671bc16d674ec8000081565b6101bd6102ec366004612d35565b6111ec565b6101ea6111ff565b6101cf60005481565b6101ea7f000000000000000000000000000000000000000000000000000000000000000081565b6101cf61125a565b6101ea61127c565b6101bd610347366004612d35565b6112d7565b6101ea6112ea565b6101ea611345565b610365336113a0565b600061036f61082b565b6001600160a01b0316630fdb11cf6040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156103a957600080fd5b505af11580156103bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e19190612d1d565b90506103ec816114a3565b6103f461127c565b6001600160a01b0316630b076557336040518263ffffffff1660e01b815260040161041f9190612e8e565b600060405180830381600087803b15801561043957600080fd5b505af115801561044d573d6000803e3d6000fd5b50505050600061045b61127c565b6001600160a01b031663480cd578336040518263ffffffff1660e01b81526004016104869190612e8e565b60206040518083038186803b15801561049e57600080fd5b505afa1580156104b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d69190612d1d565b905060006104e261127c565b6001600160a01b031663d66a2553336040518263ffffffff1660e01b815260040161050d9190612e8e565b60206040518083038186803b15801561052557600080fd5b505afa158015610539573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055d9190612d1d565b9050610569338261151b565b600061057a83600084600088611611565b905061058581611684565b61058d61127c565b6001600160a01b031663fe2ba848336040518263ffffffff1660e01b81526004016105b89190612e8e565b600060405180830381600087803b1580156105d257600080fd5b505af11580156105e6573d6000803e3d6000fd5b505050506105f261127c565b6001600160a01b031663cbd138ae336040518263ffffffff1660e01b815260040161061d9190612e8e565b600060405180830381600087803b15801561063757600080fd5b505af115801561064b573d6000803e3d6000fd5b5050604051339250600080516020613005833981519152915061067990600090819081908190600190612ee6565b60405180910390a261068b3383611714565b6106936109eb565b6001600160a01b0316636ad32b1f6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156106cd57600080fd5b505af11580156106e1573d6000803e3d6000fd5b505050506106ed6109eb565b6001600160a01b0316639f4e511e3361070e86671bc16d674ec800006117e6565b6040518363ffffffff1660e01b815260040161072b929190612ea2565b600060405180830381600087803b15801561074557600080fd5b505af1158015610759573d6000803e3d6000fd5b5050505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633cc742256040518163ffffffff1660e01b815260040160206040518083038186803b1580156107be57600080fd5b505afa1580156107d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f69190612ce2565b905090565b61080d3360008086600187878b6117fb565b50505050565b61082633846000806000878760006117fb565b505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663741bef1a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156107be57600080fd5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166377553ad46040518163ffffffff1660e01b815260040160206040518083038186803b1580156107be57600080fd5b6000806108ec6109eb565b6001600160a01b03166314a6bf0f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561092457600080fd5b505afa158015610938573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095c9190612d1d565b90506000610968610763565b6001600160a01b03166314a6bf0f6040518163ffffffff1660e01b815260040160206040518083038186803b1580156109a057600080fd5b505afa1580156109b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d89190612d1d565b90506109e482826117e6565b9250505090565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637f7dde4a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156107be57600080fd5b600080610a516109eb565b6001600160a01b03166388bf5a9b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610a8957600080fd5b505afa158015610a9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac19190612d1d565b90506000610acd610763565b6001600160a01b03166388bf5a9b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156109a057600080fd5b610b0e33611d42565b6000610b1861082b565b6001600160a01b0316630fdb11cf6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610b5257600080fd5b505af1158015610b66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8a9190612d1d565b90506000610b9782611e3e565b9050610ba38782611e5b565b60008582610c0757610bb58885611f90565b9150610bdd82610bd786610bd18c670de0b6b3a764000061207f565b9061208b565b8b612097565b818111610bfa57634e487b7160e01b600052600160045260246000fd5b610c048183612101565b90505b610c11818361210d565b610c2381671bc16d674ec80000612101565b90506000610c32828a876121a4565b90506000610c40838b6121d1565b90508415610c5657610c5182612200565b610c7d565b610c5f82612278565b6000610c708460018d60018b611611565b9050610c7b81611684565b505b610c8561127c565b6001600160a01b0316635d6b480f3360016040518363ffffffff1660e01b8152600401610cb3929190612ea2565b600060405180830381600087803b158015610ccd57600080fd5b505af1158015610ce1573d6000803e3d6000fd5b50505050610ced61127c565b6001600160a01b03166372423c1733856040518363ffffffff1660e01b8152600401610d1a929190612ea2565b602060405180830381600087803b158015610d3457600080fd5b505af1158015610d48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6c9190612d1d565b50610d7561127c565b6001600160a01b0316639976cf45338c6040518363ffffffff1660e01b8152600401610da2929190612ea2565b602060405180830381600087803b158015610dbc57600080fd5b505af1158015610dd0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df49190612d1d565b50610dfd61127c565b6001600160a01b03166382fe3eb9336040518263ffffffff1660e01b8152600401610e289190612e8e565b600060405180830381600087803b158015610e4257600080fd5b505af1158015610e56573d6000803e3d6000fd5b505050506000610e6461127c565b6001600160a01b03166318f2817a336040518263ffffffff1660e01b8152600401610e8f9190612e8e565b602060405180830381600087803b158015610ea957600080fd5b505af1158015610ebd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee19190612d1d565b9050610eeb61111d565b6001600160a01b03166346f7cf8733848c8c6040518563ffffffff1660e01b8152600401610f1c9493929190612ebb565b600060405180830381600087803b158015610f3657600080fd5b505af1158015610f4a573d6000803e3d6000fd5b505050506000610f5861127c565b6001600160a01b03166315d549f1336040518263ffffffff1660e01b8152600401610f839190612e8e565b602060405180830381600087803b158015610f9d57600080fd5b505af1158015610fb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd59190612d1d565b9050610fe1338d612308565b610feb338c6123a4565b610ff36109eb565b6001600160a01b0316637e16d1a26040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561102d57600080fd5b505af1158015611041573d6000803e3d6000fd5b5050505061104f338761242b565b60405181815233907f59cfd0cd754bc5748b6770e94a4ffa5f678d885cb899dcfadc5734edb97c67ab9060200160405180910390a2336000805160206130058339815191528d87858a60006040516110ab959493929190612ee6565b60405180910390a250505050505050505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639e8ef3906040518163ffffffff1660e01b815260040160206040518083038186803b1580156107be57600080fd5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ae9187546040518163ffffffff1660e01b815260040160206040518083038186803b1580156107be57600080fd5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663cda775f96040518163ffffffff1660e01b815260040160206040518083038186803b1580156107be57600080fd5b6111e333888888888888886117fb565b50505050505050565b61082633846001600080878760006117fb565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e2d8ef8d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156107be57600080fd5b61126e6103e8670de0b6b3a7640000612f75565b611279906005612f95565b81565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663fbfa77cf6040518163ffffffff1660e01b815260040160206040518083038186803b1580156107be57600080fd5b61082633600080866000878760006117fb565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ff2fb57c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156107be57600080fd5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663fff298df6040518163ffffffff1660e01b815260040160206040518083038186803b1580156107be57600080fd5b60016113aa61127c565b6001600160a01b03166321e37801836040518263ffffffff1660e01b81526004016113d59190612e8e565b60206040518083038186803b1580156113ed57600080fd5b505afa158015611401573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114259190612cfe565b600481111561144457634e487b7160e01b600052602160045260246000fd5b146114a05760405162461bcd60e51b815260206004820152602160248201527f426f72726f7765724f70733a2054726f7665206d7573742062652061637469766044820152606560f81b60648201526084015b60405180910390fd5b50565b6114ac81611e3e565b156114a05760405162461bcd60e51b815260206004820152603960248201527f426f72726f7765724f70733a204f7065726174696f6e206e6f74207065726d696044820152787474656420647572696e67205265636f76657279204d6f646560381b6064820152608401611497565b60006115256110c2565b6001600160a01b03166370a08231846040518263ffffffff1660e01b81526004016115509190612e8e565b60206040518083038186803b15801561156857600080fd5b505afa15801561157c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115a09190612d1d565b9050818110156108265760405162461bcd60e51b815260206004820152603660248201527f426f72726f7765724f70733a20426f72726f77657220646f6573206e6f74206860448201527561766520656e6f756768205041492062616c616e636560501b6064820152608401611497565b60008061161c610a46565b905060006116286108e1565b90508661163e576116398289612101565b611648565b61164882896117e6565b91508461165e576116598187612101565b611668565b61166881876117e6565b905060006116778383876121a4565b9998505050505050505050565b6714d1120d7b1600008110156114a05760405162461bcd60e51b815260206004820152604960248201527f426f72726f7765724f70733a20416e206f7065726174696f6e2074686174207760448201527f6f756c6420726573756c7420696e20544352203c20434352206973206e6f74206064820152681c195c9b5a5d1d195960ba1b608482015260a401611497565b61171c6109eb565b6001600160a01b0316632a7ba1f7826040518263ffffffff1660e01b815260040161174991815260200190565b600060405180830381600087803b15801561176357600080fd5b505af1158015611777573d6000803e3d6000fd5b505050506117836110c2565b6001600160a01b0316639dc29fac83836040518363ffffffff1660e01b81526004016117b0929190612ea2565b600060405180830381600087803b1580156117ca57600080fd5b505af11580156117de573d6000803e3d6000fd5b505050505050565b60006117f28284612f5d565b90505b92915050565b611804886113a0565b61180e87866124a3565b61186d604051806101600160405280600081526020016000151581526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b61187561082b565b6001600160a01b0316630fdb11cf6040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156118af57600080fd5b505af11580156118c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118e79190612d1d565b8082526118f390611e3e565b1515602082015284156119595761190e828260200151611e5b565b61191786612531565b80602001516119595761192e868260000151611f90565b61014082018190528151611959919061195390610bd18a670de0b6b3a764000061207f565b84612097565b61196161127c565b6001600160a01b0316630b0765578a6040518263ffffffff1660e01b815260040161198c9190612e8e565b600060405180830381600087803b1580156119a657600080fd5b505af11580156119ba573d6000803e3d6000fd5b505050506119c661127c565b6001600160a01b031663d66a25538a6040518263ffffffff1660e01b81526004016119f19190612e8e565b60206040518083038186803b158015611a0957600080fd5b505afa158015611a1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a419190612d1d565b6040820152611a4e61127c565b6001600160a01b031663480cd5788a6040518263ffffffff1660e01b8152600401611a799190612e8e565b60206040518083038186803b158015611a9157600080fd5b505afa158015611aa5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ac99190612d1d565b60608201819052610140820151611ae491908a908a90612597565b611afb8160600151826040015183600001516121a4565b8160c0018181525050611b25816060015182604001518a8a8a8a8761014001518860000151612611565b60e08201819052602082015160c08301518351611b4a938c928c928c928c9291612646565b611b5d8989898989866101400151612697565b608083015260a082015284158015611b755750600086115b15611b9257611b88898260400151612968565b611b92898761151b565b611b9a61127c565b6001600160a01b03166318f2817a8a6040518263ffffffff1660e01b8152600401611bc59190612e8e565b602060405180830381600087803b158015611bdf57600080fd5b505af1158015611bf3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c179190612d1d565b81610100018181525050611c3d816060015182604001518a8a8a8a876101400151612a5d565b610120820152611c4b61111d565b6001600160a01b0316632be212608a83610120015187876040518563ffffffff1660e01b8152600401611c819493929190612ebb565b600060405180830381600087803b158015611c9b57600080fd5b505af1158015611caf573d6000803e3d6000fd5b50505050886001600160a01b031660008051602061300583398151915282608001518360a00151846101000151856101400151600280811115611d0257634e487b7160e01b600052602160045260246000fd5b604051611d13959493929190612ee6565b60405180910390a2611d2a8982610140015161242b565b611d378989898989612a90565b505050505050505050565b6001611d4c61127c565b6001600160a01b03166321e37801836040518263ffffffff1660e01b8152600401611d779190612e8e565b60206040518083038186803b158015611d8f57600080fd5b505afa158015611da3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dc79190612cfe565b6004811115611de657634e487b7160e01b600052602160045260246000fd5b14156114a05760405162461bcd60e51b815260206004820152602160248201527f426f72726f7765724f70733a2054726f766520616c72656164792065786973746044820152607360f81b6064820152608401611497565b600080611e4a83612b2e565b6714d1120d7b160000119392505050565b8015611ee457670de0b6b3a7640000821115611edf5760405162461bcd60e51b815260206004820152603f60248201527f426f72726f7765724f70733a204d6178206665652070657263656e746167652060448201527f6d757374206c657373207468616e206f7220657175616c20746f2031303025006064820152608401611497565b611f8c565b611ef86103e8670de0b6b3a7640000612f75565b611f03906005612f95565b8210158015611f1a5750670de0b6b3a76400008211155b611f8c5760405162461bcd60e51b815260206004820152603d60248201527f426f72726f7765724f70733a204d6178206665652070657263656e746167652060448201527f6d757374206265206265747765656e20302e352520616e6420313030250000006064820152608401611497565b5050565b6000611f9a61127c565b6001600160a01b0316635dba4c4a6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611fd457600080fd5b505af1158015611fe8573d6000803e3d6000fd5b505050506000611ff661127c565b604051632455c4e160e21b815260048101869052602481018590526001600160a01b03919091169063915713849060440160206040518083038186803b15801561203f57600080fd5b505afa158015612053573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120779190612d1d565b949350505050565b60006117f28284612f95565b60006117f28284612f75565b60006120af83610bd186670de0b6b3a764000061207f565b90508181111561080d5760405162461bcd60e51b815260206004820152601d60248201527f4665652065786365656465642070726f7669646564206d6178696d756d0000006044820152606401611497565b60006117f28284612fb4565b61211f671bc16d674ec80000826117e6565b821015611f8c5760405162461bcd60e51b815260206004820152604760248201527f426f72726f7765724f70733a204e6f7420656e6f75676820636f6c6c6174657260448201527f616c20666f722047617320436f6d70656e736174696f6e202620426f72726f77606482015266696e672046656560c81b608482015260a401611497565b600082156121c55760006121bc84610bd1878661207f565b91506121ca9050565b506000195b9392505050565b600081156121f7576121f082610bd18568056bc75e2d6310000061207f565b90506117f5565b506000196117f5565b6714d1120d7b1600008110156114a05760405162461bcd60e51b815260206004820152603760248201527f426f72726f7765724f70733a204f7065726174696f6e206d757374206c65617660448201527632903a3937bb32903bb4ba341024a1a9101f1e9021a1a960491b6064820152608401611497565b670f43fc2c04ee00008110156114a05760405162461bcd60e51b815260206004820152604960248201527f426f72726f7765724f70733a20416e206f7065726174696f6e2074686174207760448201527f6f756c6420726573756c7420696e20494352203c204d4352206973206e6f74206064820152681c195c9b5a5d1d195960ba1b608482015260a401611497565b6123106109eb565b6001600160a01b0316632b7c7b11826040518263ffffffff1660e01b815260040161233d91815260200190565b600060405180830381600087803b15801561235757600080fd5b505af115801561236b573d6000803e3d6000fd5b505050506123776110c2565b6001600160a01b03166340c10f1983836040518363ffffffff1660e01b81526004016117b0929190612ea2565b6123ac6109eb565b6001600160a01b0316634cd399b383836040518363ffffffff1660e01b81526004016123d9929190612ea2565b602060405180830381600087803b1580156123f357600080fd5b505af1158015612407573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108269190612cc6565b816001600160a01b03167f5d032cf8244d18503d44f7171954f352ff41fa2df69660eb897f4db36efe808e8260405161246691815260200190565b60405180910390a26124766109eb565b6001600160a01b0316634c38b4b2826040518263ffffffff1660e01b81526004016117b091815260200190565b811515806124b057508015155b611f8c5760405162461bcd60e51b815260206004820152604660248201527f426f72726f7765724f70733a205468657265206d75737420626520656974686560448201527f72206120636f6c6c61746572616c206368616e6765206f7220612064656274206064820152656368616e676560d01b608482015260a401611497565b600081116114a05760405162461bcd60e51b815260206004820152602d60248201527f426f72726f7765724f70733a204e6f6e2d5a65726f2064656274206368616e6760448201526c19481a5cc81c995c5d5a5c9959609a1b6064820152608401611497565b60006125ab82671bc16d674ec800006117e6565b905082156125e157806125be86866117e6565b10156125dc5760405162461bcd60e51b815260040161149790612f0c565b61260a565b6125eb84826117e6565b85101561260a5760405162461bcd60e51b815260040161149790612f0c565b5050505050565b60008060006126258b8b8b8b8b8b8b612b52565b9150915060006126368383876121a4565b9c9b505050505050505050505050565b8715612674576126568787612bcf565b831561266f5761266582612200565b61266f8284612c50565b610759565b61267d82612278565b600061268c8888888886611611565b9050611d3781611684565b60008060008661272d576126a961127c565b6001600160a01b031663d3d6f8438a8a6040518363ffffffff1660e01b81526004016126d6929190612ea2565b602060405180830381600087803b1580156126f057600080fd5b505af1158015612704573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127289190612d1d565b6127b4565b61273561127c565b6001600160a01b03166372423c178a8a6040518363ffffffff1660e01b8152600401612762929190612ea2565b602060405180830381600087803b15801561277c57600080fd5b505af1158015612790573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127b49190612d1d565b9050600085612849576127c561127c565b6001600160a01b03166312610e928b896040518363ffffffff1660e01b81526004016127f2929190612ea2565b602060405180830381600087803b15801561280c57600080fd5b505af1158015612820573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128449190612d1d565b6128d0565b61285161127c565b6001600160a01b0316639976cf458b896040518363ffffffff1660e01b815260040161287e929190612ea2565b602060405180830381600087803b15801561289857600080fd5b505af11580156128ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128d09190612d1d565b90506128da61127c565b6001600160a01b031663d3d6f8438b876040518363ffffffff1660e01b8152600401612907929190612ea2565b602060405180830381600087803b15801561292157600080fd5b505af1158015612935573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129599190612d1d565b9a909950975050505050505050565b600061297261127c565b6001600160a01b031663d66a2553846040518263ffffffff1660e01b815260040161299d9190612e8e565b60206040518083038186803b1580156129b557600080fd5b505afa1580156129c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129ed9190612d1d565b9050808211156108265760405162461bcd60e51b815260206004820152603560248201527f426f72726f7765724f70733a2054726f76652064656274206973206c657373206044820152741d1a185b881c995c185e5b595b9d08185b5bdd5b9d605a1b6064820152608401611497565b6000806000612a718a8a8a8a8a8a8a612b52565b915091506000612a8183836121d1565b9b9a5050505050505050505050565b8115612ab5578015612aab57612aa68583612308565b612ab5565b612ab58583611714565b831561260a578215612acb576125dc85856123a4565b612ad36109eb565b6001600160a01b0316639f4e511e86866040518363ffffffff1660e01b8152600401612b00929190612ea2565b600060405180830381600087803b158015612b1a57600080fd5b505af1158015611d37573d6000803e3d6000fd5b600080612b39610a46565b90506000612b456108e1565b90506120778282866121a4565b600080888887612b6b57612b668b8a612101565b612b75565b612b758b8a6117e6565b915085612b8b57612b868a88612101565b612b95565b612b958a886117e6565b905084821015612bb557634e487b7160e01b600052600160045260246000fd5b612bbf8286612101565b9b909a5098505050505050505050565b60018115151480612bde575081155b611f8c5760405162461bcd60e51b815260206004820152603e60248201527f426f72726f7765724f70733a20436f6c6c61746572616c20776974686472617760448201527f616c206e6f74207065726d6974746564205265636f76657279204d6f646500006064820152608401611497565b80821015611f8c5760405162461bcd60e51b815260206004820152603e60248201527f426f72726f7765724f70733a2043616e6e6f7420646563726561736520796f7560448201527f722054726f766527732049435220696e205265636f76657279204d6f646500006064820152608401611497565b600060208284031215612cd7578081fd5b81516121ca81612ff6565b600060208284031215612cf3578081fd5b81516121ca81612fe1565b600060208284031215612d0f578081fd5b8151600581106121ca578182fd5b600060208284031215612d2e578081fd5b5051919050565b600080600060608486031215612d49578182fd5b833592506020840135612d5b81612fe1565b91506040840135612d6b81612fe1565b809150509250925092565b600080600080600080600060e0888a031215612d90578485fd5b873596506020880135612da281612ff6565b9550604088013594506060880135612db981612ff6565b93506080880135612dc981612fe1565b925060a0880135612dd981612fe1565b8092505060c0880135905092959891949750929550565b60008060008060808587031215612e05578182fd5b84359350602085013592506040850135612e1e81612fe1565b91506060850135612e2e81612fe1565b939692955090935050565b600080600080600060a08688031215612e50578283fd5b8535945060208601359350604086013592506060860135612e7081612fe1565b91506080860135612e8081612fe1565b809150509295509295909350565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b03948516815260208101939093529083166040830152909116606082015260800190565b94855260208501939093526040840191909152606083015260ff16608082015260a00190565b60208082526031908201527f426f72726f7765724f70733a204e6f7420656e6f75676820636f6c6c61746572604082015270185b08199bdc8818591a9d5cdd1b595b9d607a1b606082015260800190565b60008219821115612f7057612f70612fcb565b500190565b600082612f9057634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615612faf57612faf612fcb565b500290565b600082821015612fc657612fc6612fcb565b500390565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03811681146114a057600080fd5b80151581146114a057600080fdfef575eb5cdee005607f56587351e18943ddacd11756b9d37980ec251797ff136ca2646970667358221220a0ee15b7e327863c0cff099f86a2b5eb64c72f7d9febfb15810219172c039ce564736f6c63430008030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101b05760003560e01c80639e8ef390116100ef578063e2d8ef8d11610092578063e2d8ef8d146102f1578063e5b5019a146102f9578063f2f4eb2614610302578063f92d343314610329578063fbfa77cf14610331578063fe6ecf0b14610339578063ff2fb57c1461034c578063fff298df14610354576101b0565b80639e8ef3901461028b578063a20baee614610293578063ae918754146102a2578063c35bc550146102aa578063cda775f9146102b4578063d0ec5375146102bc578063d3c2f3c1146102cf578063d56d6bbe146102de576101b0565b8063741bef1a11610157578063741bef1a1461023957806377553ad414610241578063794e572414610249578063795d26c3146102585780637f7dde4a14610260578063887105d31461026857806389a8872f146102705780638f09162b14610278576101b0565b80630e704d50146101b55780631bf43555146101bf5780633cc74225146101e25780634da2bfb3146101f75780635530273c1461020a5780635733d58f1461021d57806361ec893d1461022c5780636f0b0c1c14610234575b600080fd5b6101bd61035c565b005b6101cf686194049f30f720000081565b6040519081526020015b60405180910390f35b6101ea610763565b6040516101d99190612e8e565b6101bd610205366004612df0565b6107fb565b6101bd610218366004612d35565b610813565b6101cf6714d1120d7b16000081565b6101cf603c81565b6101bd565b6101ea61082b565b6101ea610886565b6101cf670f43fc2c04ee000081565b6101cf6108e1565b6101ea6109eb565b6101cf610a46565b6101cf60c881565b6101bd610286366004612e39565b610b05565b6101ea6110c2565b6101cf670de0b6b3a764000081565b6101ea61111d565b6101cf6212750081565b6101ea611178565b6101bd6102ca366004612d76565b6111d3565b6101cf671bc16d674ec8000081565b6101bd6102ec366004612d35565b6111ec565b6101ea6111ff565b6101cf60005481565b6101ea7f000000000000000000000000000000000000000000000000000000000000000081565b6101cf61125a565b6101ea61127c565b6101bd610347366004612d35565b6112d7565b6101ea6112ea565b6101ea611345565b610365336113a0565b600061036f61082b565b6001600160a01b0316630fdb11cf6040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156103a957600080fd5b505af11580156103bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e19190612d1d565b90506103ec816114a3565b6103f461127c565b6001600160a01b0316630b076557336040518263ffffffff1660e01b815260040161041f9190612e8e565b600060405180830381600087803b15801561043957600080fd5b505af115801561044d573d6000803e3d6000fd5b50505050600061045b61127c565b6001600160a01b031663480cd578336040518263ffffffff1660e01b81526004016104869190612e8e565b60206040518083038186803b15801561049e57600080fd5b505afa1580156104b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d69190612d1d565b905060006104e261127c565b6001600160a01b031663d66a2553336040518263ffffffff1660e01b815260040161050d9190612e8e565b60206040518083038186803b15801561052557600080fd5b505afa158015610539573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055d9190612d1d565b9050610569338261151b565b600061057a83600084600088611611565b905061058581611684565b61058d61127c565b6001600160a01b031663fe2ba848336040518263ffffffff1660e01b81526004016105b89190612e8e565b600060405180830381600087803b1580156105d257600080fd5b505af11580156105e6573d6000803e3d6000fd5b505050506105f261127c565b6001600160a01b031663cbd138ae336040518263ffffffff1660e01b815260040161061d9190612e8e565b600060405180830381600087803b15801561063757600080fd5b505af115801561064b573d6000803e3d6000fd5b5050604051339250600080516020613005833981519152915061067990600090819081908190600190612ee6565b60405180910390a261068b3383611714565b6106936109eb565b6001600160a01b0316636ad32b1f6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156106cd57600080fd5b505af11580156106e1573d6000803e3d6000fd5b505050506106ed6109eb565b6001600160a01b0316639f4e511e3361070e86671bc16d674ec800006117e6565b6040518363ffffffff1660e01b815260040161072b929190612ea2565b600060405180830381600087803b15801561074557600080fd5b505af1158015610759573d6000803e3d6000fd5b5050505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633cc742256040518163ffffffff1660e01b815260040160206040518083038186803b1580156107be57600080fd5b505afa1580156107d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f69190612ce2565b905090565b61080d3360008086600187878b6117fb565b50505050565b61082633846000806000878760006117fb565b505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663741bef1a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156107be57600080fd5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166377553ad46040518163ffffffff1660e01b815260040160206040518083038186803b1580156107be57600080fd5b6000806108ec6109eb565b6001600160a01b03166314a6bf0f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561092457600080fd5b505afa158015610938573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095c9190612d1d565b90506000610968610763565b6001600160a01b03166314a6bf0f6040518163ffffffff1660e01b815260040160206040518083038186803b1580156109a057600080fd5b505afa1580156109b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d89190612d1d565b90506109e482826117e6565b9250505090565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637f7dde4a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156107be57600080fd5b600080610a516109eb565b6001600160a01b03166388bf5a9b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610a8957600080fd5b505afa158015610a9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac19190612d1d565b90506000610acd610763565b6001600160a01b03166388bf5a9b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156109a057600080fd5b610b0e33611d42565b6000610b1861082b565b6001600160a01b0316630fdb11cf6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610b5257600080fd5b505af1158015610b66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8a9190612d1d565b90506000610b9782611e3e565b9050610ba38782611e5b565b60008582610c0757610bb58885611f90565b9150610bdd82610bd786610bd18c670de0b6b3a764000061207f565b9061208b565b8b612097565b818111610bfa57634e487b7160e01b600052600160045260246000fd5b610c048183612101565b90505b610c11818361210d565b610c2381671bc16d674ec80000612101565b90506000610c32828a876121a4565b90506000610c40838b6121d1565b90508415610c5657610c5182612200565b610c7d565b610c5f82612278565b6000610c708460018d60018b611611565b9050610c7b81611684565b505b610c8561127c565b6001600160a01b0316635d6b480f3360016040518363ffffffff1660e01b8152600401610cb3929190612ea2565b600060405180830381600087803b158015610ccd57600080fd5b505af1158015610ce1573d6000803e3d6000fd5b50505050610ced61127c565b6001600160a01b03166372423c1733856040518363ffffffff1660e01b8152600401610d1a929190612ea2565b602060405180830381600087803b158015610d3457600080fd5b505af1158015610d48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6c9190612d1d565b50610d7561127c565b6001600160a01b0316639976cf45338c6040518363ffffffff1660e01b8152600401610da2929190612ea2565b602060405180830381600087803b158015610dbc57600080fd5b505af1158015610dd0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df49190612d1d565b50610dfd61127c565b6001600160a01b03166382fe3eb9336040518263ffffffff1660e01b8152600401610e289190612e8e565b600060405180830381600087803b158015610e4257600080fd5b505af1158015610e56573d6000803e3d6000fd5b505050506000610e6461127c565b6001600160a01b03166318f2817a336040518263ffffffff1660e01b8152600401610e8f9190612e8e565b602060405180830381600087803b158015610ea957600080fd5b505af1158015610ebd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee19190612d1d565b9050610eeb61111d565b6001600160a01b03166346f7cf8733848c8c6040518563ffffffff1660e01b8152600401610f1c9493929190612ebb565b600060405180830381600087803b158015610f3657600080fd5b505af1158015610f4a573d6000803e3d6000fd5b505050506000610f5861127c565b6001600160a01b03166315d549f1336040518263ffffffff1660e01b8152600401610f839190612e8e565b602060405180830381600087803b158015610f9d57600080fd5b505af1158015610fb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd59190612d1d565b9050610fe1338d612308565b610feb338c6123a4565b610ff36109eb565b6001600160a01b0316637e16d1a26040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561102d57600080fd5b505af1158015611041573d6000803e3d6000fd5b5050505061104f338761242b565b60405181815233907f59cfd0cd754bc5748b6770e94a4ffa5f678d885cb899dcfadc5734edb97c67ab9060200160405180910390a2336000805160206130058339815191528d87858a60006040516110ab959493929190612ee6565b60405180910390a250505050505050505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639e8ef3906040518163ffffffff1660e01b815260040160206040518083038186803b1580156107be57600080fd5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ae9187546040518163ffffffff1660e01b815260040160206040518083038186803b1580156107be57600080fd5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663cda775f96040518163ffffffff1660e01b815260040160206040518083038186803b1580156107be57600080fd5b6111e333888888888888886117fb565b50505050505050565b61082633846001600080878760006117fb565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e2d8ef8d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156107be57600080fd5b61126e6103e8670de0b6b3a7640000612f75565b611279906005612f95565b81565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663fbfa77cf6040518163ffffffff1660e01b815260040160206040518083038186803b1580156107be57600080fd5b61082633600080866000878760006117fb565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ff2fb57c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156107be57600080fd5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663fff298df6040518163ffffffff1660e01b815260040160206040518083038186803b1580156107be57600080fd5b60016113aa61127c565b6001600160a01b03166321e37801836040518263ffffffff1660e01b81526004016113d59190612e8e565b60206040518083038186803b1580156113ed57600080fd5b505afa158015611401573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114259190612cfe565b600481111561144457634e487b7160e01b600052602160045260246000fd5b146114a05760405162461bcd60e51b815260206004820152602160248201527f426f72726f7765724f70733a2054726f7665206d7573742062652061637469766044820152606560f81b60648201526084015b60405180910390fd5b50565b6114ac81611e3e565b156114a05760405162461bcd60e51b815260206004820152603960248201527f426f72726f7765724f70733a204f7065726174696f6e206e6f74207065726d696044820152787474656420647572696e67205265636f76657279204d6f646560381b6064820152608401611497565b60006115256110c2565b6001600160a01b03166370a08231846040518263ffffffff1660e01b81526004016115509190612e8e565b60206040518083038186803b15801561156857600080fd5b505afa15801561157c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115a09190612d1d565b9050818110156108265760405162461bcd60e51b815260206004820152603660248201527f426f72726f7765724f70733a20426f72726f77657220646f6573206e6f74206860448201527561766520656e6f756768205041492062616c616e636560501b6064820152608401611497565b60008061161c610a46565b905060006116286108e1565b90508661163e576116398289612101565b611648565b61164882896117e6565b91508461165e576116598187612101565b611668565b61166881876117e6565b905060006116778383876121a4565b9998505050505050505050565b6714d1120d7b1600008110156114a05760405162461bcd60e51b815260206004820152604960248201527f426f72726f7765724f70733a20416e206f7065726174696f6e2074686174207760448201527f6f756c6420726573756c7420696e20544352203c20434352206973206e6f74206064820152681c195c9b5a5d1d195960ba1b608482015260a401611497565b61171c6109eb565b6001600160a01b0316632a7ba1f7826040518263ffffffff1660e01b815260040161174991815260200190565b600060405180830381600087803b15801561176357600080fd5b505af1158015611777573d6000803e3d6000fd5b505050506117836110c2565b6001600160a01b0316639dc29fac83836040518363ffffffff1660e01b81526004016117b0929190612ea2565b600060405180830381600087803b1580156117ca57600080fd5b505af11580156117de573d6000803e3d6000fd5b505050505050565b60006117f28284612f5d565b90505b92915050565b611804886113a0565b61180e87866124a3565b61186d604051806101600160405280600081526020016000151581526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b61187561082b565b6001600160a01b0316630fdb11cf6040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156118af57600080fd5b505af11580156118c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118e79190612d1d565b8082526118f390611e3e565b1515602082015284156119595761190e828260200151611e5b565b61191786612531565b80602001516119595761192e868260000151611f90565b61014082018190528151611959919061195390610bd18a670de0b6b3a764000061207f565b84612097565b61196161127c565b6001600160a01b0316630b0765578a6040518263ffffffff1660e01b815260040161198c9190612e8e565b600060405180830381600087803b1580156119a657600080fd5b505af11580156119ba573d6000803e3d6000fd5b505050506119c661127c565b6001600160a01b031663d66a25538a6040518263ffffffff1660e01b81526004016119f19190612e8e565b60206040518083038186803b158015611a0957600080fd5b505afa158015611a1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a419190612d1d565b6040820152611a4e61127c565b6001600160a01b031663480cd5788a6040518263ffffffff1660e01b8152600401611a799190612e8e565b60206040518083038186803b158015611a9157600080fd5b505afa158015611aa5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ac99190612d1d565b60608201819052610140820151611ae491908a908a90612597565b611afb8160600151826040015183600001516121a4565b8160c0018181525050611b25816060015182604001518a8a8a8a8761014001518860000151612611565b60e08201819052602082015160c08301518351611b4a938c928c928c928c9291612646565b611b5d8989898989866101400151612697565b608083015260a082015284158015611b755750600086115b15611b9257611b88898260400151612968565b611b92898761151b565b611b9a61127c565b6001600160a01b03166318f2817a8a6040518263ffffffff1660e01b8152600401611bc59190612e8e565b602060405180830381600087803b158015611bdf57600080fd5b505af1158015611bf3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c179190612d1d565b81610100018181525050611c3d816060015182604001518a8a8a8a876101400151612a5d565b610120820152611c4b61111d565b6001600160a01b0316632be212608a83610120015187876040518563ffffffff1660e01b8152600401611c819493929190612ebb565b600060405180830381600087803b158015611c9b57600080fd5b505af1158015611caf573d6000803e3d6000fd5b50505050886001600160a01b031660008051602061300583398151915282608001518360a00151846101000151856101400151600280811115611d0257634e487b7160e01b600052602160045260246000fd5b604051611d13959493929190612ee6565b60405180910390a2611d2a8982610140015161242b565b611d378989898989612a90565b505050505050505050565b6001611d4c61127c565b6001600160a01b03166321e37801836040518263ffffffff1660e01b8152600401611d779190612e8e565b60206040518083038186803b158015611d8f57600080fd5b505afa158015611da3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dc79190612cfe565b6004811115611de657634e487b7160e01b600052602160045260246000fd5b14156114a05760405162461bcd60e51b815260206004820152602160248201527f426f72726f7765724f70733a2054726f766520616c72656164792065786973746044820152607360f81b6064820152608401611497565b600080611e4a83612b2e565b6714d1120d7b160000119392505050565b8015611ee457670de0b6b3a7640000821115611edf5760405162461bcd60e51b815260206004820152603f60248201527f426f72726f7765724f70733a204d6178206665652070657263656e746167652060448201527f6d757374206c657373207468616e206f7220657175616c20746f2031303025006064820152608401611497565b611f8c565b611ef86103e8670de0b6b3a7640000612f75565b611f03906005612f95565b8210158015611f1a5750670de0b6b3a76400008211155b611f8c5760405162461bcd60e51b815260206004820152603d60248201527f426f72726f7765724f70733a204d6178206665652070657263656e746167652060448201527f6d757374206265206265747765656e20302e352520616e6420313030250000006064820152608401611497565b5050565b6000611f9a61127c565b6001600160a01b0316635dba4c4a6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611fd457600080fd5b505af1158015611fe8573d6000803e3d6000fd5b505050506000611ff661127c565b604051632455c4e160e21b815260048101869052602481018590526001600160a01b03919091169063915713849060440160206040518083038186803b15801561203f57600080fd5b505afa158015612053573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120779190612d1d565b949350505050565b60006117f28284612f95565b60006117f28284612f75565b60006120af83610bd186670de0b6b3a764000061207f565b90508181111561080d5760405162461bcd60e51b815260206004820152601d60248201527f4665652065786365656465642070726f7669646564206d6178696d756d0000006044820152606401611497565b60006117f28284612fb4565b61211f671bc16d674ec80000826117e6565b821015611f8c5760405162461bcd60e51b815260206004820152604760248201527f426f72726f7765724f70733a204e6f7420656e6f75676820636f6c6c6174657260448201527f616c20666f722047617320436f6d70656e736174696f6e202620426f72726f77606482015266696e672046656560c81b608482015260a401611497565b600082156121c55760006121bc84610bd1878661207f565b91506121ca9050565b506000195b9392505050565b600081156121f7576121f082610bd18568056bc75e2d6310000061207f565b90506117f5565b506000196117f5565b6714d1120d7b1600008110156114a05760405162461bcd60e51b815260206004820152603760248201527f426f72726f7765724f70733a204f7065726174696f6e206d757374206c65617660448201527632903a3937bb32903bb4ba341024a1a9101f1e9021a1a960491b6064820152608401611497565b670f43fc2c04ee00008110156114a05760405162461bcd60e51b815260206004820152604960248201527f426f72726f7765724f70733a20416e206f7065726174696f6e2074686174207760448201527f6f756c6420726573756c7420696e20494352203c204d4352206973206e6f74206064820152681c195c9b5a5d1d195960ba1b608482015260a401611497565b6123106109eb565b6001600160a01b0316632b7c7b11826040518263ffffffff1660e01b815260040161233d91815260200190565b600060405180830381600087803b15801561235757600080fd5b505af115801561236b573d6000803e3d6000fd5b505050506123776110c2565b6001600160a01b03166340c10f1983836040518363ffffffff1660e01b81526004016117b0929190612ea2565b6123ac6109eb565b6001600160a01b0316634cd399b383836040518363ffffffff1660e01b81526004016123d9929190612ea2565b602060405180830381600087803b1580156123f357600080fd5b505af1158015612407573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108269190612cc6565b816001600160a01b03167f5d032cf8244d18503d44f7171954f352ff41fa2df69660eb897f4db36efe808e8260405161246691815260200190565b60405180910390a26124766109eb565b6001600160a01b0316634c38b4b2826040518263ffffffff1660e01b81526004016117b091815260200190565b811515806124b057508015155b611f8c5760405162461bcd60e51b815260206004820152604660248201527f426f72726f7765724f70733a205468657265206d75737420626520656974686560448201527f72206120636f6c6c61746572616c206368616e6765206f7220612064656274206064820152656368616e676560d01b608482015260a401611497565b600081116114a05760405162461bcd60e51b815260206004820152602d60248201527f426f72726f7765724f70733a204e6f6e2d5a65726f2064656274206368616e6760448201526c19481a5cc81c995c5d5a5c9959609a1b6064820152608401611497565b60006125ab82671bc16d674ec800006117e6565b905082156125e157806125be86866117e6565b10156125dc5760405162461bcd60e51b815260040161149790612f0c565b61260a565b6125eb84826117e6565b85101561260a5760405162461bcd60e51b815260040161149790612f0c565b5050505050565b60008060006126258b8b8b8b8b8b8b612b52565b9150915060006126368383876121a4565b9c9b505050505050505050505050565b8715612674576126568787612bcf565b831561266f5761266582612200565b61266f8284612c50565b610759565b61267d82612278565b600061268c8888888886611611565b9050611d3781611684565b60008060008661272d576126a961127c565b6001600160a01b031663d3d6f8438a8a6040518363ffffffff1660e01b81526004016126d6929190612ea2565b602060405180830381600087803b1580156126f057600080fd5b505af1158015612704573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127289190612d1d565b6127b4565b61273561127c565b6001600160a01b03166372423c178a8a6040518363ffffffff1660e01b8152600401612762929190612ea2565b602060405180830381600087803b15801561277c57600080fd5b505af1158015612790573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127b49190612d1d565b9050600085612849576127c561127c565b6001600160a01b03166312610e928b896040518363ffffffff1660e01b81526004016127f2929190612ea2565b602060405180830381600087803b15801561280c57600080fd5b505af1158015612820573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128449190612d1d565b6128d0565b61285161127c565b6001600160a01b0316639976cf458b896040518363ffffffff1660e01b815260040161287e929190612ea2565b602060405180830381600087803b15801561289857600080fd5b505af11580156128ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128d09190612d1d565b90506128da61127c565b6001600160a01b031663d3d6f8438b876040518363ffffffff1660e01b8152600401612907929190612ea2565b602060405180830381600087803b15801561292157600080fd5b505af1158015612935573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129599190612d1d565b9a909950975050505050505050565b600061297261127c565b6001600160a01b031663d66a2553846040518263ffffffff1660e01b815260040161299d9190612e8e565b60206040518083038186803b1580156129b557600080fd5b505afa1580156129c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129ed9190612d1d565b9050808211156108265760405162461bcd60e51b815260206004820152603560248201527f426f72726f7765724f70733a2054726f76652064656274206973206c657373206044820152741d1a185b881c995c185e5b595b9d08185b5bdd5b9d605a1b6064820152608401611497565b6000806000612a718a8a8a8a8a8a8a612b52565b915091506000612a8183836121d1565b9b9a5050505050505050505050565b8115612ab5578015612aab57612aa68583612308565b612ab5565b612ab58583611714565b831561260a578215612acb576125dc85856123a4565b612ad36109eb565b6001600160a01b0316639f4e511e86866040518363ffffffff1660e01b8152600401612b00929190612ea2565b600060405180830381600087803b158015612b1a57600080fd5b505af1158015611d37573d6000803e3d6000fd5b600080612b39610a46565b90506000612b456108e1565b90506120778282866121a4565b600080888887612b6b57612b668b8a612101565b612b75565b612b758b8a6117e6565b915085612b8b57612b868a88612101565b612b95565b612b958a886117e6565b905084821015612bb557634e487b7160e01b600052600160045260246000fd5b612bbf8286612101565b9b909a5098505050505050505050565b60018115151480612bde575081155b611f8c5760405162461bcd60e51b815260206004820152603e60248201527f426f72726f7765724f70733a20436f6c6c61746572616c20776974686472617760448201527f616c206e6f74207065726d6974746564205265636f76657279204d6f646500006064820152608401611497565b80821015611f8c5760405162461bcd60e51b815260206004820152603e60248201527f426f72726f7765724f70733a2043616e6e6f7420646563726561736520796f7560448201527f722054726f766527732049435220696e205265636f76657279204d6f646500006064820152608401611497565b600060208284031215612cd7578081fd5b81516121ca81612ff6565b600060208284031215612cf3578081fd5b81516121ca81612fe1565b600060208284031215612d0f578081fd5b8151600581106121ca578182fd5b600060208284031215612d2e578081fd5b5051919050565b600080600060608486031215612d49578182fd5b833592506020840135612d5b81612fe1565b91506040840135612d6b81612fe1565b809150509250925092565b600080600080600080600060e0888a031215612d90578485fd5b873596506020880135612da281612ff6565b9550604088013594506060880135612db981612ff6565b93506080880135612dc981612fe1565b925060a0880135612dd981612fe1565b8092505060c0880135905092959891949750929550565b60008060008060808587031215612e05578182fd5b84359350602085013592506040850135612e1e81612fe1565b91506060850135612e2e81612fe1565b939692955090935050565b600080600080600060a08688031215612e50578283fd5b8535945060208601359350604086013592506060860135612e7081612fe1565b91506080860135612e8081612fe1565b809150509295509295909350565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b03948516815260208101939093529083166040830152909116606082015260800190565b94855260208501939093526040840191909152606083015260ff16608082015260a00190565b60208082526031908201527f426f72726f7765724f70733a204e6f7420656e6f75676820636f6c6c61746572604082015270185b08199bdc8818591a9d5cdd1b595b9d607a1b606082015260800190565b60008219821115612f7057612f70612fcb565b500190565b600082612f9057634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615612faf57612faf612fcb565b500290565b600082821015612fc657612fc6612fcb565b500390565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03811681146114a057600080fd5b80151581146114a057600080fdfef575eb5cdee005607f56587351e18943ddacd11756b9d37980ec251797ff136ca2646970667358221220a0ee15b7e327863c0cff099f86a2b5eb64c72f7d9febfb15810219172c039ce564736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 15613,
        "contract": "contracts/core/BorrowerOperations.sol:BorrowerOperations",
        "label": "MAX_UINT",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
