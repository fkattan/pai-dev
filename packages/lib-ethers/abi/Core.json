{
  "address": "0x37F6DFa518E3708727E7eD3CbF5cA3641412890e",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "activePool",
      "outputs": [
        {
          "internalType": "contract IActivePool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowerOperations",
      "outputs": [
        {
          "internalType": "contract IBorrowerOperations",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collSurplusPool",
      "outputs": [
        {
          "internalType": "contract ICollSurplusPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultPool",
      "outputs": [
        {
          "internalType": "contract IDefaultPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gemToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "myoStaking",
      "outputs": [
        {
          "internalType": "contract IMYOStaking",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "myoToken",
      "outputs": [
        {
          "internalType": "contract IMYOToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paiToken",
      "outputs": [
        {
          "internalType": "contract IPAIToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "contract IPriceFeed",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gemTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_paiTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_myoTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sortedTrovesAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vaultAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_myoStakingAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priceFeedAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_activePoolAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_defaultPoolAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collSurplusPoolAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_borrowerOperationsAddress",
          "type": "address"
        }
      ],
      "name": "setAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sortedTroves",
      "outputs": [
        {
          "internalType": "contract ISortedTroves",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "contract IVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x662b67ed40dfc827f010693ceffb072c2eca81a104244efee824d7de37ab853c",
  "receipt": {
    "to": null,
    "from": "0xd28e3542856F157f979111435DaFCC37f419d0c2",
    "contractAddress": "0x37F6DFa518E3708727E7eD3CbF5cA3641412890e",
    "transactionIndex": 8,
    "gasUsed": "440979",
    "logsBloom": "0x
    "blockHash": "0xa00c2877f417eac0a4a57d70d166350bb7f2749e5e8c302ee09ba1677c828257",
    "transactionHash": "0x662b67ed40dfc827f010693ceffb072c2eca81a104244efee824d7de37ab853c",
    "logs": [
      {
        "transactionIndex": 8,
        "blockNumber": 26047911,
        "transactionHash": "0x662b67ed40dfc827f010693ceffb072c2eca81a104244efee824d7de37ab853c",
        "address": "0x37F6DFa518E3708727E7eD3CbF5cA3641412890e",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d28e3542856f157f979111435dafcc37f419d0c2"
        ],
        "data": "0x",
        "logIndex": 16,
        "blockHash": "0xa00c2877f417eac0a4a57d70d166350bb7f2749e5e8c302ee09ba1677c828257"
      },
      {
        "transactionIndex": 8,
        "blockNumber": 26047911,
        "transactionHash": "0x662b67ed40dfc827f010693ceffb072c2eca81a104244efee824d7de37ab853c",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000d28e3542856f157f979111435dafcc37f419d0c2",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000c888b6500d5fb0000000000000000000000000000000000000000000000000b084a0c15f35f6700000000000000000000000000000000000000000000126f8e0a348d3d37ecf50000000000000000000000000000000000000000000000000afbc180b0f2896c00000000000000000000000000000000000000000000126f8e16bd18a238c2f0",
        "logIndex": 17,
        "blockHash": "0xa00c2877f417eac0a4a57d70d166350bb7f2749e5e8c302ee09ba1677c828257"
      }
    ],
    "blockNumber": 26047911,
    "cumulativeGasUsed": "1734361",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "8aa079dc372efa4fb72dddab2b66ad11",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"activePool\",\"outputs\":[{\"internalType\":\"contract IActivePool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowerOperations\",\"outputs\":[{\"internalType\":\"contract IBorrowerOperations\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collSurplusPool\",\"outputs\":[{\"internalType\":\"contract ICollSurplusPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultPool\",\"outputs\":[{\"internalType\":\"contract IDefaultPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gemToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"myoStaking\",\"outputs\":[{\"internalType\":\"contract IMYOStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"myoToken\",\"outputs\":[{\"internalType\":\"contract IMYOToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paiToken\",\"outputs\":[{\"internalType\":\"contract IPAIToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract IPriceFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gemTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_paiTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_myoTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sortedTrovesAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vaultAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_myoStakingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceFeedAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_activePoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_defaultPoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collSurplusPoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrowerOperationsAddress\",\"type\":\"address\"}],\"name\":\"setAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sortedTroves\",\"outputs\":[{\"internalType\":\"contract ISortedTroves\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/Core.sol\":\"Core\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/core/Core.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\nimport \\\"../dependencies/CheckContract.sol\\\";\\nimport \\\"../interfaces/ICore.sol\\\";\\nimport \\\"../interfaces/IVault.sol\\\";\\nimport \\\"../interfaces/IMYOStaking.sol\\\";\\nimport \\\"../interfaces/IMYOToken.sol\\\";\\nimport \\\"../interfaces/ISortedTroves.sol\\\";\\nimport \\\"../interfaces/IPAIToken.sol\\\";\\nimport \\\"../interfaces/IPriceFeed.sol\\\";\\nimport \\\"../interfaces/IDefaultPool.sol\\\";\\nimport \\\"../interfaces/ICollSurplusPool.sol\\\";\\nimport \\\"../interfaces/IActivePool.sol\\\";\\nimport \\\"../interfaces/IBorrowerOperations.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Core is ICore, Ownable, CheckContract {\\n\\tIERC20 public override gemToken;\\n\\tIPAIToken public override paiToken;\\n\\tIMYOToken public override myoToken;\\n\\n\\tISortedTroves public override sortedTroves;\\n\\n\\tIVault public override vault;\\n\\tIPriceFeed public override priceFeed;\\n\\tIDefaultPool public override defaultPool;\\n\\tIActivePool public override activePool;\\n\\tICollSurplusPool public override collSurplusPool;\\n\\tIBorrowerOperations public override borrowerOperations;\\n\\tIMYOStaking public override myoStaking;\\n\\n\\tfunction setAddresses(\\n\\t\\taddress _gemTokenAddress,\\n\\t\\taddress _paiTokenAddress,\\n\\t\\taddress _myoTokenAddress,\\n\\t\\taddress _sortedTrovesAddress,\\n\\t\\taddress _vaultAddress,\\n\\t\\taddress _myoStakingAddress,\\n\\t\\taddress _priceFeedAddress,\\n\\t\\taddress _activePoolAddress,\\n\\t\\taddress _defaultPoolAddress,\\n\\t\\taddress _collSurplusPoolAddress,\\n\\t\\taddress _borrowerOperationsAddress\\n\\t) external override onlyOwner {\\n\\t\\tcheckContract(_gemTokenAddress);\\n\\t\\tcheckContract(_paiTokenAddress);\\n\\t\\tcheckContract(_myoTokenAddress);\\n\\t\\tcheckContract(_sortedTrovesAddress);\\n\\t\\tcheckContract(_vaultAddress);\\n\\t\\tcheckContract(_myoStakingAddress);\\n\\t\\tcheckContract(_priceFeedAddress);\\n\\t\\tcheckContract(_activePoolAddress);\\n\\t\\tcheckContract(_defaultPoolAddress);\\n\\t\\tcheckContract(_collSurplusPoolAddress);\\n\\t\\tcheckContract(_borrowerOperationsAddress);\\n\\n\\t\\tgemToken = IERC20(_gemTokenAddress);\\n\\t\\tpaiToken = IPAIToken(_paiTokenAddress);\\n\\t\\tmyoToken = IMYOToken(_myoTokenAddress);\\n\\n\\t\\tsortedTroves = ISortedTroves(_sortedTrovesAddress);\\n\\n\\t\\tvault = IVault(_vaultAddress);\\n\\t\\tmyoStaking = IMYOStaking(_myoStakingAddress);\\n\\t\\tpriceFeed = IPriceFeed(_priceFeedAddress);\\n\\t\\tactivePool = IActivePool(_activePoolAddress);\\n\\t\\tdefaultPool = IDefaultPool(_defaultPoolAddress);\\n\\t\\tcollSurplusPool = ICollSurplusPool(_collSurplusPoolAddress);\\n\\t\\tborrowerOperations = IBorrowerOperations(_borrowerOperationsAddress);\\n\\n\\t\\trenounceOwnership();\\n\\t}\\n}\\n\",\"keccak256\":\"0x4aef0d2d36fa713a24a4a791698649d6bb90afd91325d305cf680828c8efa127\",\"license\":\"MIT\"},\"contracts/dependencies/CheckContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\ncontract CheckContract {\\n\\t/**\\n\\t * Check that the account is an already deployed non-destroyed contract.\\n\\t * See: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol#L12\\n\\t */\\n\\tfunction checkContract(address _account) internal view {\\n\\t\\trequire(_account != address(0), \\\"Account cannot be zero address\\\");\\n\\n\\t\\tuint256 size;\\n\\t\\t// solhint-disable-next-line no-inline-assembly\\n\\t\\tassembly {\\n\\t\\t\\tsize := extcodesize(_account)\\n\\t\\t}\\n\\t\\trequire(size > 0, \\\"Account code size cannot be zero\\\");\\n\\t}\\n}\\n\",\"keccak256\":\"0xb5cb7705e2af49e9ad0be340e8fd106a5bf928fd834ae7e4d22d8c6db17e7844\",\"license\":\"MIT\"},\"contracts/interfaces/IActivePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\ninterface IActivePool {\\n\\t// --- Events ---\\n\\tevent ActivePoolDebtUpdated(uint256 _debt);\\n\\tevent ActivePoolCollUpdated(uint256 _coll);\\n\\tevent ActivePoolgasCompensationBalanceUpdated(uint256 gasBalance);\\n\\n\\t// --- Functions ---\\n\\n\\tfunction getColl() external view returns (uint256);\\n\\n\\tfunction getDebt() external view returns (uint256);\\n\\n\\tfunction getGasCompensationBalance() external view returns (uint256);\\n\\n\\tfunction receiveColl(address sender, uint256 _amount) external returns (bool);\\n\\n\\tfunction sendColl(address _account, uint256 _amount) external;\\n\\n\\tfunction increaseDebt(uint256 _amount) external;\\n\\n\\tfunction decreaseDebt(uint256 _amount) external;\\n\\n\\tfunction transferFeeToStacking(uint256 _amount) external;\\n\\n\\tfunction sendGasCompensation(address _account) external;\\n\\n\\tfunction increaseGasCompensationBalance() external;\\n\\n\\tfunction decreaseGasCompensationBalance() external;\\n}\\n\",\"keccak256\":\"0x076c1e5eab0ec84bf88ac69e44b4eb7efe0ec739b4bcd4c0e2179dde69384d74\",\"license\":\"MIT\"},\"contracts/interfaces/IBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\ninterface IBase {\\n\\tenum TroveOperation {\\n\\t\\tapplyPendingRewards,\\n\\t\\tliquidateInNormalMode,\\n\\t\\tliquidateInRecoveryMode,\\n\\t\\tredeemCollateral\\n\\t}\\n\\n\\tenum TroveStatus {\\n\\t\\tnonExistent,\\n\\t\\tactive,\\n\\t\\tclosedByOwner,\\n\\t\\tclosedByLiquidation,\\n\\t\\tclosedByRedemption\\n\\t}\\n}\\n\",\"keccak256\":\"0xe5c93a5a6eb11be0dda687ba8d5a5399d1e395f8fd63a590cfd1f60d165de33b\",\"license\":\"MIT\"},\"contracts/interfaces/IBorrowerOperations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\n// Common interface for the Trove Manager.\\ninterface IBorrowerOperations {\\n\\t// --- Events ---\\n\\n\\tevent TroveCreated(address indexed _borrower, uint256 arrayIndex);\\n\\tevent TroveUpdated(\\n\\t\\taddress indexed _borrower,\\n\\t\\tuint256 _debt,\\n\\t\\tuint256 _coll,\\n\\t\\tuint256 stake,\\n\\t\\tuint256 _borrowingFee,\\n\\t\\tuint8 operation\\n\\t);\\n\\n\\tevent BorrowingFeePaid(address indexed _borrower, uint256 _Fee);\\n\\n\\t// --- Functions ---\\n\\n\\tfunction openTrove(\\n\\t\\tuint256 _maxFee,\\n\\t\\tuint256 _debt,\\n\\t\\tuint256 _coll,\\n\\t\\taddress _upperHint,\\n\\t\\taddress _lowerHint\\n\\t) external;\\n\\n\\tfunction addColl(\\n\\t\\tuint256 _coll,\\n\\t\\taddress _upperHint,\\n\\t\\taddress _lowerHint\\n\\t) external;\\n\\n\\tfunction withdrawColl(\\n\\t\\tuint256 _coll,\\n\\t\\taddress _upperHint,\\n\\t\\taddress _lowerHint\\n\\t) external;\\n\\n\\tfunction withdrawPAI(\\n\\t\\tuint256 _maxFee,\\n\\t\\tuint256 _amount,\\n\\t\\taddress _upperHint,\\n\\t\\taddress _lowerHint\\n\\t) external;\\n\\n\\tfunction repayPAI(\\n\\t\\tuint256 _amount,\\n\\t\\taddress _upperHint,\\n\\t\\taddress _lowerHint\\n\\t) external;\\n\\n\\tfunction closeTrove() external;\\n\\n\\tfunction adjustTrove(\\n\\t\\tuint256 _collChange,\\n\\t\\tbool _isCollIncrease,\\n\\t\\tuint256 _debtChange,\\n\\t\\tbool _isDebtIncrease,\\n\\t\\taddress _upperHint,\\n\\t\\taddress _lowerHint,\\n\\t\\tuint256 _maxFeePercentage\\n\\t) external;\\n\\n\\tfunction claimCollateral() external;\\n}\\n\",\"keccak256\":\"0x2adf8d06d3469b27c19f86dc54c89a9ffd542cf3f2ace19eab8925cdbfe9aee8\",\"license\":\"MIT\"},\"contracts/interfaces/ICollSurplusPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface ICollSurplusPool {\\n\\t// --- Events ---\\n\\n\\tevent CollBalanceUpdated(address indexed _account, uint256 _newBalance);\\n\\tevent CollSent(address _to, uint256 _amount);\\n\\n\\tfunction getColl() external view returns (uint256);\\n\\n\\tfunction getCollateral(address _account) external view returns (uint256);\\n\\n\\tfunction accountSurplus(address _account, uint256 _amount) external;\\n\\n\\tfunction claimColl(address _account) external;\\n}\\n\",\"keccak256\":\"0x305dde14e343334510b9283c9c49d2c5aa1525ef4eae6ea3906797561a9bfbb9\",\"license\":\"MIT\"},\"contracts/interfaces/ICore.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.3;\\n\\nimport \\\"./IVault.sol\\\";\\nimport \\\"./IMYOStaking.sol\\\";\\nimport \\\"../interfaces/IMYOToken.sol\\\";\\nimport \\\"../interfaces/IPAIToken.sol\\\";\\nimport \\\"../interfaces/ISortedTroves.sol\\\";\\nimport \\\"../interfaces/IPriceFeed.sol\\\";\\nimport \\\"../interfaces/IActivePool.sol\\\";\\nimport \\\"../interfaces/IDefaultPool.sol\\\";\\nimport \\\"../interfaces/ICollSurplusPool.sol\\\";\\nimport \\\"../interfaces/IBorrowerOperations.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ICore {\\n\\t// Tokens\\n\\tfunction gemToken() external view returns (IERC20);\\n\\n\\tfunction paiToken() external view returns (IPAIToken);\\n\\n\\tfunction myoToken() external view returns (IMYOToken);\\n\\n\\t// Core Contracts\\n\\n\\tfunction sortedTroves() external view returns (ISortedTroves);\\n\\n\\tfunction vault() external view returns (IVault);\\n\\n\\tfunction myoStaking() external view returns (IMYOStaking);\\n\\n\\tfunction priceFeed() external view returns (IPriceFeed);\\n\\n\\tfunction activePool() external view returns (IActivePool);\\n\\n\\tfunction collSurplusPool() external view returns (ICollSurplusPool);\\n\\n\\tfunction defaultPool() external view returns (IDefaultPool);\\n\\n\\tfunction borrowerOperations() external view returns (IBorrowerOperations);\\n\\n\\t// Setter\\n\\n\\tfunction setAddresses(\\n\\t\\taddress _gemTokenAddress,\\n\\t\\taddress _paiTokenAddress,\\n\\t\\taddress _myoTokenAddress,\\n\\t\\taddress _sortedTrovesAddress,\\n\\t\\taddress _vaultAddress,\\n\\t\\taddress _myoStakingAddress,\\n\\t\\taddress _priceFeedAddress,\\n\\t\\taddress _activePoolAddress,\\n\\t\\taddress _defaultPoolAddress,\\n\\t\\taddress _collSurplusPoolAddress,\\n\\t\\taddress _borrowerOperationsAddress\\n\\t) external;\\n}\\n\",\"keccak256\":\"0x0a7eacf11f0e0f41669dd4d87dad5718180f19e026881ba6e3e00a87b8df3dec\",\"license\":\"Unlicense\"},\"contracts/interfaces/IDefaultPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface IDefaultPool {\\n\\t// --- Events ---\\n\\tevent GemSent(address _recipient, uint256 _amount);\\n\\tevent DefaultPoolCollBalanceUpdated(uint256 _amount);\\n\\tevent DefaultPoolDebtBalanceUpdated(uint256 _debt);\\n\\n\\t// --- Functions ---\\n\\n\\tfunction getColl() external view returns (uint256);\\n\\n\\tfunction getDebt() external view returns (uint256);\\n\\n\\tfunction increaseDebt(uint256 _amount) external;\\n\\n\\tfunction decreaseDebt(uint256 _amount) external;\\n\\n\\tfunction receiveColl(uint256 _amount) external returns (bool);\\n\\n\\tfunction sendCollToActivePool(uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x5e5936d6e59a5060f9f268b6088d557876eba26c8583191b45f7378d4a509110\",\"license\":\"MIT\"},\"contracts/interfaces/IMYOStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface IMYOStaking {\\n\\tfunction stake(uint256 _MYOamount) external;\\n\\n\\tfunction unstake(uint256 _MYOamount) external;\\n\\n\\tfunction increaseF_GEM(uint256 _GEMFee) external;\\n\\n\\tfunction increaseF_PAI(uint256 _PAIFee) external;\\n\\n\\tfunction getPendingGEMGain(address _user) external view returns (uint256);\\n\\n\\tfunction getPendingPAIGain(address _user) external view returns (uint256);\\n\\n\\tfunction getAccruedGEMFees() external view returns (uint256);\\n\\n\\tfunction getAccruedPAIFees() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa79b5abd952be6a7688ddbf9f7ed8c08345c68deae82db27aecbc513a8c87024\",\"license\":\"MIT\"},\"contracts/interfaces/IMYOToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IMYOToken is IERC20, IERC20Permit, IERC20Metadata {\\n\\t// --- Events ---\\n\\n\\tevent CommunityIssuanceAddressSet(address _communityIssuanceAddress);\\n\\tevent MYOStakingAddressSet(address _myoStakingAddress);\\n\\tevent LockupContractFactoryAddressSet(address _lockupContractFactoryAddress);\\n\\n\\t// --- Functions ---\\n\\n\\tfunction sendToMYOStaking(address _sender, uint256 _amount) external;\\n\\n\\tfunction getDeploymentStartTime() external view returns (uint256);\\n\\n\\tfunction getLpRewardsEntitlement() external view returns (uint256);\\n\\n\\tfunction increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\n\\n\\tfunction decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\n\\n\\tfunction permitTypeHash() external view returns (bytes32);\\n\\n\\tfunction version() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6f53194956e4c49c701a27fab9e30b67df4fb7ae10b8b1110ffc51f983cc0ac2\",\"license\":\"MIT\"},\"contracts/interfaces/IPAIToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IPAIToken is IERC20, IERC20Permit, IERC20Metadata {\\n\\t// --- Events ---\\n\\n\\tevent PAITokenBalanceUpdated(address _user, uint256 _amount);\\n\\n\\t// --- Functions ---\\n\\n\\tfunction mint(address _account, uint256 _amount) external;\\n\\n\\tfunction burn(address _account, uint256 _amount) external;\\n\\n\\t// function sendToPool(\\n\\t// \\taddress _sender,\\n\\t// \\taddress poolAddress,\\n\\t// \\tuint256 _amount\\n\\t// ) external;\\n\\n\\t// function returnFromPool(\\n\\t// \\taddress poolAddress,\\n\\t// \\taddress user,\\n\\t// \\tuint256 _amount\\n\\t// ) external;\\n\\n\\tfunction increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\n\\n\\tfunction decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\n\\n\\tfunction permitTypeHash() external view returns (bytes32);\\n\\n\\tfunction version() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x3312daa10e22922f96ea5015f6a4efdf9fb00b4d9c1bfebf7bf7315a22699840\",\"license\":\"MIT\"},\"contracts/interfaces/IPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\ninterface IPriceFeed {\\n\\t// --- Events ---j\\n\\tevent LastGoodPriceUpdated(uint256 _lastGoodPrice);\\n\\n\\t// --- Function ---\\n\\tfunction fetchPrice() external returns (uint256);\\n}\\n\",\"keccak256\":\"0xfb8dd85ba5db55006bdc28c5102b88581a8ac106c06b01ef538d1204ac0736dd\",\"license\":\"MIT\"},\"contracts/interfaces/ISortedTroves.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\n// Common interface for the SortedTroves Doubly Linked List.\\ninterface ISortedTroves {\\n\\t// --- Events ---\\n\\n\\tevent BorrowerOperationsAddressChanged(address _borrowerOperationsAddress);\\n\\tevent VaultAddressChanged(address _vaultAddress);\\n\\tevent NodeAdded(address _id, uint256 _NICR);\\n\\tevent NodeRemoved(address _id);\\n\\n\\t// --- Functions ---\\n\\n\\tfunction setParams(\\n\\t\\tuint256 _size,\\n\\t\\taddress _vaultAddress,\\n\\t\\taddress _borrowerOperationsAddress\\n\\t) external;\\n\\n\\tfunction insert(\\n\\t\\taddress _id,\\n\\t\\tuint256 _ICR,\\n\\t\\taddress _prevId,\\n\\t\\taddress _nextId\\n\\t) external;\\n\\n\\tfunction remove(address _id) external;\\n\\n\\tfunction reInsert(\\n\\t\\taddress _id,\\n\\t\\tuint256 _newICR,\\n\\t\\taddress _prevId,\\n\\t\\taddress _nextId\\n\\t) external;\\n\\n\\tfunction contains(address _id) external view returns (bool);\\n\\n\\tfunction isFull() external view returns (bool);\\n\\n\\tfunction isEmpty() external view returns (bool);\\n\\n\\tfunction getSize() external view returns (uint256);\\n\\n\\tfunction getMaxSize() external view returns (uint256);\\n\\n\\tfunction getFirst() external view returns (address);\\n\\n\\tfunction getLast() external view returns (address);\\n\\n\\tfunction getNext(address _id) external view returns (address);\\n\\n\\tfunction getPrev(address _id) external view returns (address);\\n\\n\\tfunction validInsertPosition(\\n\\t\\tuint256 _ICR,\\n\\t\\taddress _prevId,\\n\\t\\taddress _nextId\\n\\t) external view returns (bool);\\n\\n\\tfunction findInsertPosition(\\n\\t\\tuint256 _ICR,\\n\\t\\taddress _prevId,\\n\\t\\taddress _nextId\\n\\t) external view returns (address, address);\\n}\\n\",\"keccak256\":\"0xcbd1ed4f5291ae6801e526e3bd6eabf8776009e511aab81e5bf74a51a426ce6b\",\"license\":\"MIT\"},\"contracts/interfaces/IVault.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.3;\\n\\nimport \\\"./IBase.sol\\\";\\n\\ninterface IVault is IBase {\\n\\t// --- Events ---\\n\\n\\tevent TroveUpdated(\\n\\t\\taddress indexed _borrower,\\n\\t\\tuint256 _debt,\\n\\t\\tuint256 _coll,\\n\\t\\tuint256 _borrowingFee,\\n\\t\\tuint256 _stake,\\n\\t\\tTroveOperation _operation\\n\\t);\\n\\tevent TotalStakesUpdated(uint256 _newTotalStakes);\\n\\tevent TroveSnapshotsUpdated(uint256 _L_Coll, uint256 _L_Debt);\\n\\n\\tevent BaseRateUpdated(uint256 _baseRate);\\n\\tevent LastFeeOpTimeUpdated(uint256 _lastFeeOpTime);\\n\\n\\tevent Liquidation(uint256 _liquidatedDebt, uint256 _liquidatedColl, uint256 _gasCompensation);\\n\\tevent Redemption(\\n\\t\\tuint256 _attemptedPAIAmount,\\n\\t\\tuint256 _actualPAIAmount,\\n\\t\\tuint256 _collSent,\\n\\t\\tuint256 _collFee\\n\\t);\\n\\tevent TroveLiquidated(address indexed _borrower, uint256 _debt, uint256 _coll, uint8 operation);\\n\\tevent SystemSnapshotsUpdated(uint256 _totalStakesSnapshot, uint256 _totalCollateralSnapshot);\\n\\tevent LTermsUpdated(uint256 _L_Coll, uint256 _L_Debt);\\n\\tevent TroveIndexUpdated(address _borrower, uint256 _newIndex);\\n\\n\\tfunction baseRate() external view returns (uint256);\\n\\n\\t// Borrowing Fee Functions\\n\\n\\tfunction getTroveOwnersCount() external view returns (uint256);\\n\\n\\tfunction getTroveFromTroveOwnersArray(uint256 _index) external view returns (address);\\n\\n\\t// Collateralization Ratios\\n\\tfunction getNominalICR(address _borrower) external view returns (uint256);\\n\\n\\tfunction getCurrentICR(address _borrower, uint256 _price) external view returns (uint256);\\n\\n\\tfunction getTCR(uint256 _price) external view returns (uint256);\\n\\n\\t// Liquidations\\n\\tfunction liquidate(address _borrower) external;\\n\\n\\tfunction liquidateTroves(uint256 _n) external;\\n\\n\\tfunction batchLiquidateTroves(address[] calldata _troveArray) external;\\n\\n\\tfunction redeemCollateral(\\n\\t\\tuint256 _paiAmount,\\n\\t\\taddress _firstRedemptionHint,\\n\\t\\taddress _upperPartialRedemptionHint,\\n\\t\\taddress _lowerPartialRedemptionHint,\\n\\t\\tuint256 _partialRedemptionHintNICR,\\n\\t\\tuint256 _maxIterations,\\n\\t\\tuint256 _maxFee\\n\\t) external;\\n\\n\\tfunction updateStakeAndTotalStakes(address _borrower) external returns (uint256);\\n\\n\\tfunction updateTroveRewardSnapshots(address _borrower) external;\\n\\n\\tfunction addTroveOwnerToArray(address _borrower) external returns (uint256 index);\\n\\n\\tfunction applyPendingRewards(address _borrower) external;\\n\\n\\tfunction getPendingCollReward(address _borrower) external view returns (uint256);\\n\\n\\tfunction getPendingDebtReward(address _borrower) external view returns (uint256);\\n\\n\\tfunction hasPendingRewards(address _borrower) external view returns (bool);\\n\\n\\tfunction getEntireDebtAndColl(address _borrower)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint256 debt,\\n\\t\\t\\tuint256 coll,\\n\\t\\t\\tuint256 pendingDebtReward,\\n\\t\\t\\tuint256 pendingCollReward\\n\\t\\t);\\n\\n\\tfunction closeTrove(address _borrower) external;\\n\\n\\tfunction removeStake(address _borrower) external;\\n\\n\\t// Borrowing and Redemption Fees\\n\\n\\tfunction getRedemptionRate() external view returns (uint256);\\n\\n\\tfunction getRedemptionRateWithDecay() external view returns (uint256);\\n\\n\\tfunction getRedemptionFeeWithDecay(uint256 _collDrawn) external view returns (uint256);\\n\\n\\tfunction getBorrowingRate() external view returns (uint256);\\n\\n\\tfunction getBorrowingRateWithDecay() external view returns (uint256);\\n\\n\\tfunction getBorrowingFee(uint256 _debt, uint256 _price) external view returns (uint256);\\n\\n\\tfunction getBorrowingFeeWithDecay(uint256 _debt, uint256 _price)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256);\\n\\n\\tfunction decayBaseRateFromBorrowing() external;\\n\\n\\t// Trove Management\\n\\tfunction increaseTroveColl(address _borrower, uint256 _collIncrease) external returns (uint256);\\n\\n\\tfunction decreaseTroveColl(address _borrower, uint256 _collDecrease) external returns (uint256);\\n\\n\\tfunction increaseTroveDebt(address _borrower, uint256 _debtIncrease) external returns (uint256);\\n\\n\\tfunction decreaseTroveDebt(address _borrower, uint256 _debtDecrease) external returns (uint256);\\n\\n\\tfunction setTroveStatus(address _borrower, uint256 _num) external;\\n\\n\\tfunction getTroveStatus(address _borrower) external view returns (TroveStatus);\\n\\n\\tfunction getTroveStake(address _borrower) external view returns (uint256);\\n\\n\\tfunction getTroveDebt(address _borrower) external view returns (uint256);\\n\\n\\tfunction getTroveColl(address _borrower) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x56b260112539fd68925ae0d21ee16698d05bea325f6316305cf650b48aad35a9\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61068e8061007e6000396000f3fe608060405234801561001057600080fd5b50600436106100d55760003560e01c80639e8ef390116100875780639e8ef39014610170578063ae91875414610183578063cda775f914610196578063e2d8ef8d146101a9578063f2fde38b146101bc578063fbfa77cf146101cf578063ff2fb57c146101e2578063fff298df146101f5576100d5565b80633cc74225146100da578063715018a614610109578063741bef1a1461011357806377553ad4146101265780637985c5e4146101395780637f7dde4a1461014c5780638da5cb5b1461015f575b600080fd5b6007546100ed906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b610111610208565b005b6006546100ed906001600160a01b031681565b600a546100ed906001600160a01b031681565b610111610147366004610558565b610247565b6008546100ed906001600160a01b031681565b6000546001600160a01b03166100ed565b6002546100ed906001600160a01b031681565b6004546100ed906001600160a01b031681565b6009546100ed906001600160a01b031681565b600b546100ed906001600160a01b031681565b6101116101ca366004610537565b610387565b6005546100ed906001600160a01b031681565b6001546100ed906001600160a01b031681565b6003546100ed906001600160a01b031681565b6000546001600160a01b0316331461023b5760405162461bcd60e51b815260040161023290610623565b60405180910390fd5b6102456000610422565b565b6000546001600160a01b031633146102715760405162461bcd60e51b815260040161023290610623565b61027a8b610472565b6102838a610472565b61028c89610472565b61029588610472565b61029e87610472565b6102a786610472565b6102b085610472565b6102b984610472565b6102c283610472565b6102cb82610472565b6102d481610472565b600180546001600160a01b03199081166001600160a01b038e8116919091179092556002805482168d84161790556003805482168c84161790556004805482168b84161790556005805482168a8416179055600b80548216898416179055600680548216888416179055600880548216878416179055600780548216868416179055600980548216858416179055600a805490911691831691909117905561037a610208565b5050505050505050505050565b6000546001600160a01b031633146103b15760405162461bcd60e51b815260040161023290610623565b6001600160a01b0381166104165760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610232565b61041f81610422565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0381166104c85760405162461bcd60e51b815260206004820152601e60248201527f4163636f756e742063616e6e6f74206265207a65726f206164647265737300006044820152606401610232565b803b806105175760405162461bcd60e51b815260206004820181905260248201527f4163636f756e7420636f64652073697a652063616e6e6f74206265207a65726f6044820152606401610232565b5050565b80356001600160a01b038116811461053257600080fd5b919050565b600060208284031215610548578081fd5b6105518261051b565b9392505050565b60008060008060008060008060008060006101608c8e031215610579578687fd5b6105828c61051b565b9a5061059060208d0161051b565b995061059e60408d0161051b565b98506105ac60608d0161051b565b97506105ba60808d0161051b565b96506105c860a08d0161051b565b95506105d660c08d0161051b565b94506105e460e08d0161051b565b93506105f36101008d0161051b565b92506106026101208d0161051b565b91506106116101408d0161051b565b90509295989b509295989b9093969950565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260408201526060019056fea26469706673582212209614bf6f3e0d40851200ce5ac719a6382daeb24bf0f3b0521e44caa5e7d84bdb64736f6c63430008030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100d55760003560e01c80639e8ef390116100875780639e8ef39014610170578063ae91875414610183578063cda775f914610196578063e2d8ef8d146101a9578063f2fde38b146101bc578063fbfa77cf146101cf578063ff2fb57c146101e2578063fff298df146101f5576100d5565b80633cc74225146100da578063715018a614610109578063741bef1a1461011357806377553ad4146101265780637985c5e4146101395780637f7dde4a1461014c5780638da5cb5b1461015f575b600080fd5b6007546100ed906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b610111610208565b005b6006546100ed906001600160a01b031681565b600a546100ed906001600160a01b031681565b610111610147366004610558565b610247565b6008546100ed906001600160a01b031681565b6000546001600160a01b03166100ed565b6002546100ed906001600160a01b031681565b6004546100ed906001600160a01b031681565b6009546100ed906001600160a01b031681565b600b546100ed906001600160a01b031681565b6101116101ca366004610537565b610387565b6005546100ed906001600160a01b031681565b6001546100ed906001600160a01b031681565b6003546100ed906001600160a01b031681565b6000546001600160a01b0316331461023b5760405162461bcd60e51b815260040161023290610623565b60405180910390fd5b6102456000610422565b565b6000546001600160a01b031633146102715760405162461bcd60e51b815260040161023290610623565b61027a8b610472565b6102838a610472565b61028c89610472565b61029588610472565b61029e87610472565b6102a786610472565b6102b085610472565b6102b984610472565b6102c283610472565b6102cb82610472565b6102d481610472565b600180546001600160a01b03199081166001600160a01b038e8116919091179092556002805482168d84161790556003805482168c84161790556004805482168b84161790556005805482168a8416179055600b80548216898416179055600680548216888416179055600880548216878416179055600780548216868416179055600980548216858416179055600a805490911691831691909117905561037a610208565b5050505050505050505050565b6000546001600160a01b031633146103b15760405162461bcd60e51b815260040161023290610623565b6001600160a01b0381166104165760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610232565b61041f81610422565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0381166104c85760405162461bcd60e51b815260206004820152601e60248201527f4163636f756e742063616e6e6f74206265207a65726f206164647265737300006044820152606401610232565b803b806105175760405162461bcd60e51b815260206004820181905260248201527f4163636f756e7420636f64652073697a652063616e6e6f74206265207a65726f6044820152606401610232565b5050565b80356001600160a01b038116811461053257600080fd5b919050565b600060208284031215610548578081fd5b6105518261051b565b9392505050565b60008060008060008060008060008060006101608c8e031215610579578687fd5b6105828c61051b565b9a5061059060208d0161051b565b995061059e60408d0161051b565b98506105ac60608d0161051b565b97506105ba60808d0161051b565b96506105c860a08d0161051b565b95506105d660c08d0161051b565b94506105e460e08d0161051b565b93506105f36101008d0161051b565b92506106026101208d0161051b565b91506106116101408d0161051b565b90509295989b509295989b9093969950565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260408201526060019056fea26469706673582212209614bf6f3e0d40851200ce5ac719a6382daeb24bf0f3b0521e44caa5e7d84bdb64736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 53,
        "contract": "contracts/core/Core.sol:Core",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6623,
        "contract": "contracts/core/Core.sol:Core",
        "label": "gemToken",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)774"
      },
      {
        "astId": 6627,
        "contract": "contracts/core/Core.sol:Core",
        "label": "paiToken",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IPAIToken)16238"
      },
      {
        "astId": 6631,
        "contract": "contracts/core/Core.sol:Core",
        "label": "myoToken",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IMYOToken)16178"
      },
      {
        "astId": 6635,
        "contract": "contracts/core/Core.sol:Core",
        "label": "sortedTroves",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(ISortedTroves)16382"
      },
      {
        "astId": 6639,
        "contract": "contracts/core/Core.sol:Core",
        "label": "vault",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IVault)16742"
      },
      {
        "astId": 6643,
        "contract": "contracts/core/Core.sol:Core",
        "label": "priceFeed",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IPriceFeed)16250"
      },
      {
        "astId": 6647,
        "contract": "contracts/core/Core.sol:Core",
        "label": "defaultPool",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IDefaultPool)16026"
      },
      {
        "astId": 6651,
        "contract": "contracts/core/Core.sol:Core",
        "label": "activePool",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(IActivePool)15686"
      },
      {
        "astId": 6655,
        "contract": "contracts/core/Core.sol:Core",
        "label": "collSurplusPool",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(ICollSurplusPool)15842"
      },
      {
        "astId": 6659,
        "contract": "contracts/core/Core.sol:Core",
        "label": "borrowerOperations",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(IBorrowerOperations)15803"
      },
      {
        "astId": 6663,
        "contract": "contracts/core/Core.sol:Core",
        "label": "myoStaking",
        "offset": 0,
        "slot": "11",
        "type": "t_contract(IMYOStaking)16109"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IActivePool)15686": {
        "encoding": "inplace",
        "label": "contract IActivePool",
        "numberOfBytes": "20"
      },
      "t_contract(IBorrowerOperations)15803": {
        "encoding": "inplace",
        "label": "contract IBorrowerOperations",
        "numberOfBytes": "20"
      },
      "t_contract(ICollSurplusPool)15842": {
        "encoding": "inplace",
        "label": "contract ICollSurplusPool",
        "numberOfBytes": "20"
      },
      "t_contract(IDefaultPool)16026": {
        "encoding": "inplace",
        "label": "contract IDefaultPool",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)774": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IMYOStaking)16109": {
        "encoding": "inplace",
        "label": "contract IMYOStaking",
        "numberOfBytes": "20"
      },
      "t_contract(IMYOToken)16178": {
        "encoding": "inplace",
        "label": "contract IMYOToken",
        "numberOfBytes": "20"
      },
      "t_contract(IPAIToken)16238": {
        "encoding": "inplace",
        "label": "contract IPAIToken",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceFeed)16250": {
        "encoding": "inplace",
        "label": "contract IPriceFeed",
        "numberOfBytes": "20"
      },
      "t_contract(ISortedTroves)16382": {
        "encoding": "inplace",
        "label": "contract ISortedTroves",
        "numberOfBytes": "20"
      },
      "t_contract(IVault)16742": {
        "encoding": "inplace",
        "label": "contract IVault",
        "numberOfBytes": "20"
      }
    }
  }
}