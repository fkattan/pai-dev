{
  "address": "0x6e2EF2250877690D1Dd2EeF8167202854FfD8BdE",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrowerOperations",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "PAITokenBalanceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "permitTypeHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x79b59b6ddfeae89432d7c89c4c4fa502ebf5671a842440a02381f914af63255a",
  "receipt": {
    "to": null,
    "from": "0xd28e3542856F157f979111435DaFCC37f419d0c2",
    "contractAddress": "0x6e2EF2250877690D1Dd2EeF8167202854FfD8BdE",
    "transactionIndex": 5,
    "gasUsed": "926550",
    "logsBloom": "0x
    "blockHash": "0xeedab77b15e625a64a79ba6ae95eded317d90c196681ac77f5aba2e381cb88da",
    "transactionHash": "0x79b59b6ddfeae89432d7c89c4c4fa502ebf5671a842440a02381f914af63255a",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 26047929,
        "transactionHash": "0x79b59b6ddfeae89432d7c89c4c4fa502ebf5671a842440a02381f914af63255a",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000d28e3542856f157f979111435dafcc37f419d0c2",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x000000000000000000000000000000000000000000000000001a5589dc8be8a6000000000000000000000000000000000000000000000000099188d041948f6700000000000000000000000000000000000000000000126f9b41dff046fa2d1e000000000000000000000000000000000000000000000000097733466508a6c100000000000000000000000000000000000000000000126f9b5c357a238615c4",
        "logIndex": 11,
        "blockHash": "0xeedab77b15e625a64a79ba6ae95eded317d90c196681ac77f5aba2e381cb88da"
      }
    ],
    "blockNumber": 26047929,
    "cumulativeGasUsed": "2152484",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xeA7925865556a7DD7ba3a48eACe1A90C6F5c3a98",
    "0x894A3A191C5ae1498b873a5260A800fBe1D37610"
  ],
  "numDeployments": 2,
  "solcInputHash": "8aa079dc372efa4fb72dddab2b66ad11",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrowerOperations\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"PAITokenBalanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"permitTypeHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/PAIToken.sol\":\"PAIToken\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/core/PAIToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"../interfaces/IPAIToken.sol\\\";\\nimport \\\"../dependencies/CheckContract.sol\\\";\\n\\n/*\\n *\\n * Based upon OpenZeppelin's ERC20 contract:\\n * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\\n *\\n * and their EIP2612 (ERC20Permit / ERC712) functionality:\\n * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/53516bc555a454862470e7860a9b5254db4d00f5/contracts/token/ERC20/ERC20Permit.sol\\n *\\n *\\n * --- Functionality added specific to the LUSDToken ---\\n *\\n * 1) Transfer protection: blacklist of addresses that are invalid recipients (i.e. core contracts) in external\\n * transfer() and transferFrom() calls. The purpose is to protect users from losing tokens by mistakenly sending PAI directly to a Liquity\\n * core contract, when they should rather call the right function.\\n *\\n * 2) sendToPool() and returnFromPool(): functions callable only Liquity core contracts, which move PAI tokens between protocol <-> user.\\n */\\n\\ncontract PAIToken is CheckContract, IPAIToken {\\n\\tusing SafeMath for uint256;\\n\\n\\tuint256 private _totalSupply;\\n\\tstring internal constant _NAME = \\\"PAI: ARS Stablecoin\\\";\\n\\tstring internal constant _SYMBOL = \\\"PAI\\\";\\n\\tstring internal constant _VERSION = \\\"1\\\";\\n\\tuint8 internal constant _DECIMALS = 18;\\n\\n\\t// --- Data for EIP2612 ---\\n\\n\\t// keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\tbytes32 private constant _PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n\\t// keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\tbytes32 private constant _TYPE_HASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\\n\\n\\t// Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n\\t// invalidate the cached domain separator if the chain id changes.\\n\\tbytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n\\tuint256 private immutable _CACHED_CHAIN_ID;\\n\\n\\tbytes32 private immutable _HASHED_NAME;\\n\\tbytes32 private immutable _HASHED_VERSION;\\n\\n\\tmapping(address => uint256) private _nonces;\\n\\n\\t// User data for PAI token\\n\\tmapping(address => uint256) private _balances;\\n\\tmapping(address => mapping(address => uint256)) private _allowances;\\n\\n\\taddress private immutable borrowerOperations;\\n\\taddress private immutable vault;\\n\\n\\tconstructor(address _borrowerOperations, address _vault) {\\n\\t\\tcheckContract(_borrowerOperations);\\n\\t\\tcheckContract(_vault);\\n\\n\\t\\tborrowerOperations = _borrowerOperations;\\n\\t\\tvault = _vault;\\n\\n\\t\\tbytes32 hashedName = keccak256(bytes(_NAME));\\n\\t\\tbytes32 hashedVersion = keccak256(bytes(_VERSION));\\n\\n\\t\\t_HASHED_NAME = hashedName;\\n\\t\\t_HASHED_VERSION = hashedVersion;\\n\\t\\t_CACHED_CHAIN_ID = _chainID();\\n\\t\\t_CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(_TYPE_HASH, hashedName, hashedVersion);\\n\\t}\\n\\n\\t// --- Functions for intra-Liquity calls ---\\n\\n\\tfunction mint(address _account, uint256 _amount) external override {\\n\\t\\t_requireCallerIsBorrowerOperations();\\n\\t\\t_mint(_account, _amount);\\n\\t}\\n\\n\\tfunction burn(address _account, uint256 _amount) external override {\\n\\t\\t_requireCallerIsBOorVault();\\n\\t\\t_burn(_account, _amount);\\n\\t}\\n\\n\\t// function sendToPool(\\n\\t// \\taddress _sender,\\n\\t// \\taddress _poolAddress,\\n\\t// \\tuint256 _amount\\n\\t// ) external override {\\n\\t// \\t_requireCallerIsStabilityPool();\\n\\t// \\t_transfer(_sender, _poolAddress, _amount);\\n\\t// }\\n\\n\\t// function returnFromPool(\\n\\t// \\taddress _poolAddress,\\n\\t// \\taddress _receiver,\\n\\t// \\tuint256 _amount\\n\\t// ) external override {\\n\\t// \\t_requireCallerIsTroveMorSP();\\n\\t// \\t_transfer(_poolAddress, _receiver, _amount);\\n\\t// }\\n\\n\\t// --- External functions ---\\n\\n\\tfunction totalSupply() external view override returns (uint256) {\\n\\t\\treturn _totalSupply;\\n\\t}\\n\\n\\tfunction balanceOf(address account) external view override returns (uint256) {\\n\\t\\treturn _balances[account];\\n\\t}\\n\\n\\tfunction transfer(address recipient, uint256 amount) external override returns (bool) {\\n\\t\\t_requireValidRecipient(recipient);\\n\\t\\t_transfer(msg.sender, recipient, amount);\\n\\t\\treturn true;\\n\\t}\\n\\n\\tfunction allowance(address owner, address spender) external view override returns (uint256) {\\n\\t\\treturn _allowances[owner][spender];\\n\\t}\\n\\n\\tfunction approve(address spender, uint256 amount) external override returns (bool) {\\n\\t\\t_approve(msg.sender, spender, amount);\\n\\t\\treturn true;\\n\\t}\\n\\n\\tfunction transferFrom(\\n\\t\\taddress sender,\\n\\t\\taddress recipient,\\n\\t\\tuint256 amount\\n\\t) external override returns (bool) {\\n\\t\\t_requireValidRecipient(recipient);\\n\\t\\t_transfer(sender, recipient, amount);\\n\\t\\t_approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n\\t\\treturn true;\\n\\t}\\n\\n\\tfunction increaseAllowance(address spender, uint256 addedValue) external override returns (bool) {\\n\\t\\t_approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\\n\\t\\treturn true;\\n\\t}\\n\\n\\tfunction decreaseAllowance(address spender, uint256 subtractedValue) external override returns (bool) {\\n\\t\\t_approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n\\t\\treturn true;\\n\\t}\\n\\n\\t// --- EIP 2612 Functionality ---\\n\\n\\tfunction DOMAIN_SEPARATOR() public view override returns (bytes32) {\\n\\t\\tif (_chainID() == _CACHED_CHAIN_ID) {\\n\\t\\t\\treturn _CACHED_DOMAIN_SEPARATOR;\\n\\t\\t} else {\\n\\t\\t\\treturn _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction permit(\\n\\t\\taddress owner,\\n\\t\\taddress spender,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 deadline,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) external override {\\n\\t\\trequire(deadline >= block.timestamp, \\\"PAI: expired deadline\\\");\\n\\t\\tbytes32 digest = keccak256(\\n\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t\\\"\\\\x19\\\\x01\\\",\\n\\t\\t\\t\\tDOMAIN_SEPARATOR(),\\n\\t\\t\\t\\tkeccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, amount, _nonces[owner]++, deadline))\\n\\t\\t\\t)\\n\\t\\t);\\n\\t\\taddress recoveredAddress = ecrecover(digest, v, r, s);\\n\\t\\trequire(recoveredAddress == owner, \\\"PAI: invalid signature\\\");\\n\\t\\t_approve(owner, spender, amount);\\n\\t}\\n\\n\\tfunction nonces(address owner) external view override returns (uint256) {\\n\\t\\t// FOR EIP 2612\\n\\t\\treturn _nonces[owner];\\n\\t}\\n\\n\\t// --- Internal operations ---\\n\\n\\tfunction _chainID() private view returns (uint256 chainID) {\\n\\t\\tassembly {\\n\\t\\t\\tchainID := chainid()\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _buildDomainSeparator(\\n\\t\\tbytes32 _typeHash,\\n\\t\\tbytes32 _name,\\n\\t\\tbytes32 _version\\n\\t) private view returns (bytes32) {\\n\\t\\treturn keccak256(abi.encode(_typeHash, _name, _version, _chainID(), address(this)));\\n\\t}\\n\\n\\t// --- Internal operations ---\\n\\t// Warning: sanity checks (for sender and recipient) should have been done before calling these internal functions\\n\\n\\tfunction _transfer(\\n\\t\\taddress sender,\\n\\t\\taddress recipient,\\n\\t\\tuint256 amount\\n\\t) internal {\\n\\t\\tassert(sender != address(0));\\n\\t\\tassert(recipient != address(0));\\n\\n\\t\\t_balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n\\t\\t_balances[recipient] = _balances[recipient].add(amount);\\n\\t\\temit Transfer(sender, recipient, amount);\\n\\t}\\n\\n\\tfunction _mint(address account, uint256 amount) internal {\\n\\t\\tassert(account != address(0));\\n\\n\\t\\t_totalSupply = _totalSupply.add(amount);\\n\\t\\t_balances[account] = _balances[account].add(amount);\\n\\t\\temit Transfer(address(0), account, amount);\\n\\t}\\n\\n\\tfunction _burn(address account, uint256 amount) internal {\\n\\t\\tassert(account != address(0));\\n\\n\\t\\t_balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n\\t\\t_totalSupply = _totalSupply.sub(amount);\\n\\t\\temit Transfer(account, address(0), amount);\\n\\t}\\n\\n\\tfunction _approve(\\n\\t\\taddress owner,\\n\\t\\taddress spender,\\n\\t\\tuint256 amount\\n\\t) internal {\\n\\t\\tassert(owner != address(0));\\n\\t\\tassert(spender != address(0));\\n\\n\\t\\t_allowances[owner][spender] = amount;\\n\\t\\temit Approval(owner, spender, amount);\\n\\t}\\n\\n\\t// --- 'require' functions ---\\n\\n\\tfunction _requireCallerIsBorrowerOperations() internal view {\\n\\t\\trequire(msg.sender == borrowerOperations, \\\"PAIToken: Unauthorized, caller must be BorrowerOperations\\\");\\n\\t}\\n\\n\\tfunction _requireCallerIsBOorVault() internal view {\\n\\t\\trequire(msg.sender == borrowerOperations || msg.sender == vault, \\\"PAIToken: Unauthorized, caller must be BorrowerOperations\\\");\\n\\t}\\n\\n\\tfunction _requireValidRecipient(address _recipient) internal view {\\n\\t\\trequire(\\n\\t\\t\\t_recipient != address(0) && _recipient != address(this) && _recipient != vault,\\n\\t\\t\\t\\\"PAI: Cannot transfer tokens directly to the PAI token contract, the vault, or the zero address\\\"\\n\\t\\t);\\n\\t}\\n\\n\\t// --- Optional functions ---\\n\\n\\tfunction name() external pure override returns (string memory) {\\n\\t\\treturn _NAME;\\n\\t}\\n\\n\\tfunction symbol() external pure override returns (string memory) {\\n\\t\\treturn _SYMBOL;\\n\\t}\\n\\n\\tfunction decimals() external pure override returns (uint8) {\\n\\t\\treturn _DECIMALS;\\n\\t}\\n\\n\\tfunction version() external pure override returns (string memory) {\\n\\t\\treturn _VERSION;\\n\\t}\\n\\n\\tfunction permitTypeHash() external pure override returns (bytes32) {\\n\\t\\treturn _PERMIT_TYPEHASH;\\n\\t}\\n}\\n\",\"keccak256\":\"0x840b16b0a0e64a8341b3484d62773a3202827c9025ecf481ac3d7af7e993164b\",\"license\":\"MIT\"},\"contracts/dependencies/CheckContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\ncontract CheckContract {\\n\\t/**\\n\\t * Check that the account is an already deployed non-destroyed contract.\\n\\t * See: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol#L12\\n\\t */\\n\\tfunction checkContract(address _account) internal view {\\n\\t\\trequire(_account != address(0), \\\"Account cannot be zero address\\\");\\n\\n\\t\\tuint256 size;\\n\\t\\t// solhint-disable-next-line no-inline-assembly\\n\\t\\tassembly {\\n\\t\\t\\tsize := extcodesize(_account)\\n\\t\\t}\\n\\t\\trequire(size > 0, \\\"Account code size cannot be zero\\\");\\n\\t}\\n}\\n\",\"keccak256\":\"0xb5cb7705e2af49e9ad0be340e8fd106a5bf928fd834ae7e4d22d8c6db17e7844\",\"license\":\"MIT\"},\"contracts/interfaces/IPAIToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IPAIToken is IERC20, IERC20Permit, IERC20Metadata {\\n\\t// --- Events ---\\n\\n\\tevent PAITokenBalanceUpdated(address _user, uint256 _amount);\\n\\n\\t// --- Functions ---\\n\\n\\tfunction mint(address _account, uint256 _amount) external;\\n\\n\\tfunction burn(address _account, uint256 _amount) external;\\n\\n\\t// function sendToPool(\\n\\t// \\taddress _sender,\\n\\t// \\taddress poolAddress,\\n\\t// \\tuint256 _amount\\n\\t// ) external;\\n\\n\\t// function returnFromPool(\\n\\t// \\taddress poolAddress,\\n\\t// \\taddress user,\\n\\t// \\tuint256 _amount\\n\\t// ) external;\\n\\n\\tfunction increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\n\\n\\tfunction decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\n\\n\\tfunction permitTypeHash() external view returns (bytes32);\\n\\n\\tfunction version() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x3312daa10e22922f96ea5015f6a4efdf9fb00b4d9c1bfebf7bf7315a22699840\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101406040523480156200001257600080fd5b506040516200126338038062001263833981016040819052620000359162000241565b620000408262000173565b6200004b8162000173565b6001600160601b0319606083811b82166101005282901b1661012052604080518082018252601381527f5041493a2041525320537461626c65636f696e00000000000000000000000000602091820152815180830190925260018252603160f81b9101527f19c98c5df06b98e9e68894c7120f8fa14b40c9d8ad11f510c04b1409fdfdab9660c08190527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660e0819052620001034690565b60a0908152604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6020808301919091528183018690526060820185905246608083015230828501528251808303909401845260c09091019091528151910120608052506200027892505050565b6001600160a01b038116620001cf5760405162461bcd60e51b815260206004820152601e60248201527f4163636f756e742063616e6e6f74206265207a65726f2061646472657373000060448201526064015b60405180910390fd5b803b80620002205760405162461bcd60e51b815260206004820181905260248201527f4163636f756e7420636f64652073697a652063616e6e6f74206265207a65726f6044820152606401620001c6565b5050565b80516001600160a01b03811681146200023c57600080fd5b919050565b6000806040838503121562000254578182fd5b6200025f8362000224565b91506200026f6020840162000224565b90509250929050565b60805160a05160c05160e0516101005160601c6101205160601c610f87620002dc6000396000818161082b0152610b58015260008181610a3b0152610b2601526000610420015260006103fb0152600061037d015260006103a60152610f876000f3fe608060405234801561001057600080fd5b50600436106100f65760003560e01c806354fd4d501161009257806354fd4d50146101c657806370a08231146101e35780637ecebe00146101f657806395d89b411461021f5780639dc29fac1461023e578063a457c2d714610251578063a9059cbb14610264578063d505accf14610277578063dd62ed3e1461028a576100f6565b806306fdde03146100fb578063095ea7b31461011957806310ce43bd1461013c57806318160ddd1461016c57806323b872dd14610174578063313ce567146101875780633644e51514610196578063395093511461019e57806340c10f19146101b1575b600080fd5b6101036102c3565b6040516101109190610d90565b60405180910390f35b61012c610127366004610d67565b6102f1565b6040519015158152602001610110565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c95b604051908152602001610110565b60005461015e565b61012c610182366004610cbb565b610307565b60405160128152602001610110565b61015e610379565b61012c6101ac366004610d67565b610470565b6101c46101bf366004610d67565b6104a6565b005b6040805180820190915260018152603160f81b6020820152610103565b61015e6101f1366004610c6f565b6104bc565b61015e610204366004610c6f565b6001600160a01b031660009081526001602052604090205490565b60408051808201909152600381526250414960e81b6020820152610103565b6101c461024c366004610d67565b6104db565b61012c61025f366004610d67565b6104ed565b61012c610272366004610d67565b61053c565b6101c4610285366004610cf6565b610552565b61015e610298366004610c89565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205490565b6040805180820190915260138152722820a49d1020a9299029ba30b13632b1b7b4b760691b60208201525b90565b60006102fe338484610757565b50600192915050565b600061031283610801565b61031d8484846108fb565b61036f843361036a85604051806060016040528060288152602001610ee5602891396001600160a01b038a16600090815260036020908152604080832033845290915290205491906109f1565b610757565b5060019392505050565b60007f00000000000000000000000000000000000000000000000000000000000000004614156103ca57507f00000000000000000000000000000000000000000000000000000000000000006102ee565b50604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c090920190925280519101206102ee565b3360008181526003602090815260408083206001600160a01b038716845290915281205490916102fe91859061036a9086610a1d565b6104ae610a30565b6104b88282610a7a565b5050565b6001600160a01b0381166000908152600260205260409020545b919050565b6104e3610b1b565b6104b88282610b96565b60006102fe338461036a85604051806060016040528060258152602001610f2d602591393360009081526003602090815260408083206001600160a01b038d16845290915290205491906109f1565b600061054783610801565b6102fe3384846108fb565b4284101561059f5760405162461bcd60e51b81526020600482015260156024820152745041493a206578706972656420646561646c696e6560581b60448201526064015b60405180910390fd5b60006105a9610379565b6001600160a01b038916600090815260016020526040812080547f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9928c928c928c929091906105f783610e6b565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810187905260e0016040516020818303038152906040528051906020012060405160200161067092919061190160f01b81526002810192909252602282015260420190565b60408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa1580156106db573d6000803e3d6000fd5b505050602060405103519050886001600160a01b0316816001600160a01b0316146107415760405162461bcd60e51b81526020600482015260166024820152755041493a20696e76616c6964207369676e617475726560501b6044820152606401610596565b61074c898989610757565b505050505050505050565b6001600160a01b03831661077b57634e487b7160e01b600052600160045260246000fd5b6001600160a01b03821661079f57634e487b7160e01b600052600160045260246000fd5b6001600160a01b0383811660008181526003602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b0381161580159061082257506001600160a01b0381163014155b801561086057507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031614155b6108f85760405162461bcd60e51b815260206004820152605e60248201527f5041493a2043616e6e6f74207472616e7366657220746f6b656e73206469726560448201527f63746c7920746f207468652050414920746f6b656e20636f6e74726163742c2060648201527f746865207661756c742c206f7220746865207a65726f20616464726573730000608482015260a401610596565b50565b6001600160a01b03831661091f57634e487b7160e01b600052600160045260246000fd5b6001600160a01b03821661094357634e487b7160e01b600052600160045260246000fd5b61098081604051806060016040528060268152602001610ebf602691396001600160a01b03861660009081526002602052604090205491906109f1565b6001600160a01b0380851660009081526002602052604080822093909355908416815220546109af9082610a1d565b6001600160a01b038084166000818152600260205260409081902093909355915190851690600080516020610f0d833981519152906107f49085815260200190565b60008184841115610a155760405162461bcd60e51b81526004016105969190610d90565b505050900390565b6000610a298284610e3c565b9392505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610a785760405162461bcd60e51b815260040161059690610de3565b565b6001600160a01b038216610a9e57634e487b7160e01b600052600160045260246000fd5b600054610aab9082610a1d565b60009081556001600160a01b038316815260026020526040902054610ad09082610a1d565b6001600160a01b038316600081815260026020526040808220939093559151909190600080516020610f0d83398151915290610b0f9085815260200190565b60405180910390a35050565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480610b7a5750336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016145b610a785760405162461bcd60e51b815260040161059690610de3565b6001600160a01b038216610bba57634e487b7160e01b600052600160045260246000fd5b610bf781604051806060016040528060228152602001610e9d602291396001600160a01b03851660009081526002602052604090205491906109f1565b6001600160a01b03831660009081526002602052604081209190915554610c1e9082610c4c565b60009081556040518281526001600160a01b03841690600080516020610f0d83398151915290602001610b0f565b6000610a298284610e54565b80356001600160a01b03811681146104d657600080fd5b600060208284031215610c80578081fd5b610a2982610c58565b60008060408385031215610c9b578081fd5b610ca483610c58565b9150610cb260208401610c58565b90509250929050565b600080600060608486031215610ccf578081fd5b610cd884610c58565b9250610ce660208501610c58565b9150604084013590509250925092565b600080600080600080600060e0888a031215610d10578283fd5b610d1988610c58565b9650610d2760208901610c58565b95506040880135945060608801359350608088013560ff81168114610d4a578384fd5b9699959850939692959460a0840135945060c09093013592915050565b60008060408385031215610d79578182fd5b610d8283610c58565b946020939093013593505050565b6000602080835283518082850152825b81811015610dbc57858101830151858201604001528201610da0565b81811115610dcd5783604083870101525b50601f01601f1916929092016040019392505050565b60208082526039908201527f504149546f6b656e3a20556e617574686f72697a65642c2063616c6c6572206d60408201527875737420626520426f72726f7765724f7065726174696f6e7360381b606082015260800190565b60008219821115610e4f57610e4f610e86565b500190565b600082821015610e6657610e66610e86565b500390565b6000600019821415610e7f57610e7f610e86565b5060010190565b634e487b7160e01b600052601160045260246000fdfe45524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220369f9283414ac36dab67acecbf144f29f9abf0dd52624fb2f9e926b0c909e1fc64736f6c63430008030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f65760003560e01c806354fd4d501161009257806354fd4d50146101c657806370a08231146101e35780637ecebe00146101f657806395d89b411461021f5780639dc29fac1461023e578063a457c2d714610251578063a9059cbb14610264578063d505accf14610277578063dd62ed3e1461028a576100f6565b806306fdde03146100fb578063095ea7b31461011957806310ce43bd1461013c57806318160ddd1461016c57806323b872dd14610174578063313ce567146101875780633644e51514610196578063395093511461019e57806340c10f19146101b1575b600080fd5b6101036102c3565b6040516101109190610d90565b60405180910390f35b61012c610127366004610d67565b6102f1565b6040519015158152602001610110565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c95b604051908152602001610110565b60005461015e565b61012c610182366004610cbb565b610307565b60405160128152602001610110565b61015e610379565b61012c6101ac366004610d67565b610470565b6101c46101bf366004610d67565b6104a6565b005b6040805180820190915260018152603160f81b6020820152610103565b61015e6101f1366004610c6f565b6104bc565b61015e610204366004610c6f565b6001600160a01b031660009081526001602052604090205490565b60408051808201909152600381526250414960e81b6020820152610103565b6101c461024c366004610d67565b6104db565b61012c61025f366004610d67565b6104ed565b61012c610272366004610d67565b61053c565b6101c4610285366004610cf6565b610552565b61015e610298366004610c89565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205490565b6040805180820190915260138152722820a49d1020a9299029ba30b13632b1b7b4b760691b60208201525b90565b60006102fe338484610757565b50600192915050565b600061031283610801565b61031d8484846108fb565b61036f843361036a85604051806060016040528060288152602001610ee5602891396001600160a01b038a16600090815260036020908152604080832033845290915290205491906109f1565b610757565b5060019392505050565b60007f00000000000000000000000000000000000000000000000000000000000000004614156103ca57507f00000000000000000000000000000000000000000000000000000000000000006102ee565b50604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c090920190925280519101206102ee565b3360008181526003602090815260408083206001600160a01b038716845290915281205490916102fe91859061036a9086610a1d565b6104ae610a30565b6104b88282610a7a565b5050565b6001600160a01b0381166000908152600260205260409020545b919050565b6104e3610b1b565b6104b88282610b96565b60006102fe338461036a85604051806060016040528060258152602001610f2d602591393360009081526003602090815260408083206001600160a01b038d16845290915290205491906109f1565b600061054783610801565b6102fe3384846108fb565b4284101561059f5760405162461bcd60e51b81526020600482015260156024820152745041493a206578706972656420646561646c696e6560581b60448201526064015b60405180910390fd5b60006105a9610379565b6001600160a01b038916600090815260016020526040812080547f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9928c928c928c929091906105f783610e6b565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810187905260e0016040516020818303038152906040528051906020012060405160200161067092919061190160f01b81526002810192909252602282015260420190565b60408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa1580156106db573d6000803e3d6000fd5b505050602060405103519050886001600160a01b0316816001600160a01b0316146107415760405162461bcd60e51b81526020600482015260166024820152755041493a20696e76616c6964207369676e617475726560501b6044820152606401610596565b61074c898989610757565b505050505050505050565b6001600160a01b03831661077b57634e487b7160e01b600052600160045260246000fd5b6001600160a01b03821661079f57634e487b7160e01b600052600160045260246000fd5b6001600160a01b0383811660008181526003602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b0381161580159061082257506001600160a01b0381163014155b801561086057507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031614155b6108f85760405162461bcd60e51b815260206004820152605e60248201527f5041493a2043616e6e6f74207472616e7366657220746f6b656e73206469726560448201527f63746c7920746f207468652050414920746f6b656e20636f6e74726163742c2060648201527f746865207661756c742c206f7220746865207a65726f20616464726573730000608482015260a401610596565b50565b6001600160a01b03831661091f57634e487b7160e01b600052600160045260246000fd5b6001600160a01b03821661094357634e487b7160e01b600052600160045260246000fd5b61098081604051806060016040528060268152602001610ebf602691396001600160a01b03861660009081526002602052604090205491906109f1565b6001600160a01b0380851660009081526002602052604080822093909355908416815220546109af9082610a1d565b6001600160a01b038084166000818152600260205260409081902093909355915190851690600080516020610f0d833981519152906107f49085815260200190565b60008184841115610a155760405162461bcd60e51b81526004016105969190610d90565b505050900390565b6000610a298284610e3c565b9392505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610a785760405162461bcd60e51b815260040161059690610de3565b565b6001600160a01b038216610a9e57634e487b7160e01b600052600160045260246000fd5b600054610aab9082610a1d565b60009081556001600160a01b038316815260026020526040902054610ad09082610a1d565b6001600160a01b038316600081815260026020526040808220939093559151909190600080516020610f0d83398151915290610b0f9085815260200190565b60405180910390a35050565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480610b7a5750336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016145b610a785760405162461bcd60e51b815260040161059690610de3565b6001600160a01b038216610bba57634e487b7160e01b600052600160045260246000fd5b610bf781604051806060016040528060228152602001610e9d602291396001600160a01b03851660009081526002602052604090205491906109f1565b6001600160a01b03831660009081526002602052604081209190915554610c1e9082610c4c565b60009081556040518281526001600160a01b03841690600080516020610f0d83398151915290602001610b0f565b6000610a298284610e54565b80356001600160a01b03811681146104d657600080fd5b600060208284031215610c80578081fd5b610a2982610c58565b60008060408385031215610c9b578081fd5b610ca483610c58565b9150610cb260208401610c58565b90509250929050565b600080600060608486031215610ccf578081fd5b610cd884610c58565b9250610ce660208501610c58565b9150604084013590509250925092565b600080600080600080600060e0888a031215610d10578283fd5b610d1988610c58565b9650610d2760208901610c58565b95506040880135945060608801359350608088013560ff81168114610d4a578384fd5b9699959850939692959460a0840135945060c09093013592915050565b60008060408385031215610d79578182fd5b610d8283610c58565b946020939093013593505050565b6000602080835283518082850152825b81811015610dbc57858101830151858201604001528201610da0565b81811115610dcd5783604083870101525b50601f01601f1916929092016040019392505050565b60208082526039908201527f504149546f6b656e3a20556e617574686f72697a65642c2063616c6c6572206d60408201527875737420626520426f72726f7765724f7065726174696f6e7360381b606082015260800190565b60008219821115610e4f57610e4f610e86565b500190565b600082821015610e6657610e66610e86565b500390565b6000600019821415610e7f57610e7f610e86565b5060010190565b634e487b7160e01b600052601160045260246000fdfe45524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220369f9283414ac36dab67acecbf144f29f9abf0dd52624fb2f9e926b0c909e1fc64736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "DOMAIN_SEPARATOR()": {
        "details": "Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
      },
      "allowance(address,address)": {
        "details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
      },
      "approve(address,uint256)": {
        "details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
      },
      "balanceOf(address)": {
        "details": "Returns the amount of tokens owned by `account`."
      },
      "decimals()": {
        "details": "Returns the decimals places of the token."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "nonces(address)": {
        "details": "Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."
      },
      "symbol()": {
        "details": "Returns the symbol of the token."
      },
      "totalSupply()": {
        "details": "Returns the amount of tokens in existence."
      },
      "transfer(address,uint256)": {
        "details": "Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
      },
      "transferFrom(address,address,uint256)": {
        "details": "Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8353,
        "contract": "contracts/core/PAIToken.sol:PAIToken",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 8383,
        "contract": "contracts/core/PAIToken.sol:PAIToken",
        "label": "_nonces",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8387,
        "contract": "contracts/core/PAIToken.sol:PAIToken",
        "label": "_balances",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8393,
        "contract": "contracts/core/PAIToken.sol:PAIToken",
        "label": "_allowances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}